
下面是一些文件路径以及每个文件对应的源码：

##File: https://help.aliyun.com/zh/dashscope/developer-reference/tongyi-qianwen-vl-plus-api?disableWebsiteRedirect=true

<!DOCTYPE html><html><head>
  <meta name="nav-disable" content="flex">
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
  <meta http-equiv="Cache-Control" content="no-siteapp">
  <meta name="renderer" content="webkit">
  <meta http-equiv="x-ua-compatible" content="ie=edge,chrome=1">
  <meta name="viewport" content="width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no">
  <meta name="applicable-device" content="pc,mobile">
  <meta name="nav-config" content="footer=default">
  <meta name="data-spm" content="a2c4g">
  <meta name="aplus-ajax" content="chksum">
  <meta name="aplus-waiting" content="MAN">
  <meta name="aplus-pvhash" content="1">
  <script>
    window.pageStartTime = Date.now();
  </script>

  
  <title>API详情_模型服务灵积(DashScope)-阿里云帮助中心</title>
  <link rel="canonical" href="https://help.aliyun.com/zh/dashscope/developer-reference/tongyi-qianwen-vl-plus-api">
  <meta name="keywords" content="模型,image,生成,messages,输入,图片,输出">
  <meta name="description" content="通义千问VL说明支持的领域 / 任务：aigc通义千问开源视觉理解大模型Qwen-VL于2023年12月1日发布重大更新，不仅大幅提升通用OCR、视觉推理、中文文本理解基础能力，还能处理各种分辨率和规格的图像，甚至能“看图做题”。升级的Qwen-VL(qwen-vl-plus/qwen-vl-max...">
  <meta name="last-modified" content="2024-02-28T10:06:52+08:00">
  <meta name="date" content="2023-11-30T08:03:19+08:00">
  
  <link rel="icon" href="https://img.alicdn.com/tfs/TB1_ZXuNcfpK1RjSZFOXXa6nFXa-32-32.ico" type="image/x-icon">
  <link href="https://g.alicdn.com/aliyun-help/help-portal-fe/0.9.9/css/index.css" rel="stylesheet">
  <script>
    window.globalData = {
      nodeId: "2637937",
    }
  </script>
<script>
    window.__ICE_SSR_ENABLED__=true;
    window.__ICE_APP_DATA__={};
window.__ICE_PAGE_PROPS__={"docDetailData":{"storeData":{"alias":"/dashscope/developer-reference/tongyi-qianwen-vl-plus-api","nodeId":null,"data":{"lastModifiedTime":1709086012000,"keywords":"模型,image,生成,messages,输入,图片,输出","docTitle":"API详情","language":"zh","seoTitle":"API详情_模型服务灵积(DashScope)-阿里云帮助中心","title":"API详情","content":"<div lang=\"zh\" class=\"icms-help-docs-content\">\n<main id=\"main-2552254\"><p data-tag=\"shortdesc\" id=\"4d30812818uek\" class=\"shortdesc\"></p><div data-tag=\"body\" class=\"body\"><section id=\"28f6fd00cfp2q\" class=\"section\"><h2 id=\"29788910cfg6w\">通义千问VL</h2><div type=\"note\" id=\"3067e540cf9mp\" class=\"note note-note\"><div class=\"note-icon-wrapper\"><i class=\"icon-note note note\"></i></div><div class=\"noteContentSpan\"><strong>说明 </strong><p id=\"3b4725cfb8eh7\">支持的领域 / 任务：aigc </p></div></div><p id=\"0ad29d49edy7k\"></p><p id=\"567447ba9a1jo\">通义千问开源视觉理解大模型Qwen-VL于2023年12月1日发布重大更新，不仅大幅提升通用OCR、视觉推理、中文文本理解基础能力，还能处理各种分辨率和规格的图像，甚至能“看图做题”。</p><p id=\"0ce8e22bdc6i9\"></p><p jc=\"start\" id=\"634e4d16bavwk\" style=\"text-align:start\">升级的Qwen-VL(qwen-vl-plus/qwen-vl-max)模型现有几大特点：</p><p id=\"85d725b8adzna\">‒ 大幅增强了图片中文字处理能力，能够成为生产力小帮手，提取、整理、总结文字信息不在话下。</p><p id=\"7f67b428adxsv\">‒ 增加可处理分辨率范围，各分辨率和长宽比的图都能处理，大图和长图能看清。</p><p id=\"d1701305fbv6y\">‒ 增强视觉推理和决策能力，适于搭建视觉Agent，让大模型Agent的想象力进一步扩展。</p><p id=\"d2a5eba23aw7f\">‒ 升级看图做题能力，拍一拍习题图发给Qwen-VL，大模型能帮用户一步步解题。</p><p jc=\"start\" id=\"8a6d2a3c526dn\" style=\"text-align:start\"></p><p id=\"60071e85e3s45\">用户以文本和URL形式的图片形式输入包含多轮对话历史和当前指令的信息序列（messages），到返回模型生成的回复作为输出。在这一过程中，文本将被转换为语言模型可以处理的token序列。Token是模型用来表示自然语言文本的基本单位，可以直观的理解为“字”或“词”。对于中文文本来说，1个token通常对应一个汉字；对于英文文本来说，1个token通常对应3至4个字母或1个单词。例如，中文文本“你好，我是通义千问”会被转换成序列['你', '好', '，', '我', '是', '通', '义', '千', '问']，而英文文本\"Nice to meet you.\"则会被转换成['Nice', ' to', ' meet', ' you', '.']；图片将被转换为固定长度的token序列。</p><p id=\"44c4568a7e7cb\"></p><p id=\"6769a0188ehqi\">由于模型调用的计算量与token序列长度相关，输入或输出token数量越多，模型的计算时间越长，我们将根据模型输入和输出的token数量计费。可以从API返回结果的<i> usage </i>字段中了解到您每次调用时使用的token数量。</p><p id=\"d8db09db8574t\"></p><p id=\"346faf02bc551\">对于输入的图片有以下限制：</p><ol id=\"7e5a5bb8f4oy7\" start=\"1\"><li id=\"4105be3efdvsz\"><p id=\"721af3a7dfe41\">图片文件大小不超过10MB</p></li><li id=\"a831410bf4pnr\"><p id=\"e95dbb07f7ikw\">图片总的像素数不超过 1048576，这相当于一张长宽均为 1024 的图片总像素数</p></li></ol><p id=\"beeca73d76mh8\">图片支持的格式：</p><table id=\"79be8d4c720wb\" tablewidth=\"710\" tablecolswidth=\"216 242 251\" autofit=\"false\" class=\"table\"><colgroup colwidth=\"0.92*\" style=\"width:30.42%\"></colgroup><colgroup colwidth=\"1.03*\" style=\"width:34.08%\"></colgroup><colgroup colwidth=\"1.06*\" style=\"width:35.35%\"></colgroup><tbody class=\"tbody\"><tr id=\"b1c1ca5e3ao0x\" style=\"height:42px\"><td id=\"90762c0959k5e\" rowspan=\"1\" style=\"background-color:#EFF0F0\" colspan=\"1\"><p jc=\"left\" id=\"55db6dea11jhd\" style=\"text-align:left\">图片格式</p></td><td id=\"4782f1a1242pz\" rowspan=\"1\" style=\"background-color:#EFF0F0\" colspan=\"1\"><p jc=\"left\" id=\"8bb5755d1f09h\" style=\"text-align:left\">Content Type</p></td><td id=\"250e8a67c7nl8\" rowspan=\"1\" style=\"background-color:#EFF0F0\" colspan=\"1\"><p jc=\"left\" id=\"e69b2041a0afa\" style=\"text-align:left\">文件扩展名</p></td></tr><tr id=\"852dcf10c4lut\"><td id=\"c56dd14063zfe\" rowspan=\"1\" colspan=\"1\"><p id=\"38f40408deos8\">BMP </p></td><td id=\"2dcd7dba44116\" rowspan=\"1\" colspan=\"1\"><p id=\"287034055brnx\">image/bmp</p></td><td id=\"991a1bd04dsj6\" rowspan=\"1\" colspan=\"1\"><p id=\"995892f9afg6z\">.bmp</p></td></tr><tr id=\"1148d93bdbtb2\"><td id=\"dcd4a17d3cr23\" rowspan=\"1\" colspan=\"1\"><p id=\"d463e2fea6p5a\">DIB </p></td><td id=\"538b3e37a7s3m\" rowspan=\"1\" colspan=\"1\"><p id=\"5e09462251wrj\">image/bmp</p></td><td id=\"0a685cc9e8n2i\" rowspan=\"1\" colspan=\"1\"><p id=\"61b780aed00bh\">.dib</p></td></tr><tr id=\"8b4e3918768z2\"><td id=\"45fbb6e5d2tv1\" rowspan=\"1\" colspan=\"1\"><p id=\"32cfd80c6c2nw\">ICNS </p></td><td id=\"72b19bd2ffewi\" rowspan=\"1\" colspan=\"1\"><p id=\"1ec4e717181px\">image/icns</p></td><td id=\"0f9d8e4fd006t\" rowspan=\"1\" colspan=\"1\"><p id=\"4454817e30205\">.icns</p></td></tr><tr id=\"7068ed315a8g8\"><td id=\"8787c40bab6pp\" rowspan=\"1\" colspan=\"1\"><p id=\"76cd3cd6a8ugn\">ICO </p></td><td id=\"2826ca965et03\" rowspan=\"1\" colspan=\"1\"><p id=\"34955fd239aqk\">image/x-icon</p></td><td id=\"7dcb902673tyl\" rowspan=\"1\" colspan=\"1\"><p id=\"8839528561igu\">.ico</p></td></tr><tr id=\"62d49ba39b25u\"><td id=\"fb47583dcbvch\" rowspan=\"1\" colspan=\"1\"><p id=\"8b582a877fzzu\">JPEG </p></td><td id=\"a03771790evgy\" rowspan=\"1\" colspan=\"1\"><p id=\"65fb3a6c94kqb\">image/jpeg</p></td><td id=\"a4b8d0693d6au\" rowspan=\"1\" colspan=\"1\"><p id=\"786ca8a291oz1\">.jfif, .jpe, .jpeg, .jpg</p></td></tr><tr id=\"87ce041990qwg\"><td id=\"830edfe29d06q\" rowspan=\"1\" colspan=\"1\"><p id=\"3d3accb176hmi\">JPEG2000 </p></td><td id=\"999a2906a9588\" rowspan=\"1\" colspan=\"1\"><p id=\"104b0972a485p\">image/jp2</p></td><td id=\"e03b6d4e1b5q0\" rowspan=\"1\" colspan=\"1\"><p id=\"5f4c58e440esc\">.j2c, .j2k, .jp2, .jpc, .jpf, .jpx</p></td></tr><tr id=\"658084805e2k5\"><td id=\"63ed978449so2\" rowspan=\"1\" colspan=\"1\"><p id=\"2645f1f6f9ot3\">PNG </p></td><td id=\"b8d96a87709i8\" rowspan=\"1\" colspan=\"1\"><p id=\"a066b116d8ier\">image/png</p></td><td id=\"64eddd8000uh4\" rowspan=\"1\" colspan=\"1\"><p id=\"502b6d1570b46\">.apng, .png</p></td></tr><tr id=\"281dc5dc77t3i\"><td id=\"346c01d8a8dke\" rowspan=\"1\" colspan=\"1\"><p id=\"c669f3a4c9fid\">SGI </p></td><td id=\"e359da8cb9ixz\" rowspan=\"1\" colspan=\"1\"><p id=\"ed3159ce458n8\">image/sgi</p></td><td id=\"a1bf278bacjxf\" rowspan=\"1\" colspan=\"1\"><p id=\"4616da1ffdm7c\">.bw, .rgb, .rgba, .sgi</p></td></tr><tr id=\"afb734c33eqwl\" style=\"height:42px\"><td id=\"0acf9088bf1h1\" rowspan=\"1\" colspan=\"1\"><p id=\"717e35beebuhy\">TIFF </p></td><td id=\"d1a15aa2343hp\" rowspan=\"1\" colspan=\"1\"><p id=\"fe7a76e716122\">image/tiff</p></td><td id=\"c5aaa9314152h\" rowspan=\"1\" colspan=\"1\"><p id=\"df9075381by7p\">.tif, .tiff</p></td></tr><tr id=\"b08957f86925p\"><td id=\"49363f3f8e3aw\" rowspan=\"1\" colspan=\"1\"><p id=\"00a08e8463ihr\">WEBP </p></td><td id=\"bbd5a68ff2rdr\" rowspan=\"1\" colspan=\"1\"><p id=\"b75a658552vqs\">image/webp</p></td><td id=\"354a2e580fh2r\" rowspan=\"1\" colspan=\"1\"><p id=\"10c1c88338y46\">.webp</p></td></tr></tbody></table><p id=\"a88572cf3b8wr\"></p></section><section id=\"43f870c0cfvsy\" class=\"section\"><h2 id=\"BQnl3\"><b>模型概览</b></h2><table id=\"49f3f710cflk9\" tablewidth=\"710\" tablecolswidth=\"186 524\" autofit=\"false\" class=\"table\"><colgroup colwidth=\"0.52*\" style=\"width:26.20%\"></colgroup><colgroup colwidth=\"1.48*\" style=\"width:73.80%\"></colgroup><tbody class=\"tbody\"><tr id=\"49f3f715cffpa\" style=\"height:41px\"><td id=\"4b8aeac0cfkwo\" rowspan=\"1\" style=\"background-color:#EFF0F0\" colspan=\"1\"><p jc=\"center\" id=\"db1dc12a59m5l\" style=\"text-align:center\">模型名</p></td><td id=\"4b8aeac1cf6pl\" rowspan=\"1\" style=\"background-color:#EFF0F0\" colspan=\"1\"><p jc=\"center\" id=\"628d87b7b5irw\" style=\"text-align:center\">模型简介</p></td></tr><tr id=\"49f3f71acfsck\"><td id=\"4b8b11d0cfkv0\" rowspan=\"1\" colspan=\"1\"><p jc=\"center\" id=\"326b6427831l4\" style=\"text-align:center\">qwen-vl-plus</p><p jc=\"center\" id=\"90a1c41685v69\" style=\"text-align:center\">（限时免费开放中）</p></td><td id=\"4b8b11d1cffyp\" rowspan=\"1\" colspan=\"1\"><p id=\"069b5967c0el3\">通义千问<b>大规模视觉语言模型增强版</b>。大幅提升细节识别能力和文字识别能力，支持超百万像素分辨率和任意长宽比规格的图像。在广泛的视觉任务上提供<b>卓越</b>的性能。</p><p id=\"6f67b665aemt3\"></p></td></tr><tr id=\"90b319b4884rh\"><td id=\"8612434974hbc\" rowspan=\"1\" colspan=\"1\"><p jc=\"center\" id=\"9abdfc8a201in\" style=\"text-align:center\">qwen-vl-max</p><p jc=\"center\" id=\"a0894565calc7\" style=\"text-align:center\">（限时免费开放中）</p></td><td id=\"2850eca66bwqi\" rowspan=\"1\" colspan=\"1\"><p id=\"1ef89ef204hhr\">通义千问<b>超大规模视觉语言模型</b>。相比增强版，再次提升视觉推理能力和指令遵循能力，提供更高的视觉感知和认知水平。在更多复杂任务上提供<b>最佳</b>的性能。</p></td></tr></tbody></table><h2 id=\"EKM4W\"><b>SDK使用</b></h2><h3 id=\"o6ecl\"><b>前提条件</b></h3><ul id=\"cfad6141cfvk3\" class=\"ne-ul\"><li id=\"u83127e7e\"><p id=\"65bdb83721fpi\">已开通服务并获得API-KEY：<a title=\"\" class=\"xref\" href=\"/zh/dashscope/developer-reference/activate-dashscope-and-create-an-api-key\">开通DashScope并创建API-KEY</a>。</p></li><li id=\"a3b27291d3brf\"><p id=\"33d51c9b31ozy\">已安装最新版SDK：<a title=\"\" class=\"xref\" href=\"/zh/dashscope/developer-reference/install-dashscope-sdk\">安装DashScope SDK</a>。</p></li></ul><p id=\"f616c0bf4cns7\"></p><h3 id=\"t4GMg\"><b>问答示例</b></h3><p id=\"17c044fc4e8yd\">以下示例展示了调用通义千问VL模型对用户指令进行响应的代码。</p><div id=\"7491b1b1cfzyq\" type=\"note\" class=\"note note-note\"><div class=\"note-icon-wrapper\"><i class=\"icon-note note note\"></i></div><div class=\"noteContentSpan\"><strong>说明 </strong><p id=\"049ed06c5ciot\">需要使用您的API-KEY替换示例中的<i> </i>YOUR_DASHSCOPE_API_KEY，代码才能正常运行。</p></div></div><p id=\"ebbaa3018awi3\"><b>API-KEY设置</b></p><pre id=\"wsk5pi\" outputclass=\"language-shell\" data-tag=\"codeblock\" class=\"pre codeblock language-shell\"><code>export DASHSCOPE_API_KEY=YOUR_DASHSCOPE_API_KEY</code></pre><h3 id=\"f1a81bc048hjj\"><b>简单示例</b></h3><div outputclass=\"tabbed-codeblock\" data-tag=\"fig\" id=\"79e33c60cfau8\" class=\"tabbed-codeblock-box\"><div class=\"tab-box\"></div><input type=\"radio\" name=\"check-79e33c60cfau8\" id=\"79e33c60cfau8-python-tab\" checked><label for=\"79e33c60cfau8-python-tab\">Python</label><div class=\"codeblock-item\"><pre id=\"79e33c61cf88x\" data-tag=\"codeblock\" outputclass=\"language-python\" class=\"pre codeblock language-python\"><code>from http import HTTPStatus\nimport dashscope\n\n\ndef simple_multimodal_conversation_call():\n    \"\"\"Simple single round multimodal conversation call.\n    \"\"\"\n    messages = [\n        {\n            \"role\": \"user\",\n            \"content\": [\n                {\"image\": \"https://dashscope.oss-cn-beijing.aliyuncs.com/images/dog_and_girl.jpeg\"},\n                {\"text\": \"这是什么?\"}\n            ]\n        }\n    ]\n    response = dashscope.MultiModalConversation.call(model='qwen-vl-plus',\n                                                     messages=messages)\n    # The response status_code is HTTPStatus.OK indicate success,\n    # otherwise indicate request is failed, you can get error code\n    # and message from code and message.\n    if response.status_code == HTTPStatus.OK:\n        print(response)\n    else:\n        print(response.code)  # The error code.\n        print(response.message)  # The error message.\n\n\nif __name__ == '__main__':\n    simple_multimodal_conversation_call()\n</code></pre></div><input type=\"radio\" name=\"check-79e33c60cfau8\" id=\"79e33c60cfau8-java-tab\"><label for=\"79e33c60cfau8-java-tab\">Java</label><div class=\"codeblock-item\"><pre id=\"14a9e68048dqr\" data-tag=\"codeblock\" outputclass=\"language-java\" class=\"pre codeblock language-java\"><code>// Copyright (c) Alibaba, Inc. and its affiliates.\n\nimport java.util.Arrays;\nimport java.util.Collections;\nimport com.alibaba.dashscope.aigc.multimodalconversation.MultiModalConversation;\nimport com.alibaba.dashscope.aigc.multimodalconversation.MultiModalConversationParam;\nimport com.alibaba.dashscope.aigc.multimodalconversation.MultiModalConversationResult;\nimport com.alibaba.dashscope.common.MultiModalMessage;\nimport com.alibaba.dashscope.common.Role;\nimport com.alibaba.dashscope.exception.ApiException;\nimport com.alibaba.dashscope.exception.NoApiKeyException;\nimport com.alibaba.dashscope.exception.UploadFileException;\n\npublic class Main {\n    public static void simpleMultiModalConversationCall()\n            throws ApiException, NoApiKeyException, UploadFileException {\n        MultiModalConversation conv = new MultiModalConversation();\n        MultiModalMessage userMessage = MultiModalMessage.builder().role(Role.USER.getValue())\n        .content(Arrays.asList(Collections.singletonMap(\"image\", \"https://dashscope.oss-cn-beijing.aliyuncs.com/images/dog_and_girl.jpeg\"), \n        Collections.singletonMap(\"text\", \"这是什么?\"))).build();\n        MultiModalConversationParam param = MultiModalConversationParam.builder()\n                .model(MultiModalConversation.Models.QWEN_VL_PLUS)\n                .message(userMessage)\n                .build();\n        MultiModalConversationResult result = conv.call(param);\n        System.out.println(result);\n    }\n\n    public static void main(String[] args) {\n        try {\n            simpleMultiModalConversationCall();\n        } catch (ApiException | NoApiKeyException | UploadFileException e) {\n            System.out.println(e.getMessage());\n        }\n        System.exit(0);\n    }\n}\n</code></pre></div></div><h3 id=\"8d583410d7so6\"><b>本地文件</b></h3><p id=\"6cb9eb4437ht1\">您可以通过本地文件测试接口调用，示例代码如下。</p><div id=\"30a80305fajgx\" type=\"note\" class=\"note note-note\"><div class=\"note-icon-wrapper\"><i class=\"icon-note note note\"></i></div><div class=\"noteContentSpan\"><strong>说明 </strong><p id=\"25880dbe3324t\">本地文件的调用方式下，您的文件将通过SDK自动上传到DashScope平台的安全存储空间，该空间仅提供临时存储，不为DashScope平台方以外的任何人访问。在调用完成后，平台将及时删除临时文件，您的文件不会被用于任何其他用途。</p></div></div><div outputclass=\"tabbed-codeblock\" data-tag=\"fig\" id=\"6ac2a9e0795cy\" class=\"tabbed-codeblock-box\"><div class=\"tab-box\"></div><input type=\"radio\" name=\"check-6ac2a9e0795cy\" id=\"6ac2a9e0795cy-python-tab\" checked><label for=\"6ac2a9e0795cy-python-tab\">Python</label><div class=\"codeblock-item\"><pre id=\"6ac2d0f079op3\" data-tag=\"codeblock\" outputclass=\"language-python\" class=\"pre codeblock language-python\"><code>from dashscope import MultiModalConversation\n\n\ndef call_with_local_file():\n    \"\"\"Sample of use local file.\n       linux&amp;mac file schema: file:///home/images/test.png\n       windows file schema: file://D:/images/abc.png\n    \"\"\"\n    local_file_path1 = 'file://The_local_absolute_file_path1'\n    local_file_path2 = 'file://The_local_absolute_file_path1'\n    messages = [{\n        'role': 'system',\n        'content': [{\n            'text': 'You are a helpful assistant.'\n        }]\n    }, {\n        'role':\n        'user',\n        'content': [\n            {\n                'image': local_file_path1\n            },\n            {\n                'image': local_file_path2\n            },\n            {\n                'text': '图片里有什么东西?'\n            },\n        ]\n    }]\n    response = MultiModalConversation.call(model='qwen-vl-plus', messages=messages)\n    print(response)\n\n\nif __name__ == '__main__':\n    call_with_local_file()\n</code></pre></div><input type=\"radio\" name=\"check-6ac2a9e0795cy\" id=\"6ac2a9e0795cy-java-tab\"><label for=\"6ac2a9e0795cy-java-tab\">Java</label><div class=\"codeblock-item\"><pre id=\"95e8e380798lp\" data-tag=\"codeblock\" outputclass=\"language-java\" class=\"pre codeblock language-java\"><code>// Copyright (c) Alibaba, Inc. and its affiliates.\n\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport com.alibaba.dashscope.aigc.multimodalconversation.MultiModalConversation;\nimport com.alibaba.dashscope.aigc.multimodalconversation.MultiModalConversationParam;\nimport com.alibaba.dashscope.aigc.multimodalconversation.MultiModalConversationResult;\nimport com.alibaba.dashscope.common.MultiModalMessage;\nimport com.alibaba.dashscope.common.Role;\nimport com.alibaba.dashscope.exception.ApiException;\nimport com.alibaba.dashscope.exception.NoApiKeyException;\nimport com.alibaba.dashscope.exception.UploadFileException;\nimport io.reactivex.Flowable;\n\npublic class MultiModalConversationLocalFile2 {\n    /**\n     * sample of use local file\n     * Windows file format: file:///D:/test/images/test.png\n     * Linux &amp; Mac format: file://The_absolute_local_path\n     * \n     */\n    public static void callWithLocalFile()\n            throws ApiException, NoApiKeyException, UploadFileException {\n        String localFilePath1 = \"file://The_file_absolute_path\";\n        String localFilePath2 = \"file://The_file_absolute_path2\"; \n        MultiModalConversation conv = new MultiModalConversation();\n        // The content list elements must be mutable map, such as HashMap.\n        MultiModalMessage userMessage = MultiModalMessage.builder().role(Role.USER.getValue())\n        .content(Arrays.asList(new HashMap&lt;String, Object&gt;(){{put(\"image\", localFilePath1);}},\n                               new HashMap&lt;String, Object&gt;(){{put(\"image\", localFilePath2);}},\n                               new HashMap&lt;String, Object&gt;(){{put(\"text\", \"这是什么?\");}})).build();\n        MultiModalConversationParam param = MultiModalConversationParam.builder()\n                .model(MultiModalConversation.Models.QWEN_VL_PLUS)\n                .message(userMessage)\n                .build();\n        Flowable&lt;MultiModalConversationResult&gt; result = conv.streamCall(param);\n        result.blockingForEach(item -&gt; {\n            System.out.println(item);\n        });\n    }\n\n    public static void main(String[] args) {\n        try {\n            callWithLocalFile();\n        } catch (ApiException | NoApiKeyException | UploadFileException e) {\n            System.out.println(e.getMessage());\n        }\n        System.exit(0);\n    }\n}\n\n\n</code></pre></div></div><h3 id=\"5dc4b49079iy5\"><b>多轮对话</b></h3><p id=\"a58680ba7f761\"></p><div outputclass=\"tabbed-codeblock\" data-tag=\"fig\" id=\"5437a02048ux4\" class=\"tabbed-codeblock-box\"><div class=\"tab-box\"></div><input type=\"radio\" name=\"check-5437a02048ux4\" id=\"5437a02048ux4-python-tab\" checked><label for=\"5437a02048ux4-python-tab\">Python</label><div class=\"codeblock-item\"><pre id=\"5437ee4048svn\" data-tag=\"codeblock\" outputclass=\"language-python\" class=\"pre codeblock language-python\"><code>from http import HTTPStatus\nfrom dashscope import MultiModalConversation\n\n\ndef conversation_call():\n    \"\"\"Sample of multiple rounds of conversation.\n    \"\"\"\n    messages = [\n        {\n            \"role\": \"user\",\n            \"content\": [\n                {\"image\": \"https://dashscope.oss-cn-beijing.aliyuncs.com/images/dog_and_girl.jpeg\"},\n                {\"text\": \"这是什么?\"},\n            ]\n        }\n    ]\n    response = MultiModalConversation.call(model='qwen-vl-plus',\n                                           messages=messages)\n    # The response status_code is HTTPStatus.OK indicate success,\n    # otherwise indicate request is failed, you can get error code\n    # and message from code and message.\n    if response.status_code == HTTPStatus.OK:\n        print(response)\n    else:\n        print(response.code)  # The error code.\n        print(response.message)  # The error message.\n    messages.append({'role': response.output.choices[0].message.role,\n                     'content': response.output.choices[0].message.content})\n    messages.append({\"role\": \"user\",\n                     \"content\": [\n                         {\"text\": \"她们在干什么?\", }\n                     ]})\n    import json\n    print(json.dumps(messages, ensure_ascii=False))\n    response = MultiModalConversation.call(model='qwen-vl-plus',\n                                           messages=messages)\n    # The response status_code is HTTPStatus.OK indicate success,\n    # otherwise indicate request is failed, you can get error code\n    # and message from code and message.\n    if response.status_code == HTTPStatus.OK:\n        print(response)\n    else:\n        print(response.code)  # The error code.\n        print(response.message)  # The error message.\n\n\nif __name__ == '__main__':\n    conversation_call()\n\n</code></pre></div><input type=\"radio\" name=\"check-5437a02048ux4\" id=\"5437a02048ux4-java-tab\"><label for=\"5437a02048ux4-java-tab\">Java</label><div class=\"codeblock-item\"><pre id=\"5c283fb048f22\" data-tag=\"codeblock\" outputclass=\"language-java\" class=\"pre codeblock language-java\"><code>// Copyright (c) Alibaba, Inc. and its affiliates.\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\nimport com.alibaba.dashscope.aigc.multimodalconversation.MultiModalConversation;\nimport com.alibaba.dashscope.aigc.multimodalconversation.MultiModalConversationParam;\nimport com.alibaba.dashscope.aigc.multimodalconversation.MultiModalConversationResult;\nimport com.alibaba.dashscope.common.MultiModalMessage;\nimport com.alibaba.dashscope.common.Role;\nimport com.alibaba.dashscope.exception.ApiException;\nimport com.alibaba.dashscope.exception.NoApiKeyException;\nimport com.alibaba.dashscope.exception.UploadFileException;\n\npublic class Main {\n    private static final String modelName = \"qwen-vl-plus\";\n    public static void MultiRoundConversationCall() throws ApiException, NoApiKeyException, UploadFileException {\n        MultiModalConversation conv = new MultiModalConversation();\n        MultiModalMessage systemMessage = MultiModalMessage.builder().role(Role.SYSTEM.getValue())\n        .content(Arrays.asList(Collections.singletonMap(\"text\", \"You are a helpful assistant.\"))).build();\n\n        MultiModalMessage userMessage = MultiModalMessage.builder().role(Role.USER.getValue())\n        .content(Arrays.asList(Collections.singletonMap(\"image\", \"https://dashscope.oss-cn-beijing.aliyuncs.com/images/dog_and_girl.jpeg\"), \n        Collections.singletonMap(\"text\", \"图片里有什么动物?\"))).build();\n        List&lt;MultiModalMessage&gt; messages = new ArrayList&lt;&gt;();\n        messages.add(systemMessage);\n        messages.add(userMessage);\n        MultiModalConversationParam param = MultiModalConversationParam.builder()\n                .model(modelName)\n                .messages(messages)\n                .build();\n        MultiModalConversationResult result = conv.call(param);\n        System.out.println(result);\n        // add the result to conversation\n        messages.add(result.getOutput().getChoices().get(0).getMessage());\n        MultiModalMessage msg = MultiModalMessage.builder().role(Role.USER.getValue())\n        .content(Arrays.asList(Collections.singletonMap(\"text\", \"图片动物是什么？\"))).build();\n        messages.add(msg);\n        // new messages\n        param.setMessages((List)messages);\n        result = conv.call(param);\n        System.out.print(result);\n    }\n\n    public static void main(String[] args) {\n        try {\n            MultiRoundConversationCall();\n        } catch (ApiException | NoApiKeyException | UploadFileException e) {\n            System.out.println(e.getMessage());\n        }\n        System.exit(0);\n    }\n}   \n\n</code></pre></div></div><h3 id=\"261f81404839h\"><b>流式输出</b></h3><div outputclass=\"tabbed-codeblock\" data-tag=\"fig\" id=\"a8e366c0cfhqr\" class=\"tabbed-codeblock-box\"><div class=\"tab-box\"></div><input type=\"radio\" name=\"check-a8e366c0cfhqr\" id=\"a8e366c0cfhqr-python-tab\" checked><label for=\"a8e366c0cfhqr-python-tab\">Python</label><div class=\"codeblock-item\"><pre id=\"a8e38dd0cfzwu\" data-tag=\"codeblock\" outputclass=\"language-python\" class=\"pre codeblock language-python\"><code>from dashscope import MultiModalConversation\n\n\ndef simple_multimodal_conversation_call():\n    \"\"\"Simple single round multimodal conversation call.\n    \"\"\"\n    messages = [\n        {\n            \"role\": \"user\",\n            \"content\": [\n                {\"image\": \"https://dashscope.oss-cn-beijing.aliyuncs.com/images/dog_and_girl.jpeg\"},\n                {\"text\": \"这是什么?\"}\n            ]\n        }\n    ]\n    responses = MultiModalConversation.call(model='qwen-vl-plus',\n                                           messages=messages,\n                                           stream=True)\n    for response in responses:\n        print(response)\n\n\nif __name__ == '__main__':\n    simple_multimodal_conversation_call()\n</code></pre></div><input type=\"radio\" name=\"check-a8e366c0cfhqr\" id=\"a8e366c0cfhqr-java-tab\"><label for=\"a8e366c0cfhqr-java-tab\">Java</label><div class=\"codeblock-item\"><pre id=\"0f6987f048v4b\" data-tag=\"codeblock\" outputclass=\"language-java\" class=\"pre codeblock language-java\"><code>// Copyright (c) Alibaba, Inc. and its affiliates.\n\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport com.alibaba.dashscope.aigc.multimodalconversation.MultiModalConversation;\nimport com.alibaba.dashscope.aigc.multimodalconversation.MultiModalConversationParam;\nimport com.alibaba.dashscope.aigc.multimodalconversation.MultiModalConversationResult;\nimport com.alibaba.dashscope.common.MultiModalMessage;\nimport com.alibaba.dashscope.common.Role;\nimport com.alibaba.dashscope.exception.ApiException;\nimport com.alibaba.dashscope.exception.NoApiKeyException;\nimport com.alibaba.dashscope.exception.UploadFileException;\nimport io.reactivex.Flowable;\n\npublic class MultiModalConversationStream {\n    public static void streamCall()\n            throws ApiException, NoApiKeyException, UploadFileException {\n        MultiModalConversation conv = new MultiModalConversation();\n        // must create mutable map.\n        MultiModalMessage userMessage = MultiModalMessage.builder().role(Role.USER.getValue())\n        .content(Arrays.asList(new HashMap&lt;String, Object&gt;(){{put(\"image\", \"https://dashscope.oss-cn-beijing.aliyuncs.com/images/dog_and_girl.jpeg\");}}, \n        new HashMap&lt;String, Object&gt;(){{put(\"text\", \"基于这幅图，讲一个故事\");}})).build();\n        MultiModalConversationParam param = MultiModalConversationParam.builder()\n                .model(MultiModalConversation.Models.QWEN_VL_PLUS)\n                .message(userMessage)\n                .build();\n        Flowable&lt;MultiModalConversationResult&gt; result = conv.streamCall(param);\n        result.blockingForEach(item -&gt; {\n            System.out.println(item);\n        });\n    }\n\n    public static void main(String[] args) {\n        try {\n            streamCall();\n        } catch (ApiException | NoApiKeyException | UploadFileException e) {\n            System.out.println(e.getMessage());\n        }\n        System.exit(0);\n    }\n}</code></pre></div></div></section><section id=\"b9ad0a10cfhpe\" class=\"section\"><h3 id=\"b7stW\"><b>参数配置</b></h3><table id=\"ca3ead70cf055\" tablewidth=\"706\" tablecolswidth=\"152 106 75 371\" autofit=\"false\" class=\"table\"><colgroup colwidth=\"0.86*\" style=\"width:21.53%\"></colgroup><colgroup colwidth=\"0.6*\" style=\"width:15.01%\"></colgroup><colgroup colwidth=\"0.43*\" style=\"width:10.62%\"></colgroup><colgroup colwidth=\"2.11*\" style=\"width:52.55%\"></colgroup><tbody class=\"tbody\"><tr id=\"ca3ead79cfwx2\"><td id=\"cc979190cfra0\" rowspan=\"1\" style=\"background-color:#e5e5e5\" colspan=\"1\"><p id=\"91c543fa49xe6\"><b>参数</b></p></td><td id=\"cc97b8a0cfvr6\" rowspan=\"1\" style=\"background-color:#e5e5e5\" colspan=\"1\"><p id=\"dae05ce15fin3\"><b>类型</b></p></td><td id=\"cc97b8a1cfo4o\" rowspan=\"1\" style=\"background-color:#e5e5e5\" colspan=\"1\"><p id=\"cb563f194dr59\"><b>默认值</b></p></td><td id=\"cc97dfb0cfcvz\" rowspan=\"1\" style=\"background-color:#e5e5e5\" colspan=\"1\"><p id=\"d07e841ec46bl\"><b>说明</b></p></td></tr><tr id=\"ca3ead82cf4nv\" style=\"height:67px\"><td id=\"cc97dfb1cf1pi\" rowspan=\"1\" colspan=\"1\"><p id=\"4f0b7ca83bye2\">model</p></td><td id=\"cc97dfb2cfrgh\" rowspan=\"1\" colspan=\"1\"><p id=\"bbcf350b965uo\"><i>string</i></p></td><td id=\"cc9806c0cf3o2\" rowspan=\"1\" colspan=\"1\"><p id=\"e011dc60a1hpc\">-</p></td><td id=\"cc9806c1cfbb1\" rowspan=\"1\" colspan=\"1\"><p id=\"e2ef6942bbdq6\">指定用于对话的通义千问模型名，qwen-vl-plus<i>。</i></p></td></tr><tr id=\"ca3ed485cf8ok\"><td id=\"cc982dd0cf2zg\" rowspan=\"1\" colspan=\"1\"><p id=\"181289c7echpz\">messages</p></td><td id=\"cc982dd1cf21k\" rowspan=\"1\" colspan=\"1\"><p id=\"831a5f3d881nt\"><i>list[dict]</i></p></td><td id=\"cc982dd2cfcjb\" rowspan=\"1\" colspan=\"1\"><p id=\"6442b5c7efjln\">-</p></td><td id=\"cc9854e0cfhmh\" rowspan=\"1\" colspan=\"1\"><p id=\"8aa7320dc13t5\">用户输入的历史对话信息和指令组成的完整输入信息。</p><p id=\"93ad9800db8y9\">参考示例，目前对于图片，支持图片url和本地路径</p><p id=\"05bce0fa42moc\">本地路径格式：</p><p id=\"75380e5dfbxis\">python下：</p><ul id=\"24ad163279ixu\"><li id=\"24ad163079g7j\"><p id=\"1fd3fb29c7z74\">linux&amp;mac file format: file:///home/images/test.png</p></li><li id=\"29c0fba079p8y\"><p id=\"055832fe56sox\">windows file format: </p></li></ul><p id=\"68392d2069wzt\"> file://D:/images/abc.png</p><p id=\"1cd606c425wt9\">java下：</p><ul id=\"2dee51a279blw\"><li id=\"2dee51a079uul\"><p id=\"f232a578b0tk9\">Windows file format: file:///D:/test/images/test.png</p></li><li id=\"31129c1079t9w\"><p id=\"739a3e2575scd\">Linux &amp; Mac format: file://The_absolute_local_path</p></li></ul><p id=\"fd6e0749d9s08\">⚠️windows下python，java区别</p></td></tr><tr id=\"ca3ed497cfd2s\"><td id=\"cc98a300cf6o4\" rowspan=\"1\" colspan=\"1\"><p id=\"3d021d3b51gb7\">top_p (可选)</p></td><td id=\"cc98a301cfp77\" rowspan=\"1\" colspan=\"1\"><p id=\"0a3af7d8011wn\"><i>float</i></p></td><td id=\"cc98a302cfx35\" rowspan=\"1\" colspan=\"1\"><p id=\"3b2bb68eff471\">0.1</p></td><td id=\"cc98ca10cf195\" rowspan=\"1\" colspan=\"1\"><p id=\"9dba1ce7bab1p\">生成过程中核采样方法概率阈值，例如，取值为0.1时，仅保留概率加起来大于等于0.1的最可能token的最小集合作为候选集。取值范围为(0,1.0)，取值越大，生成的随机性越高；取值越低，生成的确定性越高。</p></td></tr><tr id=\"ca3efb96cfwud\"><td id=\"cc98ca11cf4m6\" rowspan=\"1\" colspan=\"1\"><p id=\"7adb941591azy\">stream(可选)</p></td><td id=\"cc98ca12cfusm\" rowspan=\"1\" colspan=\"1\"><p id=\"f6bb12dfc615z\"><i>bool</i></p></td><td id=\"cc98f120cf2wg\" rowspan=\"1\" colspan=\"1\"><p id=\"dc2efcbd8brnx\">False</p></td><td id=\"cc991830cf0g7\" rowspan=\"1\" colspan=\"1\"><p id=\"f16c1ea75a0by\">是否使用流式输出。当以stream模式输出结果时，接口返回结果为generator，需要通过迭代获取结果，每个输出为当前生成的整个序列，最后一次输出为最终全部生成结果。</p></td></tr><tr id=\"328a9c50103qj\"><td id=\"328a9c5110ci4\" rowspan=\"1\" colspan=\"1\"><p id=\"358be705b5bqh\">top_k</p></td><td id=\"328a9c5310ye9\" rowspan=\"1\" colspan=\"1\"><p id=\"84bb546c61jv0\"><i>float</i></p></td><td id=\"328a9c55102ew\" rowspan=\"1\" colspan=\"1\"><p id=\"e521f23e5ar2x\">100.0</p></td><td id=\"328ac360108na\" rowspan=\"1\" colspan=\"1\"><p id=\"7b83024232k2u\">生成时，采样候选集的大小。例如，取值为50时，仅将单次生成中得分最高的50个token组成随机采样的候选集。取值越大，生成的随机性越高；取值越小，生成的确定性越高。注意：如果top_k的值大于100，top_k将采用默认值100</p></td></tr><tr id=\"547ca4c010zug\"><td id=\"547ca4c1109vi\" rowspan=\"1\" colspan=\"1\"><p id=\"a193790bc2o0r\">seed</p></td><td id=\"547ca4c3109ia\" rowspan=\"1\" colspan=\"1\"><p id=\"a7e010034ep03\"><i>int</i></p></td><td id=\"547ca4c510ka1\" rowspan=\"1\" colspan=\"1\"><p id=\"08172cec01u79\">1234</p></td><td id=\"547ca4c710m75\" rowspan=\"1\" colspan=\"1\"><p id=\"5e016bfd856rn\">生成时，随机数的种子，用于控制模型生成的随机性。如果使用相同的种子，每次运行生成的结果都将相同；当需要复现模型的生成结果时，可以使用相同的种子。seed参数支持无符号64位整数类型。默认值 1234</p></td></tr><tr id=\"e67d8fe3c9nun\"><td id=\"256502d276uzn\" rowspan=\"1\" colspan=\"1\"><p id=\"7a540f9f3ff64\">incremental_output</p></td><td id=\"02ad245c63ytm\" rowspan=\"1\" colspan=\"1\"><p id=\"15ecb7b84csk2\"><i>bool</i></p></td><td id=\"2aff3d704fy2k\" rowspan=\"1\" colspan=\"1\"><p id=\"e099432f09ofn\">False</p></td><td id=\"7ee5ce7c82ncm\" rowspan=\"1\" colspan=\"1\"><p id=\"833bcb8778ayd\">是否使用增量输出。当使用增量输出时每次流式返回的序列仅包含最新生成的增量内容，默认输出完整的全量内容</p></td></tr></tbody></table></section><section id=\"dcea7e40cf8ve\" class=\"section\"><h3 id=\"QGPBR\" data-lake-id=\"QGPBR\"><b>返回结果\n</b></h3><ul id=\"6eaf84b2d5hdm\"><li id=\"6eaf84b0d5xlz\"><p id=\"bfd8401b0200g\">返回结果示例\n</p></li></ul><div outputclass=\"tabbed-codeblock\" data-tag=\"fig\" id=\"eddbf4e0cf563\" class=\"tabbed-codeblock-box\"><div class=\"tab-box\"></div><input type=\"radio\" name=\"check-eddbf4e0cf563\" id=\"eddbf4e0cf563-json-tab\" checked><label for=\"eddbf4e0cf563-json-tab\">JSON</label><div class=\"codeblock-item\"><pre id=\"eddbf4e1cfkt1\" data-tag=\"codeblock\" outputclass=\"language-json\" class=\"pre codeblock language-json\"><code>{\n    \"status_code\": 200,\n    \"request_id\": \"afbf4016-8704-965d-b98a-53ea46a06742\",\n    \"code\": \"\",\n    \"message\": \"\",\n    \"output\": {\n        \"text\": null,\n        \"finish_reason\": null,\n        \"choices\": [\n            {\n                \"finish_reason\": null,\n                \"message\": {\n                    \"role\": \"assistant\",\n                    \"content\": [\n                        {\n                            \"text\": \"这是一个关于友情的故事。在这个故事中，有一只可爱的小狗，它非常喜欢和人类玩耍。一天，它和一个喜欢它的女孩一起去了海滩。他们在沙滩上玩得很开心，互相追逐，玩耍，甚至互相握手。在他们的快乐时光中，女孩给小狗一个饼干，小狗非常高兴地接受了。夕阳西下，他们坐在沙滩上，享受着这美好的时光，直到天黑。这个故事告诉我们，友情不分物种，只要我们用心去交流和理解，就能找到共同的乐趣。\"\n                        }\n                    ]\n                }\n            }\n        ]\n    },\n    \"usage\": {\n        \"input_tokens\": 1282,\n        \"output_tokens\": 107\n    }\n}</code></pre></div></div><ul id=\"7218ee72d5v20\"><li id=\"7218ee70d5opl\"><p id=\"0acb13229efrg\">返回参数说明</p></li></ul><table id=\"0284ce30cffvq\" tablewidth=\"706\" tablecolswidth=\"127 129 227 227\" autofit=\"false\" class=\"table\"><colgroup colwidth=\"0.72*\" style=\"width:17.99%\"></colgroup><colgroup colwidth=\"0.73*\" style=\"width:18.27%\"></colgroup><colgroup colwidth=\"1.29*\" style=\"width:32.15%\"></colgroup><colgroup colwidth=\"1.29*\" style=\"width:32.15%\"></colgroup><tbody class=\"tbody\"><tr id=\"0284ce37cf064\"><td id=\"044b0f40cf18c\" rowspan=\"1\" style=\"background-color:#e5e5e5\" colspan=\"1\"><p id=\"a3574b2cf46xr\"><b>返回参数</b></p></td><td id=\"044b3650cfd20\" rowspan=\"1\" style=\"background-color:#e5e5e5\" colspan=\"1\"><p id=\"6d05807a7azlz\"><b>类型</b></p></td><td id=\"044b3651cfsg3\" rowspan=\"1\" style=\"background-color:#e5e5e5\" colspan=\"1\"><p id=\"487127446bwlf\"><b>说明</b></p></td><td id=\"dec8f040432v2\" rowspan=\"1\" colspan=\"1\"><p id=\"ec2d39532dj58\"></p></td></tr><tr id=\"4cd1d0c0de100\"><td id=\"4cd1f7d1de56g\" rowspan=\"1\" colspan=\"1\"><p id=\"92304e4547vbn\">status_code</p></td><td id=\"4cd1f7d3deh4l\" rowspan=\"1\" colspan=\"1\"><p id=\"3e39fee690lfo\"><i>int</i></p></td><td id=\"4cd1f7d5de3jr\" rowspan=\"1\" colspan=\"1\"><p id=\"274f78f75fmjp\">200（HTTPStatus.OK）表示请求成功，否则表示请求失败，可以通过code获取错误码，通过message字段获取错误详细信息。</p></td><td id=\"dec8f04243rdq\" rowspan=\"1\" colspan=\"1\"><p id=\"ea1d5fa3e0yyi\"></p></td></tr><tr id=\"4af28970depvj\" style=\"height:42px\"><td id=\"4af28972dec6g\" rowspan=\"1\" colspan=\"1\"><p id=\"4c7955f2deha3\">request_Id</p></td><td id=\"4af28974defm4\" rowspan=\"1\" colspan=\"1\"><p id=\"3b179119acuzq\"><i>string</i></p></td><td id=\"4af28976de8gb\" rowspan=\"1\" colspan=\"1\"><p id=\"9756597cee84n\">系统生成的标志本次调用的id。</p></td><td id=\"dec8f0444320r\" rowspan=\"1\" colspan=\"1\"><p id=\"82a32b9e9d55k\"></p></td></tr><tr id=\"904f57a0dekad\"><td id=\"904f7eb1de3z3\" rowspan=\"1\" colspan=\"1\"><p id=\"4824c89932mou\">code</p></td><td id=\"904f7eb3dew2b\" rowspan=\"1\" colspan=\"1\"><p id=\"d91da04e69lo4\"><i>string</i></p></td><td id=\"904f7eb5dev93\" rowspan=\"1\" colspan=\"1\"><p id=\"e89f59ad7679d\">表示请求失败，表示错误码，成功忽略。</p></td><td id=\"dec8f04643g3z\" rowspan=\"1\" colspan=\"1\"><p id=\"8c5d1a9e94jcq\"></p></td></tr><tr id=\"d072b700dekk6\"><td id=\"d072b702de8i0\" rowspan=\"1\" colspan=\"1\"><p id=\"c5ebe89b36lrz\">output</p></td><td id=\"d072b704dej9j\" rowspan=\"1\" colspan=\"1\"><p id=\"b1c91f804389l\"><i>dict</i></p></td><td id=\"d072de10dei2h\" rowspan=\"1\" colspan=\"1\"><p id=\"7677cfde110yv\">调用结果信息，对于通义VL模型，包含输出message。</p></td><td id=\"dec8f048437m3\" rowspan=\"1\" colspan=\"1\"><p id=\"b03f2ac376jqo\"></p></td></tr><tr id=\"ddc3dc5043dh8\"><td id=\"dec5bbf2431aq\" rowspan=\"1\" colspan=\"1\"><p jc=\"left\" uuid=\"lglmzbuc7aazs25dgdc\" id=\"2da19bffcdeg1\" style=\"text-align:left\">output.choices</p></td><td id=\"dec5bbf443gfg\" rowspan=\"1\" colspan=\"1\"><p jc=\"left\" uuid=\"lglmzbudjlodpiitmff\" id=\"558a8948f0cjs\" style=\"text-align:left\"><i>List</i></p></td><td id=\"dec5bbf643g53\" rowspan=\"1\" colspan=\"1\"><p jc=\"left\" uuid=\"llq6to9w8fd3oppbxbh\" id=\"74277faf44qap\" style=\"text-align:left\">模型为输入生成的完成选项列表。</p></td><td id=\"dec5bbf8438st\" rowspan=\"3\" colspan=\"1\"><p id=\"00d6f01841iqy\">\"choices\": [</p><p id=\"ddce9d58101f5\"> {</p><p id=\"b56f3aec04k6v\"> \"finish_reason\": null,</p><p id=\"552c04c3cbjpv\"> \"message\": {</p><p id=\"910a73be158dd\"> \"role\": \"assistant\",</p><p id=\"cd62ea57ebypg\"> \"content\": [</p><p id=\"525ef63a4f2se\"> {</p><p id=\"85b28b3cb7nci\"> \"text\": \"这是一个\"</p><p id=\"d263b43f08peu\"> }</p><p id=\"3232feec7acy1\"> ]</p><p id=\"27b5881852wvt\"> }</p><p id=\"0b5384b7bdjxa\"> }</p><p id=\"2a552cbb5fcdj\"> ]</p></td></tr><tr id=\"dd4dc1f043nlo\"><td id=\"dec5bc0143xrr\" rowspan=\"1\" colspan=\"1\"><p id=\"ce54ec27aapc1\">output.choices[x].message.role</p></td><td id=\"dec5bc0343qc9\" rowspan=\"1\" colspan=\"1\"><p jc=\"left\" id=\"70a679c94fv19\" style=\"text-align:left\"><i>String</i></p></td><td id=\"dec5bc05437fd\" rowspan=\"1\" colspan=\"1\"><p id=\"c68ee8f8d0hn3\">信息来源。</p></td></tr><tr id=\"bf0c3e6043udt\"><td id=\"dec5e30143dzf\" rowspan=\"1\" colspan=\"1\"><p jc=\"center\" uuid=\"llq7cbr11dkv2qwnfb6\" id=\"11d65f7819ed5\" style=\"text-align:center\">output.choices[x].message.content</p></td><td id=\"dec5e30343l04\" rowspan=\"1\" colspan=\"1\"><p jc=\"left\" uuid=\"llq7cbr2n1lavqbxxpe\" id=\"9cc23e82f2ec5\" style=\"text-align:left\"><i>List</i></p></td><td id=\"dec5e3054346j\" rowspan=\"1\" colspan=\"1\"><p id=\"becf838585uhd\" uuid=\"llq7cbr2wk2257n9e1\">本次请求的算法输出内容,输出可能包含多种模态内容，因此，是一个list，元素为dict，key为内容类型，value为内容值。</p></td></tr><tr id=\"d2c95130demn3\"><td id=\"d2c97841desmj\" rowspan=\"1\" colspan=\"1\"><p id=\"15479db7634lk\">usage</p></td><td id=\"d2c97843dev8n\" rowspan=\"1\" colspan=\"1\"><p id=\"7c02bb6bb2hm2\"><i>dict</i></p></td><td id=\"d2c97845deb28\" rowspan=\"1\" colspan=\"1\"><p id=\"16c08b8380a0j\">计量信息，表示本次请求计量数据。</p></td><td id=\"dec8f05043zqr\" rowspan=\"1\" colspan=\"1\"><p id=\"eed3c6dccfq6n\"></p></td></tr><tr id=\"02851c51cf8qp\"><td id=\"044bab80cfwlv\" rowspan=\"1\" colspan=\"1\"><p id=\"b7cf33cc0d1wa\">usage.input_tokens</p></td><td id=\"044bab81cf9iu\" rowspan=\"1\" colspan=\"1\"><p id=\"da9f32550f0i6\"><i>int</i></p></td><td id=\"044bab82cfsgz\" rowspan=\"1\" colspan=\"1\"><p id=\"112c8eb985wr5\">用户输入文本转换成Token后的长度。</p></td><td id=\"dec917504393z\" rowspan=\"1\" colspan=\"1\"><p id=\"f3cdde5ddd76u\"></p></td></tr><tr id=\"02851c58cfn96\"><td id=\"044bd290cf0i5\" rowspan=\"1\" colspan=\"1\"><p id=\"986a25b098g26\">usage.output_tokens</p></td><td id=\"044bd291cfmau\" rowspan=\"1\" colspan=\"1\"><p id=\"e8c9136dab5fe\"><i>int</i></p></td><td id=\"044bd292cfs9q\" rowspan=\"1\" colspan=\"1\"><p id=\"aea3191bcefoy\">模型生成回复转换为Token后的长度。</p></td><td id=\"dec9175243gz0\" rowspan=\"1\" colspan=\"1\"><p id=\"6a5c93f6841r0\"></p></td></tr></tbody></table><p id=\"0b9735e0088f3\"></p><p id=\"010b9d1d7e485\"></p><section id=\"341800c0f8w0r\" class=\"section\"><h2 id=\"341800c1f8h93\"><b>HTTP调用接口</b></h2><h3 uuid=\"lflx8jzu18ae9191ppg\" id=\"8f79b5d0f8ker\"><b>功能描述</b></h3><p uuid=\"lflx9q1vg2v5dl5kwli\" id=\"9011df9022tvz\">通义VL模型同时支持 HTTP 调用来完成客户的响应，目前提供普通 HTTP 和 HTTP SSE 两种协议，您可根据自己的需求自行选择。</p><p uuid=\"li12t2o9le69zbsp5ga\" id=\"f83950babd065\"></p><h3 id=\"48063821f9diz\"><b>前提条件</b></h3><ul class=\"ne-ul\" id=\"48063822f95rh\"><li id=\"48063823f9ah2\"><p id=\"13cc8970f35x5\">已开通服务并获得API-KEY：<a title=\"\" class=\"xref\" href=\"/zh/dashscope/developer-reference/activate-dashscope-and-create-an-api-key\">开通DashScope并创建API-KEY</a>。</p></li></ul><p uuid=\"li12t30tn64sw3zeh1d\" id=\"59b41692518d6\"></p><h3 uuid=\"li3z9tk2vs873wcjgr\" id=\"cd5c7c20fb74b\"><b>提交接口调用</b></h3><p id=\"01a817a02diyv\">POST https://dashscope.aliyuncs.com/api/v1/services/aigc/multimodal-generation/generation</p><p uuid=\"lflx9q1vg2v5dl5kwli\" id=\"f19a6876f45q7\"></p><h3 id=\"25745d61fbx49\"><b>入参描述</b></h3><table id=\"0faebb200cdlr\" tablewidth=\"669\" tablecolswidth=\"84 154 65 51 260 201\" autofit=\"false\" class=\"table\"><colgroup colwidth=\"0.76*\" style=\"width:12.56%\"></colgroup><colgroup colwidth=\"1.39*\" style=\"width:23.02%\"></colgroup><colgroup colwidth=\"0.59*\" style=\"width:9.72%\"></colgroup><colgroup colwidth=\"0.46*\" style=\"width:7.62%\"></colgroup><colgroup colwidth=\"2.34*\" style=\"width:38.86%\"></colgroup><colgroup colwidth=\"1.81*\" style=\"width:30.04%\"></colgroup><tbody class=\"tbody\"><tr id=\"0faebb210cgtf\"><td id=\"0faebb220cdu6\" rowspan=\"1\" style=\"background-color:#e5e5e5\" colspan=\"1\"><p jc=\"center\" uuid=\"lfm6jnuvq65j5mjh0nc\" id=\"8ef5154ca46ia\" style=\"text-align:center\"><b>传参方式</b></p></td><td id=\"0faebb240c3kf\" rowspan=\"1\" style=\"background-color:#e5e5e5\" colspan=\"1\"><p jc=\"center\" uuid=\"lfc9fse715p1kl4c7vm\" id=\"c1b58d7bbejhp\" style=\"text-align:center\"><b>字段</b></p></td><td id=\"0faebb260c6i5\" rowspan=\"1\" style=\"background-color:#e5e5e5\" colspan=\"1\"><p jc=\"center\" uuid=\"lfc9fse7dupdgrgz8t\" id=\"8411b6cd5dswp\" style=\"text-align:center\"><b>类型</b></p></td><td id=\"0faebb280cp6b\" rowspan=\"1\" style=\"background-color:#e5e5e5\" colspan=\"1\"><p jc=\"center\" uuid=\"lfm5yl2n4n4kqpq19p3\" id=\"4beef34bc3aay\" style=\"text-align:center\"><b>必选</b></p></td><td id=\"0faee2300ccxp\" rowspan=\"1\" style=\"background-color:#e5e5e5\" colspan=\"1\"><p jc=\"center\" uuid=\"lfc9fse7ftu9alxvkki\" id=\"fa47e95d8abs3\" style=\"text-align:center\"><b>描述</b></p></td><td id=\"0faee2320cl92\" rowspan=\"1\" style=\"background-color:#e5e5e5\" colspan=\"1\"><p jc=\"center\" uuid=\"lfc9fse7at0kxn3bj85\" id=\"9630fb1c8cskg\" style=\"text-align:center\"><b>示例值</b></p></td></tr><tr id=\"0faee2680cu64\"><td id=\"0faee2690cwae\" rowspan=\"3\" colspan=\"1\"><p jc=\"center\" uuid=\"lfm8u8rsocxke17ewz\" id=\"419d466eacgru\" style=\"text-align:center\">Header</p></td><td id=\"0faee26b0c5uv\" rowspan=\"1\" colspan=\"1\"><p jc=\"left\" uuid=\"lfm8u8rsvx94zcf01wg\" id=\"e847ed7e26kf2\" style=\"text-align:left\">Content-Type</p></td><td id=\"0faee26d0ckw1\" rowspan=\"1\" colspan=\"1\"><p jc=\"center\" uuid=\"lfm8u8rsypd2v9wd0l\" id=\"6b3bbe1e07c1t\" style=\"text-align:center\"><i>String</i></p></td><td id=\"0faee26f0cf7y\" rowspan=\"1\" colspan=\"1\"><p jc=\"center\" uuid=\"lfm8u8rsqp5finb847\" id=\"949454def6ygj\" style=\"text-align:center\">是</p></td><td id=\"0faee2710cpsz\" rowspan=\"1\" colspan=\"1\"><p uuid=\"lfm8u8rsiiibf6hhdvp\" id=\"3e981181f0gga\">请求类型：application/json 或者text/event-stream（开启 SSE 响应）</p></td><td id=\"0faee2730cdqk\" rowspan=\"1\" colspan=\"1\"><p uuid=\"lfm8u8rsxmt8tokctn\" id=\"b153a06606d9r\">application/json</p></td></tr><tr id=\"0faee2750cr3b\"><td id=\"0faee2780cani\" rowspan=\"1\" colspan=\"1\"><p jc=\"left\" uuid=\"lfm6kn5t7zb0wzw764\" id=\"10c54c02fbuk4\" style=\"text-align:left\">Authorization</p></td><td id=\"0faf09400ck30\" rowspan=\"1\" colspan=\"1\"><p jc=\"center\" uuid=\"lfm6kn5t0onnyzck9sua\" id=\"38de7632b1t10\" style=\"text-align:center\"><i>String</i></p></td><td id=\"0faf09420cy60\" rowspan=\"1\" colspan=\"1\"><p jc=\"center\" uuid=\"lfm6kn5tq49fzjo4eh\" id=\"9bce189fa6zfd\" style=\"text-align:center\">是</p></td><td id=\"0faf09440cvlm\" rowspan=\"1\" colspan=\"1\"><p uuid=\"lfm6kn5tcr1xvtkfl8\" id=\"b252d09614p96\">API-Key，例如：Bearer d1**2a</p></td><td id=\"0faf09460cnz8\" rowspan=\"1\" colspan=\"1\"><p uuid=\"lfm6kn5t8h93yg1gaum\" id=\"93790ccfbdnr5\">Bearer d1**2a</p></td></tr><tr id=\"0faf09480ctaj\"><td id=\"0faf094b0ckl9\" rowspan=\"1\" colspan=\"1\"><p jc=\"left\" uuid=\"lglmq0vat5k19zky6i\" id=\"c56d8c74a3u95\" style=\"text-align:left\">X-DashScope-SSE</p></td><td id=\"0faf094d0c5yd\" rowspan=\"1\" colspan=\"1\"><p jc=\"center\" uuid=\"lglmq0valxmzj7yr2qo\" id=\"30a82006cdild\" style=\"text-align:center\"><i>String</i></p></td><td id=\"0faf094f0c1nj\" rowspan=\"1\" colspan=\"1\"><p jc=\"center\" uuid=\"lglmqe25zns7ujb6s2\" id=\"f0f17fa251s8e\" style=\"text-align:center\">否</p></td><td id=\"0faf09510c70x\" rowspan=\"1\" colspan=\"1\"><p uuid=\"lglmqe25i4i0i8nedp\" id=\"5948f025c5cm2\">跟Accept: text/event-stream 二选一即可启用SSE响应</p></td><td id=\"0faf09530c370\" rowspan=\"1\" colspan=\"1\"><p uuid=\"lglmqe2502rpb57nwku6\" id=\"5362a2701avas\">enable</p></td></tr><tr id=\"0faf09620cxsj\"><td id=\"0faf09630c4te\" rowspan=\"10\" colspan=\"1\"><p jc=\"center\" uuid=\"lfm6jnuwr6kk44kprtl\" id=\"ecc618cc7enf7\" style=\"text-align:center\">Body</p></td><td id=\"0faf09650cj1v\" rowspan=\"1\" colspan=\"1\"><p jc=\"left\" uuid=\"lfm6htfombcyu7tdz6g\" id=\"a48f9c1b1f9gt\" style=\"text-align:left\">model</p></td><td id=\"0faf09670czvk\" rowspan=\"1\" colspan=\"1\"><p jc=\"center\" uuid=\"lfm6htfo0t9jdwto924\" id=\"f88aa6ceaapzv\" style=\"text-align:center\"><i>String</i></p></td><td id=\"0faf09690cwz4\" rowspan=\"1\" colspan=\"1\"><p jc=\"center\" uuid=\"lfm6htfolhea5jjl4x\" id=\"2f31c72625bap\" style=\"text-align:center\">是</p></td><td id=\"0faf096b0ceov\" rowspan=\"1\" colspan=\"1\"><p uuid=\"lfm6htfo53zoelms5df\" id=\"a35673a758kp0\">指明需要调用的模型</p></td><td id=\"0faf096d0c6kg\" rowspan=\"1\" colspan=\"1\"><p id=\"ab2e3fc4b13zq\">qwen-vl-plus</p></td></tr><tr id=\"0faf096f0chr5\" style=\"height:92px\"><td id=\"8e544b8043yw2\" rowspan=\"1\" colspan=\"1\"><p jc=\"center\" uuid=\"llq215m8t3pfsq1u0go\" id=\"5cd09d7349vp9\" style=\"text-align:center\">input.messages[list]</p></td><td id=\"8e5499a143e2j\" rowspan=\"1\" colspan=\"1\"><p jc=\"center\" uuid=\"llq215m8fqw007qen9w\" id=\"c39260cba3fcf\" style=\"text-align:center\"><i>Array</i></p></td><td id=\"8e550ed143i8u\" rowspan=\"1\" colspan=\"1\"><p jc=\"center\" uuid=\"lfm6htfolhea5jjl4x\" id=\"fb5eeea1d7wx8\" style=\"text-align:center\">是</p></td><td id=\"baad71c14323c\" rowspan=\"1\" colspan=\"1\"><p uuid=\"llq215m89tm14bwbm4s\" id=\"a3a4119e09k3p\">多模态场景下的输入信息</p></td><td id=\"0faf097a0c6fd\" rowspan=\"5\" colspan=\"1\"><p id=\"a3ba57d98ftka\">\"messages\":[</p><p uuid=\"llq229mqbu3l2az1tv4\" id=\"79ba5431c65uv\">{</p><p uuid=\"llq229mrwak6mxoh9zk\" id=\"5eae1fc075x61\"> \"role\": \"user\",</p><p uuid=\"llq229mr8sz2fwluuh8\" id=\"2d189f1763tx4\"> \"content\": [</p><p uuid=\"llq229ms3q6epuddf33\" id=\"8f6821eed8sma\"> {\"image\": \"<a class=\"\" href=\"http://XXXX\">http://XXXX</a>\"},</p><p uuid=\"llq229msfv0he3vnb1f\" id=\"beb1de49f8taa\"> {\"text\": \"这个图片是哪里？\"}</p><p uuid=\"llq229muivmhixb62l\" id=\"5b77a5d15dixh\"> ]</p><p uuid=\"llq8tzl9eay860gn2no\" id=\"64aaf407745h9\">}]</p></td></tr><tr id=\"7becd6b043toh\"><td id=\"8e555cf143tag\" rowspan=\"1\" colspan=\"1\"><p jc=\"center\" uuid=\"llq24ywquzh28rappl\" id=\"0b1e17b3cclp2\" style=\"text-align:center\">input.message[x].role</p></td><td id=\"8e55ab1143fpb\" rowspan=\"1\" colspan=\"1\"><p jc=\"center\" uuid=\"llq24ywqdh9y02as4d4\" id=\"16facb3f97d8j\" style=\"text-align:center\"><i>String</i></p></td><td id=\"8e56204043rj4\" rowspan=\"1\" colspan=\"1\"><p jc=\"center\" uuid=\"lfm6htfolhea5jjl4x\" id=\"c9e20dc8aarhw\" style=\"text-align:center\">是</p></td><td id=\"baade6f043kth\" rowspan=\"1\" colspan=\"1\"><p uuid=\"llq24ywqzigs66tgthr\" id=\"38b5084ff81o7\">信息来源</p></td></tr><tr id=\"815b5f4043ic4\"><td id=\"8e577fd1432wm\" rowspan=\"1\" colspan=\"1\"><p jc=\"center\" uuid=\"ljm8ibl9lj3i6ez5emr\" id=\"ac49fa4430ow0\" style=\"text-align:center\">input.message[x].content[list]</p></td><td id=\"8e57cdf14378k\" rowspan=\"1\" colspan=\"1\"><p jc=\"center\" uuid=\"ljm8ibl92gx2yi90lll\" id=\"8e55edea42bak\" style=\"text-align:center\"><i>Array</i></p></td><td id=\"8e581c1143vke\" rowspan=\"1\" colspan=\"1\"><p jc=\"center\" uuid=\"lfm6htfolhea5jjl4x\" id=\"e241e27f950mj\" style=\"text-align:center\">是</p></td><td id=\"baae833043cci\" rowspan=\"1\" colspan=\"1\"><p uuid=\"ljm8ibl9e6i0q1k93vr\" id=\"a3ac482d46apa\">contents 列表中包含本次输入的内容列表，每一个列表可以分别是图像（image）或者文本（text）</p></td></tr><tr id=\"8287aa4043h95\"><td id=\"8e58b85143m0s\" rowspan=\"1\" colspan=\"1\"><p jc=\"center\" uuid=\"ljm8ibl8oc5jj5ddxfh\" id=\"1d658a6289pdn\" style=\"text-align:center\">input.message[x].contents[list].image</p></td><td id=\"8e59067143pg7\" rowspan=\"1\" colspan=\"1\"><p jc=\"center\" uuid=\"ljm8ibl8vwqkm5mpq4\" id=\"20b518c575apw\" style=\"text-align:center\"><i>String</i></p></td><td id=\"8e597ba043qf8\" rowspan=\"2\" colspan=\"1\"><p jc=\"center\" uuid=\"lfm6htfolhea5jjl4x\" id=\"e6895b741dgpx\" style=\"text-align:center\">至少包含一项</p></td><td id=\"baaed15143efw\" rowspan=\"1\" colspan=\"1\"><p uuid=\"ljm8ibl8rkqj7hmm51\" id=\"af4d650c40jb5\">本次输入的图像内容的 url 链接；图像格式目前支持：bmp, jpg, jpeg, png 和 tiff。</p></td></tr><tr id=\"83d7f800436b9\"><td id=\"8e59c9c043r5i\" rowspan=\"1\" colspan=\"1\"><p jc=\"center\" uuid=\"ll1n3zfbimz5yncnxy\" id=\"04442f5691rzr\" style=\"text-align:center\">input.message[x].contents[list].text</p></td><td id=\"8e5a660043lw7\" rowspan=\"1\" colspan=\"1\"><p jc=\"center\" uuid=\"ll1n3zfdszu2otjeudm\" id=\"d83723c562pu8\" style=\"text-align:center\"><i>String</i></p></td><td id=\"baaf1f7143p3c\" rowspan=\"1\" colspan=\"1\"><p uuid=\"ll1n3zfme3t2ivmoqul\" id=\"91a0d597d1hnc\">本次输入的文本内容；支持 utf-8 编码的中文、英文输入。</p></td></tr><tr id=\"0faf097c0ccpw\"><td id=\"0faf097f0cmvq\" rowspan=\"1\" colspan=\"1\"><p jc=\"left\" uuid=\"li13bnun0tv5g4qpd2d\" id=\"b1086f9eabzwy\" style=\"text-align:left\">parameters.top_p</p></td><td id=\"0faf09810c3l1\" rowspan=\"1\" colspan=\"1\"><p jc=\"center\" uuid=\"li13bnunddu1ersrwg8\" id=\"68be2e1176j2a\" style=\"text-align:center\"><i>Float</i></p></td><td id=\"0faf30500c6c7\" rowspan=\"1\" colspan=\"1\"><p jc=\"center\" uuid=\"li13bnunmyzv6wsiazs\" id=\"1c65a2587fzi3\" style=\"text-align:center\">否</p></td><td id=\"0faf30520c8rf\" rowspan=\"1\" colspan=\"1\"><p id=\"e991ff599fu6f\">生成时，核采样方法的概率阈值。例如，取值为0.8时，仅保留累计概率之和大于等于0.8的概率分布中的token，作为随机采样的候选集。取值范围为(0,1.0)，取值越大，生成的随机性越高；取值越低，生成的随机性越低。默认值 0.8。注意，取值不要大于等于1</p></td><td id=\"0faf30540c1p3\" rowspan=\"1\" colspan=\"1\"><p uuid=\"li13bnuno5hwmlzw3vb\" id=\"84abcba85fcbz\">0.8</p></td></tr><tr id=\"becc98700cmpg\"><td id=\"becc98740cj3z\" rowspan=\"1\" colspan=\"1\"><p id=\"198ad034b0ncb\">parameters.top_k</p></td><td id=\"becc98760c0t4\" rowspan=\"1\" colspan=\"1\"><p jc=\"center\" id=\"a7a07234020y8\" style=\"text-align:center\"><i>Integer</i></p></td><td id=\"beccbf810cvp4\" rowspan=\"1\" colspan=\"1\"><p jc=\"center\" id=\"f3a4750f1fklt\" style=\"text-align:center\">否</p></td><td id=\"beccbf830c1gs\" rowspan=\"1\" colspan=\"1\"><p id=\"e53e0a6bffmho\">生成时，采样候选集的大小。例如，取值为50时，仅将单次生成中得分最高的50个token组成随机采样的候选集。取值越大，生成的随机性越高；取值越小，生成的确定性越高。注意：如果top_k的值大于100，top_k将采用默认值100</p></td><td id=\"beccbf850c7ag\" rowspan=\"1\" colspan=\"1\"><p id=\"5d8b58e790v1y\">50</p></td></tr><tr id=\"c077fe800cfpx\"><td id=\"c07825930cl37\" rowspan=\"1\" colspan=\"1\"><p id=\"527d9ed386ujk\">parameters.seed</p></td><td id=\"c07825950cng0\" rowspan=\"1\" colspan=\"1\"><p jc=\"center\" id=\"d8cb41914b1sy\" style=\"text-align:center\"><i>Integer</i></p></td><td id=\"c07825970c1oj\" rowspan=\"1\" colspan=\"1\"><p jc=\"center\" id=\"58e315c6f15fd\" style=\"text-align:center\">否</p></td><td id=\"c07825990cqdo\" rowspan=\"1\" colspan=\"1\"><p id=\"b13807570824y\">生成时，随机数的种子，用于控制模型生成的随机性。如果使用相同的种子，每次运行生成的结果都将相同；当需要复现模型的生成结果时，可以使用相同的种子。seed参数支持无符号64位整数类型。默认值 1234</p></td><td id=\"c078259b0c2c6\" rowspan=\"1\" colspan=\"1\"><p id=\"2516969415rbf\">65535</p></td></tr><tr id=\"270d9c11f69n5\"><td id=\"d9cc5f270afi7\" rowspan=\"1\" colspan=\"1\"><p id=\"21049ead1du34\">parameters.incremental_output</p></td><td id=\"45c866cb22zc7\" rowspan=\"1\" colspan=\"1\"><p jc=\"center\" id=\"268f5e7a5ciwl\" style=\"text-align:center\"><i>Bool</i></p></td><td id=\"32448ecaa4cqz\" rowspan=\"1\" colspan=\"1\"><p jc=\"center\" id=\"a6b880011dnah\" style=\"text-align:center\">否</p></td><td id=\"74480cbf45e7k\" rowspan=\"1\" colspan=\"1\"><p id=\"e0201823c18g5\">是否使用增量输出。当使用增量输出时每次流式返回的序列仅包含最新生成的增量内容，默认值为false，即输出完整的全量内容</p></td><td id=\"26865ae988mmu\" rowspan=\"1\" colspan=\"1\"><p id=\"6c0b7fb5f2g2k\"></p></td></tr></tbody></table><p id=\"b49c3b27fbqbq\"></p><h3 id=\"58595f510c3zl\"><b>出参描述</b></h3><table id=\"58595f520cttk\" tablewidth=\"674\" tablecolswidth=\"164 72 205 231\" autofit=\"false\" class=\"table\"><colgroup colwidth=\"0.98*\" style=\"width:24.33%\"></colgroup><colgroup colwidth=\"0.43*\" style=\"width:10.68%\"></colgroup><colgroup colwidth=\"1.22*\" style=\"width:30.42%\"></colgroup><colgroup colwidth=\"1.38*\" style=\"width:34.27%\"></colgroup><tbody class=\"tbody\"><tr id=\"58595f530c04c\"><td id=\"58595f540cyrs\" rowspan=\"1\" style=\"background-color:#e5e5e5\" colspan=\"1\"><p jc=\"center\" uuid=\"lfm651p6q9tlfx2102e\" id=\"d8c241d226c70\" style=\"text-align:center\"><b>字段</b></p></td><td id=\"58595f560calt\" rowspan=\"1\" style=\"background-color:#e5e5e5\" colspan=\"1\"><p jc=\"center\" uuid=\"lfm651p6xb64mv3xbf\" id=\"cba7abbff3fmj\" style=\"text-align:center\"><b>类型</b></p></td><td id=\"58595f580ca49\" rowspan=\"1\" style=\"background-color:#e5e5e5\" colspan=\"1\"><p jc=\"center\" uuid=\"lfm651p6qfhy59y0zli\" id=\"dd0ce267926yo\" style=\"text-align:center\"><b>描述</b></p></td><td id=\"58595f5a0ca2i\" rowspan=\"1\" style=\"background-color:#e5e5e5\" colspan=\"1\"><p jc=\"center\" uuid=\"lfm651p6eu498yzo2te\" id=\"4f6885dadf0cq\" style=\"text-align:center\"><b>示例值</b></p></td></tr><tr id=\"58595f5c0c3yv\" style=\"height:67px\"><td id=\"58595f5d0crrq\" rowspan=\"1\" colspan=\"1\"><p jc=\"left\" uuid=\"lglmzbuc7aazs25dgdc\" id=\"b86e382cefooe\" style=\"text-align:left\">output.choices[list]</p></td><td id=\"58595f5f0c64h\" rowspan=\"1\" colspan=\"1\"><p jc=\"center\" uuid=\"lglmzbudjlodpiitmff\" id=\"88f18cc085448\" style=\"text-align:center\"><i>Array</i></p></td><td id=\"58595f610c30y\" rowspan=\"1\" colspan=\"1\"><p jc=\"left\" uuid=\"llq6to9w8fd3oppbxbh\" id=\"a2674050d6rt8\" style=\"text-align:left\">模型为输入生成的完成选项列表。</p></td><td id=\"585986610c35e\" rowspan=\"3\" colspan=\"1\"><p uuid=\"lglmzbugqzr6ll4mh99\" id=\"800196ac4fege\">\"choices\": [</p><p id=\"206be37581iwl\"> {</p><p id=\"d1a19c6511ihy\"> \"finish_reason\": null,</p><p id=\"3fd15c2ec2uun\"> \"message\": {</p><p id=\"ce5a4c28ddc5q\"> \"role\": \"assistant\",</p><p id=\"42decec3bb447\"> \"content\": [</p><p id=\"40bf7ffb3dpqr\"> {</p><p id=\"f6f3ffb210y9x\"> \"text\": \"这是一个\"</p><p id=\"69eb9e57dfyh6\"> }</p><p id=\"16e833d44e8is\"> ]</p><p id=\"53d28a6a231uc\"> }</p><p id=\"aa76b92659vsa\"> }</p><p id=\"c403879ebc2ae\"> ]</p></td></tr><tr id=\"7b991bf0431n4\"><td id=\"7b991bf1437ar\" rowspan=\"1\" colspan=\"1\"><p id=\"dc219f70fc6zt\">output.choices[x].message.role</p></td><td id=\"7b991bf343nvi\" rowspan=\"1\" colspan=\"1\"><p jc=\"center\" id=\"d092b64abbv4k\" style=\"text-align:center\"><i>String</i></p></td><td id=\"7b991bf543rv0\" rowspan=\"1\" colspan=\"1\"><p id=\"817de6550csp1\">信息来源。</p></td></tr><tr id=\"d81f05b043dph\"><td id=\"dc94131043ohg\" rowspan=\"1\" colspan=\"1\"><p jc=\"center\" uuid=\"llq7cbr11dkv2qwnfb6\" id=\"fabecd5fe0vbj\" style=\"text-align:center\">output.choices[x].message.content</p></td><td id=\"dc946130432le\" rowspan=\"1\" colspan=\"1\"><p jc=\"center\" uuid=\"llq7cbr2n1lavqbxxpe\" id=\"21e1c6deb4hsj\" style=\"text-align:center\"><i>Array</i></p></td><td id=\"dc948841436v3\" rowspan=\"1\" colspan=\"1\"><p id=\"e2e75466cesrd\" uuid=\"llq7cbr2wk2257n9e1\">本次请求的算法输出内容，为list，内容为多个dict，key为内容类型，value为内容值</p></td></tr><tr id=\"585986630cgn0\"><td id=\"585986640cjyi\" rowspan=\"1\" colspan=\"1\"><p jc=\"left\" id=\"7935d5ea27fcj\" style=\"text-align:left\">output.finish_reason</p></td><td id=\"585986660co21\" rowspan=\"1\" colspan=\"1\"><p jc=\"center\" id=\"3602bc8bf4wy9\" style=\"text-align:center\"><i>String</i></p></td><td id=\"585986680c1v6\" rowspan=\"1\" colspan=\"1\"><p uuid=\"liy650858hvq8498h2n\" id=\"73bbdd1c50hcg\">有三种情况：正在生成时为null，生成结束时如果由于停止token导致则为stop，生成结束时如果因为生成长度过长导致则为length。</p></td><td id=\"5859866a0c61m\" rowspan=\"1\" colspan=\"1\"><p id=\"484b2087f3bk3\">stop</p></td></tr><tr id=\"5859866c0cotx\"><td id=\"5859866d0c0zi\" rowspan=\"1\" colspan=\"1\"><p jc=\"left\" uuid=\"lglmzbuhlrjcvzcqhur\" id=\"8cc0522d9eqda\" style=\"text-align:left\">usage.output_tokens</p></td><td id=\"5859866f0ci79\" rowspan=\"1\" colspan=\"1\"><p jc=\"center\" uuid=\"lglmzbuizz1cyq2z9io\" id=\"cf116d3951ji9\" style=\"text-align:center\"><i>Integer</i></p></td><td id=\"585986710c20h\" rowspan=\"1\" colspan=\"1\"><p uuid=\"lglmzbujsu8sd1gk4f\" id=\"4f35656f4ai32\">本次请求算法输出内容的 token 数目。</p></td><td id=\"585986730cuyt\" rowspan=\"1\" colspan=\"1\"><p uuid=\"lglmzbukr2wemmlrr7\" id=\"d6afc90aa77i3\">380</p></td></tr><tr id=\"585986750c3go\"><td id=\"585986760cyn4\" rowspan=\"1\" colspan=\"1\"><p jc=\"left\" uuid=\"lgln0khuei4u5k9m4di\" id=\"d173c94b53c63\" style=\"text-align:left\">usage.input_tokens</p></td><td id=\"585986780cb68\" rowspan=\"1\" colspan=\"1\"><p jc=\"center\" uuid=\"lgln0khujmmy00hve07\" id=\"3aed88d1822fa\" style=\"text-align:center\"><i>Integer</i></p></td><td id=\"5859867a0cpi5\" rowspan=\"1\" colspan=\"1\"><p uuid=\"lgln0khu1mfzghh0guy\" id=\"e25809965auo9\">本次请求输入内容的 token 数目。在打开了搜索的情况下，输入的 token 数目因为还需要添加搜索相关内容支持，所以会超出客户在请求中的输入。 </p></td><td id=\"5859867c0cu8l\" rowspan=\"1\" colspan=\"1\"><p uuid=\"lgln0khukvkg02jwf5\" id=\"32632f3fc3tdl\">633</p></td></tr><tr id=\"5859867e0ci0y\"><td id=\"5859867f0ctb5\" rowspan=\"1\" colspan=\"1\"><p jc=\"left\" uuid=\"lfm651p63jrrji9cng9\" id=\"1e94983b48llh\" style=\"text-align:left\">request_id</p></td><td id=\"585986810cd5i\" rowspan=\"1\" colspan=\"1\"><p jc=\"center\" uuid=\"lfm651p6nlsy6ltx7er\" id=\"dc1b6f6f74pc0\" style=\"text-align:center\"><i>String</i></p></td><td id=\"585986830ckcp\" rowspan=\"1\" colspan=\"1\"><p uuid=\"lfm651p6729eo31ltt9\" id=\"4473b81d5dm1f\">本次请求的系统唯一码</p></td><td id=\"585986850cw9y\" rowspan=\"1\" colspan=\"1\"><p uuid=\"lfm651p696sv077qik\" id=\"8f1f79d5efkj0\">7574ee8f-38a3-4b1e-9280-11c33ab46e51</p></td></tr></tbody></table><p id=\"e9cd00b5d5xz7\"></p><h3 id=\"060dfa900ch9h\"><b>请求示例</b>（SSE 关闭）</h3><p id=\"e0324da98eueu\">以下示例展示通过CURL命令来调用通义千问-VL模型的脚本（SSE 关闭）。</p><div type=\"note\" id=\"858d8002fbklf\" class=\"note note-note\"><div class=\"note-icon-wrapper\"><i class=\"icon-note note note\"></i></div><div class=\"noteContentSpan\"><strong>说明 </strong><p id=\"22c9ea6eadl2q\">需要使用您的API-KEY替换示例中的<i> your-dashscope-api-key </i>，代码才能正常运行。</p></div></div><p id=\"31d1a8b596pou\"></p><div outputclass=\"tabbed-codeblock\" data-tag=\"fig\" id=\"25745d62fb67t\" class=\"tabbed-codeblock-box\"><div class=\"tab-box\"></div><input type=\"radio\" name=\"check-25745d62fb67t\" id=\"25745d62fb67t-shell-tab\" checked><label for=\"25745d62fb67t-shell-tab\">Shell</label><div class=\"codeblock-item\"><pre id=\"25745d63fb5bz\" data-tag=\"codeblock\" outputclass=\"language-shell\" class=\"pre codeblock language-shell\"><code>curl --location 'https://dashscope.aliyuncs.com/api/v1/services/aigc/multimodal-generation/generation' \\\n--header 'Authorization: Bearer YOUR_DASHSCOPE_ACCESS_TOKEN' \\\n--header 'Content-Type: application/json' \\\n--data '{\n    \"model\": \"qwen-vl-plus\",\n    \"input\":{\n        \"messages\":[\n            {\n                \"role\": \"system\",\n                \"content\": [\n                    {\"text\": \"You are a helpful assistant.\"}\n                ]\n            },\n            {\n                \"role\": \"user\",\n                \"content\": [\n                    {\"image\": \"https://dashscope.oss-cn-beijing.aliyuncs.com/images/dog_and_girl.jpeg\"},\n                    {\"text\": \"这个图片是哪里？\"}\n                ]\n            }\n        ]\n    },\n    \"parameters\": {\n    }\n}'</code></pre></div></div><h3 id=\"d647dd20fb5t4\">响应示例（SSE关闭）</h3><div outputclass=\"tabbed-codeblock\" data-tag=\"fig\" id=\"c5d07880fbxig\" class=\"tabbed-codeblock-box\"><div class=\"tab-box\"></div><input type=\"radio\" name=\"check-c5d07880fbxig\" id=\"c5d07880fbxig-json-tab\" checked><label for=\"c5d07880fbxig-json-tab\">JSON</label><div class=\"codeblock-item\"><pre id=\"c5d0c6a0fbf9b\" data-tag=\"codeblock\" outputclass=\"language-json\" class=\"pre codeblock language-json\"><code>{\n    \"output\": {\n        \"choices\": [\n            {\n                \"finish_reason\": \"stop\",\n                \"message\": {\n                    \"role\": \"assistant\",\n                    \"content\": [\n                        {\n                            \"text\": \"这个图片是拍摄于一个海滩，可以看到远处的海浪和日落的天空。\"\n                        }\n                    ]\n                }\n            }\n        ]\n    },\n    \"usage\": {\n        \"output_tokens\": 19,\n        \"input_tokens\": 1279,\n        \"image_tokens\": 680\n    },\n    \"request_id\": \"b042e72d-7994-97dd-b3d2-7ee7e0140525\"\n}</code></pre></div></div><p id=\"3332a1cc37sa7\"></p><h3 id=\"90ebe270f8rte\"><b>请求示例（</b>SSE开启<b>）</b></h3><p id=\"0aba54a493kt6\">以下示例展示通过CURL命令来调用通义千问-VL模型的脚本（SSE 开启）。</p><div type=\"note\" id=\"19f7c932fbxae\" class=\"note note-note\"><div class=\"note-icon-wrapper\"><i class=\"icon-note note note\"></i></div><div class=\"noteContentSpan\"><strong>说明 </strong><p id=\"01abf3ede8d9m\">需要使用您的API-KEY替换示例中的<i> your-dashscope-api-key </i>，代码才能正常运行。</p></div></div><p id=\"536cb3b8e5muw\"></p><div outputclass=\"tabbed-codeblock\" data-tag=\"fig\" id=\"c2610470f8al9\" class=\"tabbed-codeblock-box\"><div class=\"tab-box\"></div><input type=\"radio\" name=\"check-c2610470f8al9\" id=\"c2610470f8al9-shell-tab\" checked><label for=\"c2610470f8al9-shell-tab\">Shell</label><div class=\"codeblock-item\"><pre id=\"c2612b80f8p60\" data-tag=\"codeblock\" outputclass=\"language-shell\" class=\"pre codeblock language-shell\"><code>curl --location 'https://dashscope.aliyuncs.com/api/v1/services/aigc/multimodal-generation/generation' \\\n--header 'Authorization: Bearer YOUR_DASHSCOPE_ACCESS_TOKEN' \\\n--header 'Content-Type: application/json' \\\n--header 'X-DashScope-SSE: enable' \\\n--data '{\n    \"model\": \"qwen-vl-plus\",\n    \"input\":{\n        \"messages\":[\n            {\n                \"role\": \"system\",\n                \"content\": [\n                    {\"text\": \"You are a helpful assistant.\"}\n                ]\n            },\n            {\n                \"role\": \"user\",\n                \"content\": [\n                    {\"image\": \"https://dashscope.oss-cn-beijing.aliyuncs.com/images/dog_and_girl.jpeg\"},\n                    {\"text\": \"这个图片是哪里？\"}\n                ]\n            }\n        ]\n    },\n    \"parameters\": {\n    }\n}'</code></pre></div></div><h3 id=\"0a73f1f0f8mvr\"><b>响应示例（</b>SSE开启<b>）</b></h3><div outputclass=\"tabbed-codeblock\" data-tag=\"fig\" id=\"14a336e0f8c3p\" class=\"tabbed-codeblock-box\"><div class=\"tab-box\"></div><input type=\"radio\" name=\"check-14a336e0f8c3p\" id=\"14a336e0f8c3p-json-tab\" checked><label for=\"14a336e0f8c3p-json-tab\">JSON</label><div class=\"codeblock-item\"><pre id=\"14a35df0f87br\" outputclass=\"language-json\" data-tag=\"codeblock\" height=\"335\" class=\"pre codeblock language-json\"><code>id:1\nevent:result\ndata:{\"output\":{\"choices\":[{\"finish_reason\":\"null\",\"message\":{\"role\":\"assistant\",\"content\":\"这个\"}}]},\"usage\":{\"output_tokens\":3,\"input_tokens\":85, \"image_tokens\": 32},\"request_id\":\"1117fb64-5dd9-9df0-a5ca-d7ee0e97032d\"}\n\nid:2\nevent:result\ndata:{\"output\":{\"choices\":[{\"finish_reason\":\"null\",\"message\":{\"role\":\"assistant\",\"content\":\"这个图片描述\"}}]},\"usage\":{\"output_tokens\":12,\"input_tokens\":85, \"image_tokens\": 32},\"request_id\":\"1117fb64-5dd9-9df0-a5ca-d7ee0e97032d\"}\n\n... ... ... ...\n... ... ... ...\n\nid:8\nevent:result\ndata:{\"output\":{\"choices\":[{\"finish_reason\":\"stop\",\"message\":{\"role\":\"assistant\",\"content\":\"这个图片描述的是一个公园里的 ... ... \"}}]},\"usage\":{\"output_tokens\":51,\"input_tokens\":85, \"image_tokens\": 32},\"request_id\":\"1117fb64-5dd9-9df0-a5ca-d7ee0e97032d\"}</code></pre></div></div><p uuid=\"lfm9tgziscik1t4xfuo\" id=\"b264977c279bf\"></p><h3 uuid=\"liy8x94gfg065cxiecm\" id=\"0ea417000ckjs\"><b>异常响应示例</b></h3><p uuid=\"lgln3pbihbfwumu9trv\" id=\"32a13ef2200ms\">在访问请求出错的情况下，输出的结果中会通过 code 和 message 指明出错原因。</p><pre id=\"0e429f70f8tm1\" uuid=\"lfm9tgzjkvr03ehypoo\" data-tag=\"codeblock\" outputclass=\"language-json\" class=\"pre codeblock language-json\"><code>{\n    \"code\":\"InvalidApiKey\",\n    \"message\":\"Invalid API-key provided.\",\n    \"request_id\":\"fb53c4ec-1c12-4fc4-a580-cdb7c3261fc1\"\n}</code></pre></section><p id=\"9bda471ebfcs9\"></p><h2 id=\"762d6540d5ep1\"><b>状态码说明</b></h2><p id=\"8d36810727iwo\">DashScope灵积模型服务通用状态码请查阅：<a title=\"\" class=\"xref\" href=\"/zh/dashscope/response-status-codes\">返回状态码说明</a></p></section></div></main>\n\n</div>","path":"/zh/dashscope/developer-reference/tongyi-qianwen-vl-plus-api","productNodeVO":{"level":3,"hiddenMoreVideo":false,"docTitle":"模型服务灵积","id":610100,"title":"模型服务灵积","url":"/zh/dashscope/"},"alias":"/dashscope/developer-reference/tongyi-qianwen-vl-plus-api","showType":1,"taskStatus":"NO_TASK_AVAILABLE","website":"cn","level":8,"author":{},"nodeType":1,"version":13,"url":"/zh/dashscope/developer-reference/tongyi-qianwen-vl-plus-api","tags":[{"value":"0","key":"accept","desc":"未承接"},{"value":false,"key":"autoTranslation","desc":"非自动翻译"},{"value":2637937,"key":"nodeId","desc":"文档ID"}],"userVO":{},"recommendDocs":[],"directoryPath":{"children":[{"children":[{"children":[{"children":[{"children":[{"children":[null],"level":8,"hiddenMoreVideo":false,"docTitle":"API详情","id":2637937,"title":"API详情","url":"/zh/dashscope/developer-reference/tongyi-qianwen-vl-plus-api"}],"level":7,"hiddenMoreVideo":false,"docTitle":"通义千问VL","id":2637868,"title":"通义千问VL","url":"/zh/dashscope/developer-reference/qwen-vl-plus/"}],"level":6,"hiddenMoreVideo":false,"docTitle":"通义千问","id":2399479,"title":"通义千问","url":"/zh/dashscope/developer-reference/tongyi-thousand-questions/"}],"level":5,"hiddenMoreVideo":false,"docTitle":"模型列表","id":2400395,"title":"模型列表","url":"/zh/dashscope/developer-reference/model-square/"}],"level":4,"hiddenMoreVideo":false,"docTitle":"开发参考","id":2399476,"title":"开发参考","url":"/zh/dashscope/developer-reference/"}],"level":3,"hiddenMoreVideo":false,"docTitle":"模型服务灵积","id":610100,"title":"模型服务灵积","url":"/zh/dashscope/"},"productUrl":"https://dashscope.aliyun.com","nodeId":2637937,"desc":"通义千问VL说明支持的领域 / 任务：aigc通义千问开源视觉理解大模型Qwen-VL于2023年12月1日发布重大更新，不仅大幅提升通用OCR、视觉推理、中文文本理解基础能力，还能处理各种分辨率和规格的图像，甚至能“看图做题”。升级的Qwen-VL(qwen-vl-plus/qwen-vl-max..."},"breadcrumb":[{"level":3,"hiddenMoreVideo":false,"docTitle":"模型服务灵积","id":610100,"title":"模型服务灵积","url":"/zh/dashscope/"},{"level":4,"hiddenMoreVideo":false,"docTitle":"开发参考","id":2399476,"title":"开发参考","url":"/zh/dashscope/developer-reference/"},{"level":5,"hiddenMoreVideo":false,"docTitle":"模型列表","id":2400395,"title":"模型列表","url":"/zh/dashscope/developer-reference/model-square/"},{"level":6,"hiddenMoreVideo":false,"docTitle":"通义千问","id":2399479,"title":"通义千问","url":"/zh/dashscope/developer-reference/tongyi-thousand-questions/"},{"level":7,"hiddenMoreVideo":false,"docTitle":"通义千问VL","id":2637868,"title":"通义千问VL","url":"/zh/dashscope/developer-reference/qwen-vl-plus/"},{"level":8,"hiddenMoreVideo":false,"docTitle":"API详情","id":2637937,"title":"API详情","url":"/zh/dashscope/developer-reference/tongyi-qianwen-vl-plus-api"}],"isMachineTranslation":false,"showNoteTip":false,"isNotFound":false,"helpResponseCode":200,"redirectUrl":"","helpDocVersion":1}}};
  </script><title data-react-helmet="true"></title><link href="https://g.alicdn.com/code/npm/@ali??hmod-ace-2023-box/0.1.0/index.css,hmod-ace-2023-service-contact-us/0.0.22/index.css,hmod-aliyun-com-global-nav-search/0.5.0/index.css,hmod-aliyun-com-global-nav/0.1.7/index.css" rel="stylesheet"/>
<link href="https://g.alicdn.com/hmod/ace-homepage-2020-hmod-footer/0.1.1/index.css" rel="stylesheet"/>
</head>

<body><script>
with(document)with(body)with(insertBefore(createElement("script"),firstChild))setAttribute("exparams","category=&userid=&aplus&yunid=&&trid=213e385217104912245858383e4ce3&asid=AQAAAABYBvRlM7xfMgAAAABxCmLCWE+SEA==",id="tb-beacon-aplus",src=(location>"https"?"//g":"//g")+".alicdn.com/alilog/mlog/aplus_v2.js")
</script>

  <header><div id="e0974bcf049837efca77d4a1359f333a"><div class="_18a32969382a277c44015217fbc5cb5a_box"><div class="aliyun-com-global-nav" style="height:64px"><div class="global-nav-container"><div class="global-nav-container-top"><div class="aliyun-topbar-element aliyun-logo header-container-left"><a href="https://www.aliyun.com/" class="aliyun-logo-link"><img class="aliyun-logo-image light" src="https://img.alicdn.com/tfs/TB13DzOjXP7gK0jSZFjXXc5aXXa-212-48.png" loading="lazy"/></a></div><div class="aliyun-topbar-element aliyun-diff-intro"><div class="common-menu-wrap"><div class="common-menu"><div class="common-menu-inner"><div class="scroll-left-arrow"><i class="navIconfont icon-topnavbutton_left"></i></div><div class="scroll-right-arrow"><i class="navIconfont icon-topnavbutton_right"></i></div><div class="common-menu-scroll-bar"><div class="common-menu-scroll-bar-inner"><div class="common-menu-scroll-bar-mask"></div><a class="global-menu-item" href="https://www.aliyun.com/product/list" target="_self"><span>产品</span><i class="navIconfont icon-topnavput_away"></i></a><a class="global-menu-item" href="javascript://;" target="_self"><span>解决方案</span><i class="navIconfont icon-topnavput_away"></i></a><a class="global-menu-item" href="https://help.aliyun.com/" target="_self"><span>文档与社区</span><i class="navIconfont icon-topnavput_away"></i></a><a class="global-menu-item" href="https://www.aliyun.com/benefit" target="_self"><span>权益中心</span><i class="navIconfont icon-topnavput_away"></i></a><a class="global-menu-item" href="https://www.aliyun.com/price" target="_self"><span>定价</span><i class="navIconfont icon-topnavput_away"></i></a><a class="global-menu-item" href="https://market.aliyun.com/" target="_self"><span>云市场</span><i class="navIconfont icon-topnavput_away"></i></a><a class="global-menu-item" href="https://partner.aliyun.com/management/v2" target="_self"><span>合作伙伴</span><i class="navIconfont icon-topnavput_away"></i></a><a class="global-menu-item" href="https://www.aliyun.com/service" target="_self"><span>支持与服务</span><i class="navIconfont icon-topnavput_away"></i></a><a class="global-menu-item" href="https://www.aliyun.com/about" target="_self"><span>了解阿里云</span><i class="navIconfont icon-topnavput_away"></i></a></div></div></div></div><div class="common-topbar-dropdown"></div></div></div><div class="global-search-wrap"><div class="global-nav-search _66bc24b94bf0678bb3103f231b3d247b_global-nav-search"><div class="global-search-container _66bc24b94bf0678bb3103f231b3d247b_global-nav-search-desktop-container"><div><div class="_06bed5e757025c8db358bb8a68c60d86_global-nav-search-desktop-container"><div class="_06bed5e757025c8db358bb8a68c60d86_search-input-container"><input type="text" class="_06bed5e757025c8db358bb8a68c60d86_search-input" value="" placeholder="搜索产品文档" data-placeholder="搜索产品文档" data-placeholder-scm="" data-tracker-container="topbar_search_input_focus"/><div class="_06bed5e757025c8db358bb8a68c60d86_search-button-group-container"><div class="_06bed5e757025c8db358bb8a68c60d86_search-button-group"><button class="_06bed5e757025c8db358bb8a68c60d86_search-button "><i class="navIconfont icon-topnavsearch1" data-tracker-container="topbar_search_button_click"></i></button></div></div></div></div></div></div><div class="_66bc24b94bf0678bb3103f231b3d247b_global-nav-search-mobile-container"><a class="_66bc24b94bf0678bb3103f231b3d247b_search-button" href="https://help.aliyun.com/search"><i class="
              _66bc24b94bf0678bb3103f231b3d247b_search-button-icon
              navIconfont icon-topnavsearch1
            "></i></a></div></div></div></div><div class="aliyun-topbar-element aliyun-topbar-element-right"><div class="ability-element aliyun-language "><div class="aliyun-language-pointer"><div class="aliyun-language-text"><i class="navIconfont icon-topnavintl"></i></div></div></div><div class="ability-element contact-us"><div class="contact-us-pointer"><span class="contact-us-text"><i class="ee52067fb65534cb06d3b35f654f5441_icon _874cedcaa5b5b7a3ff8b80bbd0700262-contact _2789ab52395bed4398d01ab9961c2e4c_icon"></i></span></div><div class="contact-us-dropdown header-container-clearfix "><div class="contact-us-label">联系我们</div><div class="_2789ab52395bed4398d01ab9961c2e4c_item"><i class="ee52067fb65534cb06d3b35f654f5441_icon _874cedcaa5b5b7a3ff8b80bbd0700262-phone _2789ab52395bed4398d01ab9961c2e4c_icon"></i>4008013260</div><button class="_2789ab52395bed4398d01ab9961c2e4c_item _2789ab52395bed4398d01ab9961c2e4c_action" data-action="pre-sales-consultation"><i class="ee52067fb65534cb06d3b35f654f5441_icon _874cedcaa5b5b7a3ff8b80bbd0700262-screen_check _2789ab52395bed4398d01ab9961c2e4c_icon"></i>售前咨询</button><a class="_2789ab52395bed4398d01ab9961c2e4c_item _2789ab52395bed4398d01ab9961c2e4c_action" href="https://smartservice.console.aliyun.com/service/robot-chat" rel="nofollow"><i class="ee52067fb65534cb06d3b35f654f5441_icon _874cedcaa5b5b7a3ff8b80bbd0700262-contact _2789ab52395bed4398d01ab9961c2e4c_icon"></i>售后服务</a><div class="line"></div><div class="contact-us-label">其他服务</div><a class="_2789ab52395bed4398d01ab9961c2e4c_item _2789ab52395bed4398d01ab9961c2e4c_action" href="https://www.aliyun.com/connect/home"><i class="ee52067fb65534cb06d3b35f654f5441_icon _874cedcaa5b5b7a3ff8b80bbd0700262-comment_lines _2789ab52395bed4398d01ab9961c2e4c_icon"></i>我要建议</a><a class="_2789ab52395bed4398d01ab9961c2e4c_item _2789ab52395bed4398d01ab9961c2e4c_action" href="https://www.aliyun.com/complaint"><i class="ee52067fb65534cb06d3b35f654f5441_icon _874cedcaa5b5b7a3ff8b80bbd0700262-order _2789ab52395bed4398d01ab9961c2e4c_icon"></i>我要投诉</a></div></div><a class="ability-element _48579645c52d76fbc0285ef9d3bfe4e6_btn" href="https://www.aliyun.com/ai-assistant" data-spm="dai_assistant" target="_blank"><svg xmlns="http://www.w3.org/2000/svg" fill="none" version="1.1" width="20" height="20" viewBox="0 0 20 20"><defs><clipPath id="master_svg0_669_42695"><rect x="0" y="0" width="20" height="20" rx="0"></rect></clipPath><linearGradient x1="0.8993133306503296" y1="-0.04394836351275444" x2="0.24075928330421448" y2="0.9298340082168579" id="master_svg1_818_49695"><stop offset="0.6084760185331106%" stop-color="#FF768D" stop-opacity="1"></stop><stop offset="67.67439842224121%" stop-color="#2D6AE2" stop-opacity="1"></stop><stop offset="99.99993443489075%" stop-color="#78ABF5" stop-opacity="1"></stop></linearGradient><linearGradient x1="1.0586426258087158" y1="-0.14411315321922302" x2="0.23897095024585724" y2="1" id="master_svg1_818_49674"><stop offset="0%" stop-color="#FF92A5" stop-opacity="1"></stop><stop offset="65.04706740379333%" stop-color="#1E5CBF" stop-opacity="1"></stop><stop offset="94.56638693809509%" stop-color="#3479E8" stop-opacity="1"></stop></linearGradient></defs><g clip-path="url(#master_svg0_669_42695)"><g><ellipse cx="10" cy="10" rx="10" ry="10"></ellipse></g><g><path d="M2.562939,8.79672L2,9.67106L2.498614,10.68384Q6.43568,10.64845,8.404209999999999,10.63077Q7.87699,11.45156,6.82261,13.0931L7.29349,14.1148L8.36982,14.1148Q9.45928,12.42212,10.00398,11.57582Q10.92542,13.5172,12.7683,17.4L13.8277,17.4L14.3792,16.5484L11.59079,10.59611L14.9485,10.566939999999999Q15.3162,10.00327,15.5,9.721440000000001Q15.3382,9.379660000000001,15.0147,8.69608L11.86061,8.73569L14.8984,4.00212L14.4135,3L13.3691,3L10.26666,7.77933L8.75,4.59439L7.70514,4.59439L7.14402,5.45869L8.69809,8.76079L2.562939,8.79672Z" fill-rule="evenodd"></path></g></g></svg></a><a class="ability-element" target="_blank" href="https://beian.aliyun.com/">备案</a><a class="ability-element console-link" target="_blank" href="https://home.console.aliyun.com/" rel="nofollow">控制台</a><div class="_0ccf5df0248f94aac5630380cd14d8bb_user-container"><a class="_0ccf5df0248f94aac5630380cd14d8bb_header-compatible _0ccf5df0248f94aac5630380cd14d8bb_loading" href="https://account.aliyun.com/login/login.htm?oauth_callback=https%3A%2F%2Fwww.aliyun.com%2F" rel="nofollow" data-tracker-content="头部导航头像"><img src="https://img.alicdn.com/imgextra/i4/O1CN01zJMPkf1vvDtzGGQKW_!!6000000006234-2-tps-144-144.png" data-tracker-content="头部导航头像" loading="lazy"/></a></div></div></div></div><div class="aliyun-com-mobile-global-nav"></div><div class="_18a32969382a277c44015217fbc5cb5a_box"></div></div></div></header>

  <div id="app"><div class="MainLayout--mainContainer--T7VyS0L" id="docs-container"><div class="MainLayout--helpBodyHead--WaAdRhj"><div class="HelpBodyHead--helpBodyHeadBox--HYlv4D7 help-body-head"><div class="HelpBodyHead--helpBodyHead--P3Pk2U4 help-body-head-content"><div class="HelpBodyHead--helpHeadDocName--gntFssw">文档</div><div class="TabList--tabListContainer--B9nztnf"><a href="/" class="TabList--highlight--Ievl5Tn">产品文档</a></div><div class="HelpBodyHead--bodyHeadRight--vGcxD7X"><div class="HelpBodyHead--helpBodyBoxHeaderSearch--zU8Pkno"><div class="TopSearch--helpTopSearch--mfaux4L help-search"><div class="TopSearch--helpTopSearchBtn--p4xi3nv help-search-btn"><span>输入文档关键字查找</span><i class="TopSearch--searchIcon--wjY7t7t iconfont icon-sousuoicon"></i></div></div></div></div></div></div></div><div class="PcLayout--docsContainer--DmnyXRs"><div class="PcLayout--mobileHelpBodyHead--q5cfaco"><div class="HelpBodyHead--mobileHeadBlank--CVMGJNc"></div></div><div class="PcLayout--aliyunAppLayout--w3f1Oh2"><nav class="aliyun-docs-menu" id="aliyun-docs-menu"><div class="Menu--helpMenuBox--rvBkNtL" style="width:300px"><div class="Menu--helpMenuInnerBox--ug8hNia aliyun-docs-toc-content" style="width:300px"><div class="Menu--helpMenuDrag--W0G51Pn help-menu-drag-box"></div><div class="Menu--helpMenu--NtCAOFi"><div class="Menu--helpMenuTop--sW3oCtd"><div class="help-menu-title">
<a class="menu-title-text" href="/zh/dashscope/">模型服务灵积</a>
</div><span class="Menu--iconBox--aiGPySP"><i class="iconfont icon-mulushu-shouqiicon Menu--iconFold--OWcQCnw"></i></span></div><div class="help-menu-subproduct"></div><div class="Menu--collapseActionBar--f9j8Q4E"><div class="Menu--searchContainer--NC31EEX"><div class="Menu--searchInputWrapper--x4RQI32"><i class="iconfont icon-sousuoicon"></i><input placeholder="在目录中筛选" class="Menu--searchInput--NYAFgq5"></div></div></div><div class="Menu--menuContent--yZh5e8Y"><ul id="common-menu-container">
 <li id="610105" class="Menu--level1--UN3zYr3">
<a href="/zh/dashscope/product-overview/">
<i class="iconfont icon-close-arrow"></i>
<span class="Menu--menuItemText--a6B4ZGH">产品概述</span>
</a>
</li>
 <li id="2638019" class="Menu--level1--UN3zYr3">
<a href="/zh/dashscope/create-a-chat-foundation-model">
<i class="iconfont icon-close-arrow"></i>
<span class="Menu--menuItemText--a6B4ZGH">快速入门</span>
</a>
</li>
 <li id="2399476" class="Menu--level1--UN3zYr3">
<a href="/zh/dashscope/developer-reference/">
<i class="iconfont icon-close-arrow"></i>
<span class="Menu--menuItemText--a6B4ZGH">开发参考</span>
</a>
</li>
 <li id="2667784" class="Menu--level1--UN3zYr3">
<a href="/zh/dashscope/practice-tutorial-1/">
<i class="iconfont icon-close-arrow"></i>
<span class="Menu--menuItemText--a6B4ZGH">实践教程</span>
</a>
</li>
 <li id="2399502" class="Menu--level1--UN3zYr3">
<a href="/zh/dashscope/support/">
<i class="iconfont icon-close-arrow"></i>
<span class="Menu--menuItemText--a6B4ZGH">服务支持</span>
</a>
</li>
</ul></div></div></div><div class="Menu--productList--SsQU8sf" style="display:none"><div class="ProductList--allProducts--I2b_N5F"><div class="ProductList--allProductsHead--sLUKWsd"><div class="ProductList--allProductsSearchWrapper--_0Dg8_K"><div class="ProductList--allProductsSearch--Jq36has"><span class="ProductList--searchIcon--mmkaz7y"><i class="iconfont icon-sousuoicon"></i></span><input placeholder="输入文档关键字查找"></div></div></div><div class="ProductList--allProductsBody--EP7JHIp"></div></div></div></div></nav><main class="aliyun-docs-view" id="aliyun-docs-view"><div class="ProductDetail--contentWrapper--iCunrBZ"><section class="aliyun-docs-content" style="height:auto"><header class="aliyun-docs-view-header"><div class="Header--topBar--LXfTLL5"><div class="BreadCrumb--breadcrumb--cbt4qaF"><div class="BreadCrumb--breadcrumb--cbt4qaF">
<a href="/">首页</a>
 <span class="BreadCrumb--arrow--FD7AzzB">
<i class="iconfont icon-right-arrow"></i>
</span>
 <a href="/zh/dashscope/">模型服务灵积</a>
 <span class="BreadCrumb--arrow--FD7AzzB">
<i class="iconfont icon-right-arrow"></i>
</span>
 <a href="/zh/dashscope/developer-reference/">开发参考</a>
 <span class="BreadCrumb--arrow--FD7AzzB">
<i class="iconfont icon-right-arrow"></i>
</span>
 <a href="/zh/dashscope/developer-reference/model-square/">模型列表</a>
 <span class="BreadCrumb--arrow--FD7AzzB">
<i class="iconfont icon-right-arrow"></i>
</span>
 <a href="/zh/dashscope/developer-reference/tongyi-thousand-questions/">通义千问</a>
 <span class="BreadCrumb--arrow--FD7AzzB">
<i class="iconfont icon-right-arrow"></i>
</span>
 <a href="/zh/dashscope/developer-reference/qwen-vl-plus/">通义千问VL</a>
 <span class="BreadCrumb--arrow--FD7AzzB">
<i class="iconfont icon-right-arrow"></i>
</span>
 <span>API详情</span>
</div></div></div><div class="Header--title--iTk2tUo"><h1>API详情</h1><div class="Header--actionBar--dvzFYrk"><div class="Header--left--x8TGxDL"><span class="Header--updateTime--YXGPhcZ">更新时间：</span></div><div class="Header--right--l4TSW1E"><div class="Header--linkButton--LpCRs1O"><div class="DeployButton--container--JZ2vkuB help-doc-deploy-button"><div class="DeployButton--deployButton--zK4cJXh" title="快速开通云服务并创建应用，一键部署到您的生产环境。">一键部署<i class="iconfont icon-right-arrow"></i></div></div><div class="OuterUrl--outUrl--ZFzJIhk"><a href="https://dashscope.aliyun.com" target="_blank" rel="noreferrer">产品详情</a></div></div><div class="Contact--contactButton--TBwTX5R"><div class="ShareButton--container--Nm3v0Ym"><span class="ShareButton--shareBtn--vr97Vp8" title="分享本文档" data-tooltip-content="#helper-sharelist"><i class="iconfont icon-fenxiang"></i></span></div><span class="Contact--favoritesBtn--J8mRVBp" title="收藏本文档" data-spm-click="gostr=/aliyun;locaid=collect"><i class="iconfont icon-like"></i></span><a href="/my_favorites.html">我的收藏</a></div></div></div></div></header><div class="pc-markdown-container unionContainer" id="pc-markdown-container"><div class="markdown-body"><div lang="zh" class="icms-help-docs-content">
<main id="main-2552254"><p data-tag="shortdesc" id="4d30812818uek" class="shortdesc"></p><div data-tag="body" class="body"><section id="28f6fd00cfp2q" class="section"><h2 id="29788910cfg6w">通义千问VL</h2><div type="note" id="3067e540cf9mp" class="note note-note"><div class="note-icon-wrapper"><i class="icon-note note note"></i></div><div class="noteContentSpan"><strong>说明 </strong><p id="3b4725cfb8eh7">支持的领域 / 任务：aigc </p></div></div><p id="0ad29d49edy7k"></p><p id="567447ba9a1jo">通义千问开源视觉理解大模型Qwen-VL于2023年12月1日发布重大更新，不仅大幅提升通用OCR、视觉推理、中文文本理解基础能力，还能处理各种分辨率和规格的图像，甚至能“看图做题”。</p><p id="0ce8e22bdc6i9"></p><p jc="start" id="634e4d16bavwk" style="text-align:start">升级的Qwen-VL(qwen-vl-plus/qwen-vl-max)模型现有几大特点：</p><p id="85d725b8adzna">‒ 大幅增强了图片中文字处理能力，能够成为生产力小帮手，提取、整理、总结文字信息不在话下。</p><p id="7f67b428adxsv">‒ 增加可处理分辨率范围，各分辨率和长宽比的图都能处理，大图和长图能看清。</p><p id="d1701305fbv6y">‒ 增强视觉推理和决策能力，适于搭建视觉Agent，让大模型Agent的想象力进一步扩展。</p><p id="d2a5eba23aw7f">‒ 升级看图做题能力，拍一拍习题图发给Qwen-VL，大模型能帮用户一步步解题。</p><p jc="start" id="8a6d2a3c526dn" style="text-align:start"></p><p id="60071e85e3s45">用户以文本和URL形式的图片形式输入包含多轮对话历史和当前指令的信息序列（messages），到返回模型生成的回复作为输出。在这一过程中，文本将被转换为语言模型可以处理的token序列。Token是模型用来表示自然语言文本的基本单位，可以直观的理解为“字”或“词”。对于中文文本来说，1个token通常对应一个汉字；对于英文文本来说，1个token通常对应3至4个字母或1个单词。例如，中文文本“你好，我是通义千问”会被转换成序列['你', '好', '，', '我', '是', '通', '义', '千', '问']，而英文文本"Nice to meet you."则会被转换成['Nice', ' to', ' meet', ' you', '.']；图片将被转换为固定长度的token序列。</p><p id="44c4568a7e7cb"></p><p id="6769a0188ehqi">由于模型调用的计算量与token序列长度相关，输入或输出token数量越多，模型的计算时间越长，我们将根据模型输入和输出的token数量计费。可以从API返回结果的<i> usage </i>字段中了解到您每次调用时使用的token数量。</p><p id="d8db09db8574t"></p><p id="346faf02bc551">对于输入的图片有以下限制：</p><ol id="7e5a5bb8f4oy7" start="1"><li id="4105be3efdvsz"><p id="721af3a7dfe41">图片文件大小不超过10MB</p></li><li id="a831410bf4pnr"><p id="e95dbb07f7ikw">图片总的像素数不超过 1048576，这相当于一张长宽均为 1024 的图片总像素数</p></li></ol><p id="beeca73d76mh8">图片支持的格式：</p><table id="79be8d4c720wb" tablewidth="710" tablecolswidth="216 242 251" autofit="false" class="table"><colgroup colwidth="0.92*" style="width:30.42%"></colgroup><colgroup colwidth="1.03*" style="width:34.08%"></colgroup><colgroup colwidth="1.06*" style="width:35.35%"></colgroup><tbody class="tbody"><tr id="b1c1ca5e3ao0x" style="height:42px"><td id="90762c0959k5e" rowspan="1" style="background-color:#EFF0F0" colspan="1"><p jc="left" id="55db6dea11jhd" style="text-align:left">图片格式</p></td><td id="4782f1a1242pz" rowspan="1" style="background-color:#EFF0F0" colspan="1"><p jc="left" id="8bb5755d1f09h" style="text-align:left">Content Type</p></td><td id="250e8a67c7nl8" rowspan="1" style="background-color:#EFF0F0" colspan="1"><p jc="left" id="e69b2041a0afa" style="text-align:left">文件扩展名</p></td></tr><tr id="852dcf10c4lut"><td id="c56dd14063zfe" rowspan="1" colspan="1"><p id="38f40408deos8">BMP </p></td><td id="2dcd7dba44116" rowspan="1" colspan="1"><p id="287034055brnx">image/bmp</p></td><td id="991a1bd04dsj6" rowspan="1" colspan="1"><p id="995892f9afg6z">.bmp</p></td></tr><tr id="1148d93bdbtb2"><td id="dcd4a17d3cr23" rowspan="1" colspan="1"><p id="d463e2fea6p5a">DIB </p></td><td id="538b3e37a7s3m" rowspan="1" colspan="1"><p id="5e09462251wrj">image/bmp</p></td><td id="0a685cc9e8n2i" rowspan="1" colspan="1"><p id="61b780aed00bh">.dib</p></td></tr><tr id="8b4e3918768z2"><td id="45fbb6e5d2tv1" rowspan="1" colspan="1"><p id="32cfd80c6c2nw">ICNS </p></td><td id="72b19bd2ffewi" rowspan="1" colspan="1"><p id="1ec4e717181px">image/icns</p></td><td id="0f9d8e4fd006t" rowspan="1" colspan="1"><p id="4454817e30205">.icns</p></td></tr><tr id="7068ed315a8g8"><td id="8787c40bab6pp" rowspan="1" colspan="1"><p id="76cd3cd6a8ugn">ICO </p></td><td id="2826ca965et03" rowspan="1" colspan="1"><p id="34955fd239aqk">image/x-icon</p></td><td id="7dcb902673tyl" rowspan="1" colspan="1"><p id="8839528561igu">.ico</p></td></tr><tr id="62d49ba39b25u"><td id="fb47583dcbvch" rowspan="1" colspan="1"><p id="8b582a877fzzu">JPEG </p></td><td id="a03771790evgy" rowspan="1" colspan="1"><p id="65fb3a6c94kqb">image/jpeg</p></td><td id="a4b8d0693d6au" rowspan="1" colspan="1"><p id="786ca8a291oz1">.jfif, .jpe, .jpeg, .jpg</p></td></tr><tr id="87ce041990qwg"><td id="830edfe29d06q" rowspan="1" colspan="1"><p id="3d3accb176hmi">JPEG2000 </p></td><td id="999a2906a9588" rowspan="1" colspan="1"><p id="104b0972a485p">image/jp2</p></td><td id="e03b6d4e1b5q0" rowspan="1" colspan="1"><p id="5f4c58e440esc">.j2c, .j2k, .jp2, .jpc, .jpf, .jpx</p></td></tr><tr id="658084805e2k5"><td id="63ed978449so2" rowspan="1" colspan="1"><p id="2645f1f6f9ot3">PNG </p></td><td id="b8d96a87709i8" rowspan="1" colspan="1"><p id="a066b116d8ier">image/png</p></td><td id="64eddd8000uh4" rowspan="1" colspan="1"><p id="502b6d1570b46">.apng, .png</p></td></tr><tr id="281dc5dc77t3i"><td id="346c01d8a8dke" rowspan="1" colspan="1"><p id="c669f3a4c9fid">SGI </p></td><td id="e359da8cb9ixz" rowspan="1" colspan="1"><p id="ed3159ce458n8">image/sgi</p></td><td id="a1bf278bacjxf" rowspan="1" colspan="1"><p id="4616da1ffdm7c">.bw, .rgb, .rgba, .sgi</p></td></tr><tr id="afb734c33eqwl" style="height:42px"><td id="0acf9088bf1h1" rowspan="1" colspan="1"><p id="717e35beebuhy">TIFF </p></td><td id="d1a15aa2343hp" rowspan="1" colspan="1"><p id="fe7a76e716122">image/tiff</p></td><td id="c5aaa9314152h" rowspan="1" colspan="1"><p id="df9075381by7p">.tif, .tiff</p></td></tr><tr id="b08957f86925p"><td id="49363f3f8e3aw" rowspan="1" colspan="1"><p id="00a08e8463ihr">WEBP </p></td><td id="bbd5a68ff2rdr" rowspan="1" colspan="1"><p id="b75a658552vqs">image/webp</p></td><td id="354a2e580fh2r" rowspan="1" colspan="1"><p id="10c1c88338y46">.webp</p></td></tr></tbody></table><p id="a88572cf3b8wr"></p></section><section id="43f870c0cfvsy" class="section"><h2 id="BQnl3"><b>模型概览</b></h2><table id="49f3f710cflk9" tablewidth="710" tablecolswidth="186 524" autofit="false" class="table"><colgroup colwidth="0.52*" style="width:26.20%"></colgroup><colgroup colwidth="1.48*" style="width:73.80%"></colgroup><tbody class="tbody"><tr id="49f3f715cffpa" style="height:41px"><td id="4b8aeac0cfkwo" rowspan="1" style="background-color:#EFF0F0" colspan="1"><p jc="center" id="db1dc12a59m5l" style="text-align:center">模型名</p></td><td id="4b8aeac1cf6pl" rowspan="1" style="background-color:#EFF0F0" colspan="1"><p jc="center" id="628d87b7b5irw" style="text-align:center">模型简介</p></td></tr><tr id="49f3f71acfsck"><td id="4b8b11d0cfkv0" rowspan="1" colspan="1"><p jc="center" id="326b6427831l4" style="text-align:center">qwen-vl-plus</p><p jc="center" id="90a1c41685v69" style="text-align:center">（限时免费开放中）</p></td><td id="4b8b11d1cffyp" rowspan="1" colspan="1"><p id="069b5967c0el3">通义千问<b>大规模视觉语言模型增强版</b>。大幅提升细节识别能力和文字识别能力，支持超百万像素分辨率和任意长宽比规格的图像。在广泛的视觉任务上提供<b>卓越</b>的性能。</p><p id="6f67b665aemt3"></p></td></tr><tr id="90b319b4884rh"><td id="8612434974hbc" rowspan="1" colspan="1"><p jc="center" id="9abdfc8a201in" style="text-align:center">qwen-vl-max</p><p jc="center" id="a0894565calc7" style="text-align:center">（限时免费开放中）</p></td><td id="2850eca66bwqi" rowspan="1" colspan="1"><p id="1ef89ef204hhr">通义千问<b>超大规模视觉语言模型</b>。相比增强版，再次提升视觉推理能力和指令遵循能力，提供更高的视觉感知和认知水平。在更多复杂任务上提供<b>最佳</b>的性能。</p></td></tr></tbody></table><h2 id="EKM4W"><b>SDK使用</b></h2><h3 id="o6ecl"><b>前提条件</b></h3><ul id="cfad6141cfvk3" class="ne-ul"><li id="u83127e7e"><p id="65bdb83721fpi">已开通服务并获得API-KEY：<a title="" class="xref" href="/zh/dashscope/developer-reference/activate-dashscope-and-create-an-api-key">开通DashScope并创建API-KEY</a>。</p></li><li id="a3b27291d3brf"><p id="33d51c9b31ozy">已安装最新版SDK：<a title="" class="xref" href="/zh/dashscope/developer-reference/install-dashscope-sdk">安装DashScope SDK</a>。</p></li></ul><p id="f616c0bf4cns7"></p><h3 id="t4GMg"><b>问答示例</b></h3><p id="17c044fc4e8yd">以下示例展示了调用通义千问VL模型对用户指令进行响应的代码。</p><div id="7491b1b1cfzyq" type="note" class="note note-note"><div class="note-icon-wrapper"><i class="icon-note note note"></i></div><div class="noteContentSpan"><strong>说明 </strong><p id="049ed06c5ciot">需要使用您的API-KEY替换示例中的<i> </i>YOUR_DASHSCOPE_API_KEY，代码才能正常运行。</p></div></div><p id="ebbaa3018awi3"><b>API-KEY设置</b></p><pre id="wsk5pi" outputclass="language-shell" data-tag="codeblock" class="pre codeblock language-shell"><code>export DASHSCOPE_API_KEY=YOUR_DASHSCOPE_API_KEY</code></pre><h3 id="f1a81bc048hjj"><b>简单示例</b></h3><div outputclass="tabbed-codeblock" data-tag="fig" id="79e33c60cfau8" class="tabbed-codeblock-box"><div class="tab-box"></div><input type="radio" name="check-79e33c60cfau8" id="79e33c60cfau8-python-tab" checked=""><label for="79e33c60cfau8-python-tab">Python</label><div class="codeblock-item"><pre id="79e33c61cf88x" data-tag="codeblock" outputclass="language-python" class="pre codeblock language-python"><code>from http import HTTPStatus
import dashscope


def simple_multimodal_conversation_call():
    """Simple single round multimodal conversation call.
    """
    messages = [
        {
            "role": "user",
            "content": [
                {"image": "https://dashscope.oss-cn-beijing.aliyuncs.com/images/dog_and_girl.jpeg"},
                {"text": "这是什么?"}
            ]
        }
    ]
    response = dashscope.MultiModalConversation.call(model='qwen-vl-plus',
                                                     messages=messages)
    # The response status_code is HTTPStatus.OK indicate success,
    # otherwise indicate request is failed, you can get error code
    # and message from code and message.
    if response.status_code == HTTPStatus.OK:
        print(response)
    else:
        print(response.code)  # The error code.
        print(response.message)  # The error message.


if __name__ == '__main__':
    simple_multimodal_conversation_call()
</code></pre></div><input type="radio" name="check-79e33c60cfau8" id="79e33c60cfau8-java-tab"><label for="79e33c60cfau8-java-tab">Java</label><div class="codeblock-item"><pre id="14a9e68048dqr" data-tag="codeblock" outputclass="language-java" class="pre codeblock language-java"><code>// Copyright (c) Alibaba, Inc. and its affiliates.

import java.util.Arrays;
import java.util.Collections;
import com.alibaba.dashscope.aigc.multimodalconversation.MultiModalConversation;
import com.alibaba.dashscope.aigc.multimodalconversation.MultiModalConversationParam;
import com.alibaba.dashscope.aigc.multimodalconversation.MultiModalConversationResult;
import com.alibaba.dashscope.common.MultiModalMessage;
import com.alibaba.dashscope.common.Role;
import com.alibaba.dashscope.exception.ApiException;
import com.alibaba.dashscope.exception.NoApiKeyException;
import com.alibaba.dashscope.exception.UploadFileException;

public class Main {
    public static void simpleMultiModalConversationCall()
            throws ApiException, NoApiKeyException, UploadFileException {
        MultiModalConversation conv = new MultiModalConversation();
        MultiModalMessage userMessage = MultiModalMessage.builder().role(Role.USER.getValue())
        .content(Arrays.asList(Collections.singletonMap("image", "https://dashscope.oss-cn-beijing.aliyuncs.com/images/dog_and_girl.jpeg"), 
        Collections.singletonMap("text", "这是什么?"))).build();
        MultiModalConversationParam param = MultiModalConversationParam.builder()
                .model(MultiModalConversation.Models.QWEN_VL_PLUS)
                .message(userMessage)
                .build();
        MultiModalConversationResult result = conv.call(param);
        System.out.println(result);
    }

    public static void main(String[] args) {
        try {
            simpleMultiModalConversationCall();
        } catch (ApiException | NoApiKeyException | UploadFileException e) {
            System.out.println(e.getMessage());
        }
        System.exit(0);
    }
}
</code></pre></div></div><h3 id="8d583410d7so6"><b>本地文件</b></h3><p id="6cb9eb4437ht1">您可以通过本地文件测试接口调用，示例代码如下。</p><div id="30a80305fajgx" type="note" class="note note-note"><div class="note-icon-wrapper"><i class="icon-note note note"></i></div><div class="noteContentSpan"><strong>说明 </strong><p id="25880dbe3324t">本地文件的调用方式下，您的文件将通过SDK自动上传到DashScope平台的安全存储空间，该空间仅提供临时存储，不为DashScope平台方以外的任何人访问。在调用完成后，平台将及时删除临时文件，您的文件不会被用于任何其他用途。</p></div></div><div outputclass="tabbed-codeblock" data-tag="fig" id="6ac2a9e0795cy" class="tabbed-codeblock-box"><div class="tab-box"></div><input type="radio" name="check-6ac2a9e0795cy" id="6ac2a9e0795cy-python-tab" checked=""><label for="6ac2a9e0795cy-python-tab">Python</label><div class="codeblock-item"><pre id="6ac2d0f079op3" data-tag="codeblock" outputclass="language-python" class="pre codeblock language-python"><code>from dashscope import MultiModalConversation


def call_with_local_file():
    """Sample of use local file.
       linux&amp;mac file schema: file:///home/images/test.png
       windows file schema: file://D:/images/abc.png
    """
    local_file_path1 = 'file://The_local_absolute_file_path1'
    local_file_path2 = 'file://The_local_absolute_file_path1'
    messages = [{
        'role': 'system',
        'content': [{
            'text': 'You are a helpful assistant.'
        }]
    }, {
        'role':
        'user',
        'content': [
            {
                'image': local_file_path1
            },
            {
                'image': local_file_path2
            },
            {
                'text': '图片里有什么东西?'
            },
        ]
    }]
    response = MultiModalConversation.call(model='qwen-vl-plus', messages=messages)
    print(response)


if __name__ == '__main__':
    call_with_local_file()
</code></pre></div><input type="radio" name="check-6ac2a9e0795cy" id="6ac2a9e0795cy-java-tab"><label for="6ac2a9e0795cy-java-tab">Java</label><div class="codeblock-item"><pre id="95e8e380798lp" data-tag="codeblock" outputclass="language-java" class="pre codeblock language-java"><code>// Copyright (c) Alibaba, Inc. and its affiliates.

import java.util.Arrays;
import java.util.HashMap;
import com.alibaba.dashscope.aigc.multimodalconversation.MultiModalConversation;
import com.alibaba.dashscope.aigc.multimodalconversation.MultiModalConversationParam;
import com.alibaba.dashscope.aigc.multimodalconversation.MultiModalConversationResult;
import com.alibaba.dashscope.common.MultiModalMessage;
import com.alibaba.dashscope.common.Role;
import com.alibaba.dashscope.exception.ApiException;
import com.alibaba.dashscope.exception.NoApiKeyException;
import com.alibaba.dashscope.exception.UploadFileException;
import io.reactivex.Flowable;

public class MultiModalConversationLocalFile2 {
    /**
     * sample of use local file
     * Windows file format: file:///D:/test/images/test.png
     * Linux &amp; Mac format: file://The_absolute_local_path
     * 
     */
    public static void callWithLocalFile()
            throws ApiException, NoApiKeyException, UploadFileException {
        String localFilePath1 = "file://The_file_absolute_path";
        String localFilePath2 = "file://The_file_absolute_path2"; 
        MultiModalConversation conv = new MultiModalConversation();
        // The content list elements must be mutable map, such as HashMap.
        MultiModalMessage userMessage = MultiModalMessage.builder().role(Role.USER.getValue())
        .content(Arrays.asList(new HashMap&lt;String, Object&gt;(){{put("image", localFilePath1);}},
                               new HashMap&lt;String, Object&gt;(){{put("image", localFilePath2);}},
                               new HashMap&lt;String, Object&gt;(){{put("text", "这是什么?");}})).build();
        MultiModalConversationParam param = MultiModalConversationParam.builder()
                .model(MultiModalConversation.Models.QWEN_VL_PLUS)
                .message(userMessage)
                .build();
        Flowable&lt;MultiModalConversationResult&gt; result = conv.streamCall(param);
        result.blockingForEach(item -&gt; {
            System.out.println(item);
        });
    }

    public static void main(String[] args) {
        try {
            callWithLocalFile();
        } catch (ApiException | NoApiKeyException | UploadFileException e) {
            System.out.println(e.getMessage());
        }
        System.exit(0);
    }
}


</code></pre></div></div><h3 id="5dc4b49079iy5"><b>多轮对话</b></h3><p id="a58680ba7f761"></p><div outputclass="tabbed-codeblock" data-tag="fig" id="5437a02048ux4" class="tabbed-codeblock-box"><div class="tab-box"></div><input type="radio" name="check-5437a02048ux4" id="5437a02048ux4-python-tab" checked=""><label for="5437a02048ux4-python-tab">Python</label><div class="codeblock-item"><pre id="5437ee4048svn" data-tag="codeblock" outputclass="language-python" class="pre codeblock language-python"><code>from http import HTTPStatus
from dashscope import MultiModalConversation


def conversation_call():
    """Sample of multiple rounds of conversation.
    """
    messages = [
        {
            "role": "user",
            "content": [
                {"image": "https://dashscope.oss-cn-beijing.aliyuncs.com/images/dog_and_girl.jpeg"},
                {"text": "这是什么?"},
            ]
        }
    ]
    response = MultiModalConversation.call(model='qwen-vl-plus',
                                           messages=messages)
    # The response status_code is HTTPStatus.OK indicate success,
    # otherwise indicate request is failed, you can get error code
    # and message from code and message.
    if response.status_code == HTTPStatus.OK:
        print(response)
    else:
        print(response.code)  # The error code.
        print(response.message)  # The error message.
    messages.append({'role': response.output.choices[0].message.role,
                     'content': response.output.choices[0].message.content})
    messages.append({"role": "user",
                     "content": [
                         {"text": "她们在干什么?", }
                     ]})
    import json
    print(json.dumps(messages, ensure_ascii=False))
    response = MultiModalConversation.call(model='qwen-vl-plus',
                                           messages=messages)
    # The response status_code is HTTPStatus.OK indicate success,
    # otherwise indicate request is failed, you can get error code
    # and message from code and message.
    if response.status_code == HTTPStatus.OK:
        print(response)
    else:
        print(response.code)  # The error code.
        print(response.message)  # The error message.


if __name__ == '__main__':
    conversation_call()

</code></pre></div><input type="radio" name="check-5437a02048ux4" id="5437a02048ux4-java-tab"><label for="5437a02048ux4-java-tab">Java</label><div class="codeblock-item"><pre id="5c283fb048f22" data-tag="codeblock" outputclass="language-java" class="pre codeblock language-java"><code>// Copyright (c) Alibaba, Inc. and its affiliates.

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import com.alibaba.dashscope.aigc.multimodalconversation.MultiModalConversation;
import com.alibaba.dashscope.aigc.multimodalconversation.MultiModalConversationParam;
import com.alibaba.dashscope.aigc.multimodalconversation.MultiModalConversationResult;
import com.alibaba.dashscope.common.MultiModalMessage;
import com.alibaba.dashscope.common.Role;
import com.alibaba.dashscope.exception.ApiException;
import com.alibaba.dashscope.exception.NoApiKeyException;
import com.alibaba.dashscope.exception.UploadFileException;

public class Main {
    private static final String modelName = "qwen-vl-plus";
    public static void MultiRoundConversationCall() throws ApiException, NoApiKeyException, UploadFileException {
        MultiModalConversation conv = new MultiModalConversation();
        MultiModalMessage systemMessage = MultiModalMessage.builder().role(Role.SYSTEM.getValue())
        .content(Arrays.asList(Collections.singletonMap("text", "You are a helpful assistant."))).build();

        MultiModalMessage userMessage = MultiModalMessage.builder().role(Role.USER.getValue())
        .content(Arrays.asList(Collections.singletonMap("image", "https://dashscope.oss-cn-beijing.aliyuncs.com/images/dog_and_girl.jpeg"), 
        Collections.singletonMap("text", "图片里有什么动物?"))).build();
        List&lt;MultiModalMessage&gt; messages = new ArrayList&lt;&gt;();
        messages.add(systemMessage);
        messages.add(userMessage);
        MultiModalConversationParam param = MultiModalConversationParam.builder()
                .model(modelName)
                .messages(messages)
                .build();
        MultiModalConversationResult result = conv.call(param);
        System.out.println(result);
        // add the result to conversation
        messages.add(result.getOutput().getChoices().get(0).getMessage());
        MultiModalMessage msg = MultiModalMessage.builder().role(Role.USER.getValue())
        .content(Arrays.asList(Collections.singletonMap("text", "图片动物是什么？"))).build();
        messages.add(msg);
        // new messages
        param.setMessages((List)messages);
        result = conv.call(param);
        System.out.print(result);
    }

    public static void main(String[] args) {
        try {
            MultiRoundConversationCall();
        } catch (ApiException | NoApiKeyException | UploadFileException e) {
            System.out.println(e.getMessage());
        }
        System.exit(0);
    }
}   

</code></pre></div></div><h3 id="261f81404839h"><b>流式输出</b></h3><div outputclass="tabbed-codeblock" data-tag="fig" id="a8e366c0cfhqr" class="tabbed-codeblock-box"><div class="tab-box"></div><input type="radio" name="check-a8e366c0cfhqr" id="a8e366c0cfhqr-python-tab" checked=""><label for="a8e366c0cfhqr-python-tab">Python</label><div class="codeblock-item"><pre id="a8e38dd0cfzwu" data-tag="codeblock" outputclass="language-python" class="pre codeblock language-python"><code>from dashscope import MultiModalConversation


def simple_multimodal_conversation_call():
    """Simple single round multimodal conversation call.
    """
    messages = [
        {
            "role": "user",
            "content": [
                {"image": "https://dashscope.oss-cn-beijing.aliyuncs.com/images/dog_and_girl.jpeg"},
                {"text": "这是什么?"}
            ]
        }
    ]
    responses = MultiModalConversation.call(model='qwen-vl-plus',
                                           messages=messages,
                                           stream=True)
    for response in responses:
        print(response)


if __name__ == '__main__':
    simple_multimodal_conversation_call()
</code></pre></div><input type="radio" name="check-a8e366c0cfhqr" id="a8e366c0cfhqr-java-tab"><label for="a8e366c0cfhqr-java-tab">Java</label><div class="codeblock-item"><pre id="0f6987f048v4b" data-tag="codeblock" outputclass="language-java" class="pre codeblock language-java"><code>// Copyright (c) Alibaba, Inc. and its affiliates.

import java.util.Arrays;
import java.util.HashMap;
import com.alibaba.dashscope.aigc.multimodalconversation.MultiModalConversation;
import com.alibaba.dashscope.aigc.multimodalconversation.MultiModalConversationParam;
import com.alibaba.dashscope.aigc.multimodalconversation.MultiModalConversationResult;
import com.alibaba.dashscope.common.MultiModalMessage;
import com.alibaba.dashscope.common.Role;
import com.alibaba.dashscope.exception.ApiException;
import com.alibaba.dashscope.exception.NoApiKeyException;
import com.alibaba.dashscope.exception.UploadFileException;
import io.reactivex.Flowable;

public class MultiModalConversationStream {
    public static void streamCall()
            throws ApiException, NoApiKeyException, UploadFileException {
        MultiModalConversation conv = new MultiModalConversation();
        // must create mutable map.
        MultiModalMessage userMessage = MultiModalMessage.builder().role(Role.USER.getValue())
        .content(Arrays.asList(new HashMap&lt;String, Object&gt;(){{put("image", "https://dashscope.oss-cn-beijing.aliyuncs.com/images/dog_and_girl.jpeg");}}, 
        new HashMap&lt;String, Object&gt;(){{put("text", "基于这幅图，讲一个故事");}})).build();
        MultiModalConversationParam param = MultiModalConversationParam.builder()
                .model(MultiModalConversation.Models.QWEN_VL_PLUS)
                .message(userMessage)
                .build();
        Flowable&lt;MultiModalConversationResult&gt; result = conv.streamCall(param);
        result.blockingForEach(item -&gt; {
            System.out.println(item);
        });
    }

    public static void main(String[] args) {
        try {
            streamCall();
        } catch (ApiException | NoApiKeyException | UploadFileException e) {
            System.out.println(e.getMessage());
        }
        System.exit(0);
    }
}</code></pre></div></div></section><section id="b9ad0a10cfhpe" class="section"><h3 id="b7stW"><b>参数配置</b></h3><table id="ca3ead70cf055" tablewidth="706" tablecolswidth="152 106 75 371" autofit="false" class="table"><colgroup colwidth="0.86*" style="width:21.53%"></colgroup><colgroup colwidth="0.6*" style="width:15.01%"></colgroup><colgroup colwidth="0.43*" style="width:10.62%"></colgroup><colgroup colwidth="2.11*" style="width:52.55%"></colgroup><tbody class="tbody"><tr id="ca3ead79cfwx2"><td id="cc979190cfra0" rowspan="1" style="background-color:#e5e5e5" colspan="1"><p id="91c543fa49xe6"><b>参数</b></p></td><td id="cc97b8a0cfvr6" rowspan="1" style="background-color:#e5e5e5" colspan="1"><p id="dae05ce15fin3"><b>类型</b></p></td><td id="cc97b8a1cfo4o" rowspan="1" style="background-color:#e5e5e5" colspan="1"><p id="cb563f194dr59"><b>默认值</b></p></td><td id="cc97dfb0cfcvz" rowspan="1" style="background-color:#e5e5e5" colspan="1"><p id="d07e841ec46bl"><b>说明</b></p></td></tr><tr id="ca3ead82cf4nv" style="height:67px"><td id="cc97dfb1cf1pi" rowspan="1" colspan="1"><p id="4f0b7ca83bye2">model</p></td><td id="cc97dfb2cfrgh" rowspan="1" colspan="1"><p id="bbcf350b965uo"><i>string</i></p></td><td id="cc9806c0cf3o2" rowspan="1" colspan="1"><p id="e011dc60a1hpc">-</p></td><td id="cc9806c1cfbb1" rowspan="1" colspan="1"><p id="e2ef6942bbdq6">指定用于对话的通义千问模型名，qwen-vl-plus<i>。</i></p></td></tr><tr id="ca3ed485cf8ok"><td id="cc982dd0cf2zg" rowspan="1" colspan="1"><p id="181289c7echpz">messages</p></td><td id="cc982dd1cf21k" rowspan="1" colspan="1"><p id="831a5f3d881nt"><i>list[dict]</i></p></td><td id="cc982dd2cfcjb" rowspan="1" colspan="1"><p id="6442b5c7efjln">-</p></td><td id="cc9854e0cfhmh" rowspan="1" colspan="1"><p id="8aa7320dc13t5">用户输入的历史对话信息和指令组成的完整输入信息。</p><p id="93ad9800db8y9">参考示例，目前对于图片，支持图片url和本地路径</p><p id="05bce0fa42moc">本地路径格式：</p><p id="75380e5dfbxis">python下：</p><ul id="24ad163279ixu"><li id="24ad163079g7j"><p id="1fd3fb29c7z74">linux&amp;mac file format: file:///home/images/test.png</p></li><li id="29c0fba079p8y"><p id="055832fe56sox">windows file format: </p></li></ul><p id="68392d2069wzt"> file://D:/images/abc.png</p><p id="1cd606c425wt9">java下：</p><ul id="2dee51a279blw"><li id="2dee51a079uul"><p id="f232a578b0tk9">Windows file format: file:///D:/test/images/test.png</p></li><li id="31129c1079t9w"><p id="739a3e2575scd">Linux &amp; Mac format: file://The_absolute_local_path</p></li></ul><p id="fd6e0749d9s08">⚠️windows下python，java区别</p></td></tr><tr id="ca3ed497cfd2s"><td id="cc98a300cf6o4" rowspan="1" colspan="1"><p id="3d021d3b51gb7">top_p (可选)</p></td><td id="cc98a301cfp77" rowspan="1" colspan="1"><p id="0a3af7d8011wn"><i>float</i></p></td><td id="cc98a302cfx35" rowspan="1" colspan="1"><p id="3b2bb68eff471">0.1</p></td><td id="cc98ca10cf195" rowspan="1" colspan="1"><p id="9dba1ce7bab1p">生成过程中核采样方法概率阈值，例如，取值为0.1时，仅保留概率加起来大于等于0.1的最可能token的最小集合作为候选集。取值范围为(0,1.0)，取值越大，生成的随机性越高；取值越低，生成的确定性越高。</p></td></tr><tr id="ca3efb96cfwud"><td id="cc98ca11cf4m6" rowspan="1" colspan="1"><p id="7adb941591azy">stream(可选)</p></td><td id="cc98ca12cfusm" rowspan="1" colspan="1"><p id="f6bb12dfc615z"><i>bool</i></p></td><td id="cc98f120cf2wg" rowspan="1" colspan="1"><p id="dc2efcbd8brnx">False</p></td><td id="cc991830cf0g7" rowspan="1" colspan="1"><p id="f16c1ea75a0by">是否使用流式输出。当以stream模式输出结果时，接口返回结果为generator，需要通过迭代获取结果，每个输出为当前生成的整个序列，最后一次输出为最终全部生成结果。</p></td></tr><tr id="328a9c50103qj"><td id="328a9c5110ci4" rowspan="1" colspan="1"><p id="358be705b5bqh">top_k</p></td><td id="328a9c5310ye9" rowspan="1" colspan="1"><p id="84bb546c61jv0"><i>float</i></p></td><td id="328a9c55102ew" rowspan="1" colspan="1"><p id="e521f23e5ar2x">100.0</p></td><td id="328ac360108na" rowspan="1" colspan="1"><p id="7b83024232k2u">生成时，采样候选集的大小。例如，取值为50时，仅将单次生成中得分最高的50个token组成随机采样的候选集。取值越大，生成的随机性越高；取值越小，生成的确定性越高。注意：如果top_k的值大于100，top_k将采用默认值100</p></td></tr><tr id="547ca4c010zug"><td id="547ca4c1109vi" rowspan="1" colspan="1"><p id="a193790bc2o0r">seed</p></td><td id="547ca4c3109ia" rowspan="1" colspan="1"><p id="a7e010034ep03"><i>int</i></p></td><td id="547ca4c510ka1" rowspan="1" colspan="1"><p id="08172cec01u79">1234</p></td><td id="547ca4c710m75" rowspan="1" colspan="1"><p id="5e016bfd856rn">生成时，随机数的种子，用于控制模型生成的随机性。如果使用相同的种子，每次运行生成的结果都将相同；当需要复现模型的生成结果时，可以使用相同的种子。seed参数支持无符号64位整数类型。默认值 1234</p></td></tr><tr id="e67d8fe3c9nun"><td id="256502d276uzn" rowspan="1" colspan="1"><p id="7a540f9f3ff64">incremental_output</p></td><td id="02ad245c63ytm" rowspan="1" colspan="1"><p id="15ecb7b84csk2"><i>bool</i></p></td><td id="2aff3d704fy2k" rowspan="1" colspan="1"><p id="e099432f09ofn">False</p></td><td id="7ee5ce7c82ncm" rowspan="1" colspan="1"><p id="833bcb8778ayd">是否使用增量输出。当使用增量输出时每次流式返回的序列仅包含最新生成的增量内容，默认输出完整的全量内容</p></td></tr></tbody></table></section><section id="dcea7e40cf8ve" class="section"><h3 id="QGPBR" data-lake-id="QGPBR"><b>返回结果
</b></h3><ul id="6eaf84b2d5hdm"><li id="6eaf84b0d5xlz"><p id="bfd8401b0200g">返回结果示例
</p></li></ul><div outputclass="tabbed-codeblock" data-tag="fig" id="eddbf4e0cf563" class="tabbed-codeblock-box"><div class="tab-box"></div><input type="radio" name="check-eddbf4e0cf563" id="eddbf4e0cf563-json-tab" checked=""><label for="eddbf4e0cf563-json-tab">JSON</label><div class="codeblock-item"><pre id="eddbf4e1cfkt1" data-tag="codeblock" outputclass="language-json" class="pre codeblock language-json"><code>{
    "status_code": 200,
    "request_id": "afbf4016-8704-965d-b98a-53ea46a06742",
    "code": "",
    "message": "",
    "output": {
        "text": null,
        "finish_reason": null,
        "choices": [
            {
                "finish_reason": null,
                "message": {
                    "role": "assistant",
                    "content": [
                        {
                            "text": "这是一个关于友情的故事。在这个故事中，有一只可爱的小狗，它非常喜欢和人类玩耍。一天，它和一个喜欢它的女孩一起去了海滩。他们在沙滩上玩得很开心，互相追逐，玩耍，甚至互相握手。在他们的快乐时光中，女孩给小狗一个饼干，小狗非常高兴地接受了。夕阳西下，他们坐在沙滩上，享受着这美好的时光，直到天黑。这个故事告诉我们，友情不分物种，只要我们用心去交流和理解，就能找到共同的乐趣。"
                        }
                    ]
                }
            }
        ]
    },
    "usage": {
        "input_tokens": 1282,
        "output_tokens": 107
    }
}</code></pre></div></div><ul id="7218ee72d5v20"><li id="7218ee70d5opl"><p id="0acb13229efrg">返回参数说明</p></li></ul><table id="0284ce30cffvq" tablewidth="706" tablecolswidth="127 129 227 227" autofit="false" class="table"><colgroup colwidth="0.72*" style="width:17.99%"></colgroup><colgroup colwidth="0.73*" style="width:18.27%"></colgroup><colgroup colwidth="1.29*" style="width:32.15%"></colgroup><colgroup colwidth="1.29*" style="width:32.15%"></colgroup><tbody class="tbody"><tr id="0284ce37cf064"><td id="044b0f40cf18c" rowspan="1" style="background-color:#e5e5e5" colspan="1"><p id="a3574b2cf46xr"><b>返回参数</b></p></td><td id="044b3650cfd20" rowspan="1" style="background-color:#e5e5e5" colspan="1"><p id="6d05807a7azlz"><b>类型</b></p></td><td id="044b3651cfsg3" rowspan="1" style="background-color:#e5e5e5" colspan="1"><p id="487127446bwlf"><b>说明</b></p></td><td id="dec8f040432v2" rowspan="1" colspan="1"><p id="ec2d39532dj58"></p></td></tr><tr id="4cd1d0c0de100"><td id="4cd1f7d1de56g" rowspan="1" colspan="1"><p id="92304e4547vbn">status_code</p></td><td id="4cd1f7d3deh4l" rowspan="1" colspan="1"><p id="3e39fee690lfo"><i>int</i></p></td><td id="4cd1f7d5de3jr" rowspan="1" colspan="1"><p id="274f78f75fmjp">200（HTTPStatus.OK）表示请求成功，否则表示请求失败，可以通过code获取错误码，通过message字段获取错误详细信息。</p></td><td id="dec8f04243rdq" rowspan="1" colspan="1"><p id="ea1d5fa3e0yyi"></p></td></tr><tr id="4af28970depvj" style="height:42px"><td id="4af28972dec6g" rowspan="1" colspan="1"><p id="4c7955f2deha3">request_Id</p></td><td id="4af28974defm4" rowspan="1" colspan="1"><p id="3b179119acuzq"><i>string</i></p></td><td id="4af28976de8gb" rowspan="1" colspan="1"><p id="9756597cee84n">系统生成的标志本次调用的id。</p></td><td id="dec8f0444320r" rowspan="1" colspan="1"><p id="82a32b9e9d55k"></p></td></tr><tr id="904f57a0dekad"><td id="904f7eb1de3z3" rowspan="1" colspan="1"><p id="4824c89932mou">code</p></td><td id="904f7eb3dew2b" rowspan="1" colspan="1"><p id="d91da04e69lo4"><i>string</i></p></td><td id="904f7eb5dev93" rowspan="1" colspan="1"><p id="e89f59ad7679d">表示请求失败，表示错误码，成功忽略。</p></td><td id="dec8f04643g3z" rowspan="1" colspan="1"><p id="8c5d1a9e94jcq"></p></td></tr><tr id="d072b700dekk6"><td id="d072b702de8i0" rowspan="1" colspan="1"><p id="c5ebe89b36lrz">output</p></td><td id="d072b704dej9j" rowspan="1" colspan="1"><p id="b1c91f804389l"><i>dict</i></p></td><td id="d072de10dei2h" rowspan="1" colspan="1"><p id="7677cfde110yv">调用结果信息，对于通义VL模型，包含输出message。</p></td><td id="dec8f048437m3" rowspan="1" colspan="1"><p id="b03f2ac376jqo"></p></td></tr><tr id="ddc3dc5043dh8"><td id="dec5bbf2431aq" rowspan="1" colspan="1"><p jc="left" uuid="lglmzbuc7aazs25dgdc" id="2da19bffcdeg1" style="text-align:left">output.choices</p></td><td id="dec5bbf443gfg" rowspan="1" colspan="1"><p jc="left" uuid="lglmzbudjlodpiitmff" id="558a8948f0cjs" style="text-align:left"><i>List</i></p></td><td id="dec5bbf643g53" rowspan="1" colspan="1"><p jc="left" uuid="llq6to9w8fd3oppbxbh" id="74277faf44qap" style="text-align:left">模型为输入生成的完成选项列表。</p></td><td id="dec5bbf8438st" rowspan="3" colspan="1"><p id="00d6f01841iqy">"choices": [</p><p id="ddce9d58101f5"> {</p><p id="b56f3aec04k6v"> "finish_reason": null,</p><p id="552c04c3cbjpv"> "message": {</p><p id="910a73be158dd"> "role": "assistant",</p><p id="cd62ea57ebypg"> "content": [</p><p id="525ef63a4f2se"> {</p><p id="85b28b3cb7nci"> "text": "这是一个"</p><p id="d263b43f08peu"> }</p><p id="3232feec7acy1"> ]</p><p id="27b5881852wvt"> }</p><p id="0b5384b7bdjxa"> }</p><p id="2a552cbb5fcdj"> ]</p></td></tr><tr id="dd4dc1f043nlo"><td id="dec5bc0143xrr" rowspan="1" colspan="1"><p id="ce54ec27aapc1">output.choices[x].message.role</p></td><td id="dec5bc0343qc9" rowspan="1" colspan="1"><p jc="left" id="70a679c94fv19" style="text-align:left"><i>String</i></p></td><td id="dec5bc05437fd" rowspan="1" colspan="1"><p id="c68ee8f8d0hn3">信息来源。</p></td></tr><tr id="bf0c3e6043udt"><td id="dec5e30143dzf" rowspan="1" colspan="1"><p jc="center" uuid="llq7cbr11dkv2qwnfb6" id="11d65f7819ed5" style="text-align:center">output.choices[x].message.content</p></td><td id="dec5e30343l04" rowspan="1" colspan="1"><p jc="left" uuid="llq7cbr2n1lavqbxxpe" id="9cc23e82f2ec5" style="text-align:left"><i>List</i></p></td><td id="dec5e3054346j" rowspan="1" colspan="1"><p id="becf838585uhd" uuid="llq7cbr2wk2257n9e1">本次请求的算法输出内容,输出可能包含多种模态内容，因此，是一个list，元素为dict，key为内容类型，value为内容值。</p></td></tr><tr id="d2c95130demn3"><td id="d2c97841desmj" rowspan="1" colspan="1"><p id="15479db7634lk">usage</p></td><td id="d2c97843dev8n" rowspan="1" colspan="1"><p id="7c02bb6bb2hm2"><i>dict</i></p></td><td id="d2c97845deb28" rowspan="1" colspan="1"><p id="16c08b8380a0j">计量信息，表示本次请求计量数据。</p></td><td id="dec8f05043zqr" rowspan="1" colspan="1"><p id="eed3c6dccfq6n"></p></td></tr><tr id="02851c51cf8qp"><td id="044bab80cfwlv" rowspan="1" colspan="1"><p id="b7cf33cc0d1wa">usage.input_tokens</p></td><td id="044bab81cf9iu" rowspan="1" colspan="1"><p id="da9f32550f0i6"><i>int</i></p></td><td id="044bab82cfsgz" rowspan="1" colspan="1"><p id="112c8eb985wr5">用户输入文本转换成Token后的长度。</p></td><td id="dec917504393z" rowspan="1" colspan="1"><p id="f3cdde5ddd76u"></p></td></tr><tr id="02851c58cfn96"><td id="044bd290cf0i5" rowspan="1" colspan="1"><p id="986a25b098g26">usage.output_tokens</p></td><td id="044bd291cfmau" rowspan="1" colspan="1"><p id="e8c9136dab5fe"><i>int</i></p></td><td id="044bd292cfs9q" rowspan="1" colspan="1"><p id="aea3191bcefoy">模型生成回复转换为Token后的长度。</p></td><td id="dec9175243gz0" rowspan="1" colspan="1"><p id="6a5c93f6841r0"></p></td></tr></tbody></table><p id="0b9735e0088f3"></p><p id="010b9d1d7e485"></p><section id="341800c0f8w0r" class="section"><h2 id="341800c1f8h93"><b>HTTP调用接口</b></h2><h3 uuid="lflx8jzu18ae9191ppg" id="8f79b5d0f8ker"><b>功能描述</b></h3><p uuid="lflx9q1vg2v5dl5kwli" id="9011df9022tvz">通义VL模型同时支持 HTTP 调用来完成客户的响应，目前提供普通 HTTP 和 HTTP SSE 两种协议，您可根据自己的需求自行选择。</p><p uuid="li12t2o9le69zbsp5ga" id="f83950babd065"></p><h3 id="48063821f9diz"><b>前提条件</b></h3><ul class="ne-ul" id="48063822f95rh"><li id="48063823f9ah2"><p id="13cc8970f35x5">已开通服务并获得API-KEY：<a title="" class="xref" href="/zh/dashscope/developer-reference/activate-dashscope-and-create-an-api-key">开通DashScope并创建API-KEY</a>。</p></li></ul><p uuid="li12t30tn64sw3zeh1d" id="59b41692518d6"></p><h3 uuid="li3z9tk2vs873wcjgr" id="cd5c7c20fb74b"><b>提交接口调用</b></h3><p id="01a817a02diyv">POST https://dashscope.aliyuncs.com/api/v1/services/aigc/multimodal-generation/generation</p><p uuid="lflx9q1vg2v5dl5kwli" id="f19a6876f45q7"></p><h3 id="25745d61fbx49"><b>入参描述</b></h3><table id="0faebb200cdlr" tablewidth="669" tablecolswidth="84 154 65 51 260 201" autofit="false" class="table"><colgroup colwidth="0.76*" style="width:12.56%"></colgroup><colgroup colwidth="1.39*" style="width:23.02%"></colgroup><colgroup colwidth="0.59*" style="width:9.72%"></colgroup><colgroup colwidth="0.46*" style="width:7.62%"></colgroup><colgroup colwidth="2.34*" style="width:38.86%"></colgroup><colgroup colwidth="1.81*" style="width:30.04%"></colgroup><tbody class="tbody"><tr id="0faebb210cgtf"><td id="0faebb220cdu6" rowspan="1" style="background-color:#e5e5e5" colspan="1"><p jc="center" uuid="lfm6jnuvq65j5mjh0nc" id="8ef5154ca46ia" style="text-align:center"><b>传参方式</b></p></td><td id="0faebb240c3kf" rowspan="1" style="background-color:#e5e5e5" colspan="1"><p jc="center" uuid="lfc9fse715p1kl4c7vm" id="c1b58d7bbejhp" style="text-align:center"><b>字段</b></p></td><td id="0faebb260c6i5" rowspan="1" style="background-color:#e5e5e5" colspan="1"><p jc="center" uuid="lfc9fse7dupdgrgz8t" id="8411b6cd5dswp" style="text-align:center"><b>类型</b></p></td><td id="0faebb280cp6b" rowspan="1" style="background-color:#e5e5e5" colspan="1"><p jc="center" uuid="lfm5yl2n4n4kqpq19p3" id="4beef34bc3aay" style="text-align:center"><b>必选</b></p></td><td id="0faee2300ccxp" rowspan="1" style="background-color:#e5e5e5" colspan="1"><p jc="center" uuid="lfc9fse7ftu9alxvkki" id="fa47e95d8abs3" style="text-align:center"><b>描述</b></p></td><td id="0faee2320cl92" rowspan="1" style="background-color:#e5e5e5" colspan="1"><p jc="center" uuid="lfc9fse7at0kxn3bj85" id="9630fb1c8cskg" style="text-align:center"><b>示例值</b></p></td></tr><tr id="0faee2680cu64"><td id="0faee2690cwae" rowspan="3" colspan="1"><p jc="center" uuid="lfm8u8rsocxke17ewz" id="419d466eacgru" style="text-align:center">Header</p></td><td id="0faee26b0c5uv" rowspan="1" colspan="1"><p jc="left" uuid="lfm8u8rsvx94zcf01wg" id="e847ed7e26kf2" style="text-align:left">Content-Type</p></td><td id="0faee26d0ckw1" rowspan="1" colspan="1"><p jc="center" uuid="lfm8u8rsypd2v9wd0l" id="6b3bbe1e07c1t" style="text-align:center"><i>String</i></p></td><td id="0faee26f0cf7y" rowspan="1" colspan="1"><p jc="center" uuid="lfm8u8rsqp5finb847" id="949454def6ygj" style="text-align:center">是</p></td><td id="0faee2710cpsz" rowspan="1" colspan="1"><p uuid="lfm8u8rsiiibf6hhdvp" id="3e981181f0gga">请求类型：application/json 或者text/event-stream（开启 SSE 响应）</p></td><td id="0faee2730cdqk" rowspan="1" colspan="1"><p uuid="lfm8u8rsxmt8tokctn" id="b153a06606d9r">application/json</p></td></tr><tr id="0faee2750cr3b"><td id="0faee2780cani" rowspan="1" colspan="1"><p jc="left" uuid="lfm6kn5t7zb0wzw764" id="10c54c02fbuk4" style="text-align:left">Authorization</p></td><td id="0faf09400ck30" rowspan="1" colspan="1"><p jc="center" uuid="lfm6kn5t0onnyzck9sua" id="38de7632b1t10" style="text-align:center"><i>String</i></p></td><td id="0faf09420cy60" rowspan="1" colspan="1"><p jc="center" uuid="lfm6kn5tq49fzjo4eh" id="9bce189fa6zfd" style="text-align:center">是</p></td><td id="0faf09440cvlm" rowspan="1" colspan="1"><p uuid="lfm6kn5tcr1xvtkfl8" id="b252d09614p96">API-Key，例如：Bearer d1**2a</p></td><td id="0faf09460cnz8" rowspan="1" colspan="1"><p uuid="lfm6kn5t8h93yg1gaum" id="93790ccfbdnr5">Bearer d1**2a</p></td></tr><tr id="0faf09480ctaj"><td id="0faf094b0ckl9" rowspan="1" colspan="1"><p jc="left" uuid="lglmq0vat5k19zky6i" id="c56d8c74a3u95" style="text-align:left">X-DashScope-SSE</p></td><td id="0faf094d0c5yd" rowspan="1" colspan="1"><p jc="center" uuid="lglmq0valxmzj7yr2qo" id="30a82006cdild" style="text-align:center"><i>String</i></p></td><td id="0faf094f0c1nj" rowspan="1" colspan="1"><p jc="center" uuid="lglmqe25zns7ujb6s2" id="f0f17fa251s8e" style="text-align:center">否</p></td><td id="0faf09510c70x" rowspan="1" colspan="1"><p uuid="lglmqe25i4i0i8nedp" id="5948f025c5cm2">跟Accept: text/event-stream 二选一即可启用SSE响应</p></td><td id="0faf09530c370" rowspan="1" colspan="1"><p uuid="lglmqe2502rpb57nwku6" id="5362a2701avas">enable</p></td></tr><tr id="0faf09620cxsj"><td id="0faf09630c4te" rowspan="10" colspan="1"><p jc="center" uuid="lfm6jnuwr6kk44kprtl" id="ecc618cc7enf7" style="text-align:center">Body</p></td><td id="0faf09650cj1v" rowspan="1" colspan="1"><p jc="left" uuid="lfm6htfombcyu7tdz6g" id="a48f9c1b1f9gt" style="text-align:left">model</p></td><td id="0faf09670czvk" rowspan="1" colspan="1"><p jc="center" uuid="lfm6htfo0t9jdwto924" id="f88aa6ceaapzv" style="text-align:center"><i>String</i></p></td><td id="0faf09690cwz4" rowspan="1" colspan="1"><p jc="center" uuid="lfm6htfolhea5jjl4x" id="2f31c72625bap" style="text-align:center">是</p></td><td id="0faf096b0ceov" rowspan="1" colspan="1"><p uuid="lfm6htfo53zoelms5df" id="a35673a758kp0">指明需要调用的模型</p></td><td id="0faf096d0c6kg" rowspan="1" colspan="1"><p id="ab2e3fc4b13zq">qwen-vl-plus</p></td></tr><tr id="0faf096f0chr5" style="height:92px"><td id="8e544b8043yw2" rowspan="1" colspan="1"><p jc="center" uuid="llq215m8t3pfsq1u0go" id="5cd09d7349vp9" style="text-align:center">input.messages[list]</p></td><td id="8e5499a143e2j" rowspan="1" colspan="1"><p jc="center" uuid="llq215m8fqw007qen9w" id="c39260cba3fcf" style="text-align:center"><i>Array</i></p></td><td id="8e550ed143i8u" rowspan="1" colspan="1"><p jc="center" uuid="lfm6htfolhea5jjl4x" id="fb5eeea1d7wx8" style="text-align:center">是</p></td><td id="baad71c14323c" rowspan="1" colspan="1"><p uuid="llq215m89tm14bwbm4s" id="a3a4119e09k3p">多模态场景下的输入信息</p></td><td id="0faf097a0c6fd" rowspan="5" colspan="1"><p id="a3ba57d98ftka">"messages":[</p><p uuid="llq229mqbu3l2az1tv4" id="79ba5431c65uv">{</p><p uuid="llq229mrwak6mxoh9zk" id="5eae1fc075x61"> "role": "user",</p><p uuid="llq229mr8sz2fwluuh8" id="2d189f1763tx4"> "content": [</p><p uuid="llq229ms3q6epuddf33" id="8f6821eed8sma"> {"image": "<a class="" href="http://XXXX">http://XXXX</a>"},</p><p uuid="llq229msfv0he3vnb1f" id="beb1de49f8taa"> {"text": "这个图片是哪里？"}</p><p uuid="llq229muivmhixb62l" id="5b77a5d15dixh"> ]</p><p uuid="llq8tzl9eay860gn2no" id="64aaf407745h9">}]</p></td></tr><tr id="7becd6b043toh"><td id="8e555cf143tag" rowspan="1" colspan="1"><p jc="center" uuid="llq24ywquzh28rappl" id="0b1e17b3cclp2" style="text-align:center">input.message[x].role</p></td><td id="8e55ab1143fpb" rowspan="1" colspan="1"><p jc="center" uuid="llq24ywqdh9y02as4d4" id="16facb3f97d8j" style="text-align:center"><i>String</i></p></td><td id="8e56204043rj4" rowspan="1" colspan="1"><p jc="center" uuid="lfm6htfolhea5jjl4x" id="c9e20dc8aarhw" style="text-align:center">是</p></td><td id="baade6f043kth" rowspan="1" colspan="1"><p uuid="llq24ywqzigs66tgthr" id="38b5084ff81o7">信息来源</p></td></tr><tr id="815b5f4043ic4"><td id="8e577fd1432wm" rowspan="1" colspan="1"><p jc="center" uuid="ljm8ibl9lj3i6ez5emr" id="ac49fa4430ow0" style="text-align:center">input.message[x].content[list]</p></td><td id="8e57cdf14378k" rowspan="1" colspan="1"><p jc="center" uuid="ljm8ibl92gx2yi90lll" id="8e55edea42bak" style="text-align:center"><i>Array</i></p></td><td id="8e581c1143vke" rowspan="1" colspan="1"><p jc="center" uuid="lfm6htfolhea5jjl4x" id="e241e27f950mj" style="text-align:center">是</p></td><td id="baae833043cci" rowspan="1" colspan="1"><p uuid="ljm8ibl9e6i0q1k93vr" id="a3ac482d46apa">contents 列表中包含本次输入的内容列表，每一个列表可以分别是图像（image）或者文本（text）</p></td></tr><tr id="8287aa4043h95"><td id="8e58b85143m0s" rowspan="1" colspan="1"><p jc="center" uuid="ljm8ibl8oc5jj5ddxfh" id="1d658a6289pdn" style="text-align:center">input.message[x].contents[list].image</p></td><td id="8e59067143pg7" rowspan="1" colspan="1"><p jc="center" uuid="ljm8ibl8vwqkm5mpq4" id="20b518c575apw" style="text-align:center"><i>String</i></p></td><td id="8e597ba043qf8" rowspan="2" colspan="1"><p jc="center" uuid="lfm6htfolhea5jjl4x" id="e6895b741dgpx" style="text-align:center">至少包含一项</p></td><td id="baaed15143efw" rowspan="1" colspan="1"><p uuid="ljm8ibl8rkqj7hmm51" id="af4d650c40jb5">本次输入的图像内容的 url 链接；图像格式目前支持：bmp, jpg, jpeg, png 和 tiff。</p></td></tr><tr id="83d7f800436b9"><td id="8e59c9c043r5i" rowspan="1" colspan="1"><p jc="center" uuid="ll1n3zfbimz5yncnxy" id="04442f5691rzr" style="text-align:center">input.message[x].contents[list].text</p></td><td id="8e5a660043lw7" rowspan="1" colspan="1"><p jc="center" uuid="ll1n3zfdszu2otjeudm" id="d83723c562pu8" style="text-align:center"><i>String</i></p></td><td id="baaf1f7143p3c" rowspan="1" colspan="1"><p uuid="ll1n3zfme3t2ivmoqul" id="91a0d597d1hnc">本次输入的文本内容；支持 utf-8 编码的中文、英文输入。</p></td></tr><tr id="0faf097c0ccpw"><td id="0faf097f0cmvq" rowspan="1" colspan="1"><p jc="left" uuid="li13bnun0tv5g4qpd2d" id="b1086f9eabzwy" style="text-align:left">parameters.top_p</p></td><td id="0faf09810c3l1" rowspan="1" colspan="1"><p jc="center" uuid="li13bnunddu1ersrwg8" id="68be2e1176j2a" style="text-align:center"><i>Float</i></p></td><td id="0faf30500c6c7" rowspan="1" colspan="1"><p jc="center" uuid="li13bnunmyzv6wsiazs" id="1c65a2587fzi3" style="text-align:center">否</p></td><td id="0faf30520c8rf" rowspan="1" colspan="1"><p id="e991ff599fu6f">生成时，核采样方法的概率阈值。例如，取值为0.8时，仅保留累计概率之和大于等于0.8的概率分布中的token，作为随机采样的候选集。取值范围为(0,1.0)，取值越大，生成的随机性越高；取值越低，生成的随机性越低。默认值 0.8。注意，取值不要大于等于1</p></td><td id="0faf30540c1p3" rowspan="1" colspan="1"><p uuid="li13bnuno5hwmlzw3vb" id="84abcba85fcbz">0.8</p></td></tr><tr id="becc98700cmpg"><td id="becc98740cj3z" rowspan="1" colspan="1"><p id="198ad034b0ncb">parameters.top_k</p></td><td id="becc98760c0t4" rowspan="1" colspan="1"><p jc="center" id="a7a07234020y8" style="text-align:center"><i>Integer</i></p></td><td id="beccbf810cvp4" rowspan="1" colspan="1"><p jc="center" id="f3a4750f1fklt" style="text-align:center">否</p></td><td id="beccbf830c1gs" rowspan="1" colspan="1"><p id="e53e0a6bffmho">生成时，采样候选集的大小。例如，取值为50时，仅将单次生成中得分最高的50个token组成随机采样的候选集。取值越大，生成的随机性越高；取值越小，生成的确定性越高。注意：如果top_k的值大于100，top_k将采用默认值100</p></td><td id="beccbf850c7ag" rowspan="1" colspan="1"><p id="5d8b58e790v1y">50</p></td></tr><tr id="c077fe800cfpx"><td id="c07825930cl37" rowspan="1" colspan="1"><p id="527d9ed386ujk">parameters.seed</p></td><td id="c07825950cng0" rowspan="1" colspan="1"><p jc="center" id="d8cb41914b1sy" style="text-align:center"><i>Integer</i></p></td><td id="c07825970c1oj" rowspan="1" colspan="1"><p jc="center" id="58e315c6f15fd" style="text-align:center">否</p></td><td id="c07825990cqdo" rowspan="1" colspan="1"><p id="b13807570824y">生成时，随机数的种子，用于控制模型生成的随机性。如果使用相同的种子，每次运行生成的结果都将相同；当需要复现模型的生成结果时，可以使用相同的种子。seed参数支持无符号64位整数类型。默认值 1234</p></td><td id="c078259b0c2c6" rowspan="1" colspan="1"><p id="2516969415rbf">65535</p></td></tr><tr id="270d9c11f69n5"><td id="d9cc5f270afi7" rowspan="1" colspan="1"><p id="21049ead1du34">parameters.incremental_output</p></td><td id="45c866cb22zc7" rowspan="1" colspan="1"><p jc="center" id="268f5e7a5ciwl" style="text-align:center"><i>Bool</i></p></td><td id="32448ecaa4cqz" rowspan="1" colspan="1"><p jc="center" id="a6b880011dnah" style="text-align:center">否</p></td><td id="74480cbf45e7k" rowspan="1" colspan="1"><p id="e0201823c18g5">是否使用增量输出。当使用增量输出时每次流式返回的序列仅包含最新生成的增量内容，默认值为false，即输出完整的全量内容</p></td><td id="26865ae988mmu" rowspan="1" colspan="1"><p id="6c0b7fb5f2g2k"></p></td></tr></tbody></table><p id="b49c3b27fbqbq"></p><h3 id="58595f510c3zl"><b>出参描述</b></h3><table id="58595f520cttk" tablewidth="674" tablecolswidth="164 72 205 231" autofit="false" class="table"><colgroup colwidth="0.98*" style="width:24.33%"></colgroup><colgroup colwidth="0.43*" style="width:10.68%"></colgroup><colgroup colwidth="1.22*" style="width:30.42%"></colgroup><colgroup colwidth="1.38*" style="width:34.27%"></colgroup><tbody class="tbody"><tr id="58595f530c04c"><td id="58595f540cyrs" rowspan="1" style="background-color:#e5e5e5" colspan="1"><p jc="center" uuid="lfm651p6q9tlfx2102e" id="d8c241d226c70" style="text-align:center"><b>字段</b></p></td><td id="58595f560calt" rowspan="1" style="background-color:#e5e5e5" colspan="1"><p jc="center" uuid="lfm651p6xb64mv3xbf" id="cba7abbff3fmj" style="text-align:center"><b>类型</b></p></td><td id="58595f580ca49" rowspan="1" style="background-color:#e5e5e5" colspan="1"><p jc="center" uuid="lfm651p6qfhy59y0zli" id="dd0ce267926yo" style="text-align:center"><b>描述</b></p></td><td id="58595f5a0ca2i" rowspan="1" style="background-color:#e5e5e5" colspan="1"><p jc="center" uuid="lfm651p6eu498yzo2te" id="4f6885dadf0cq" style="text-align:center"><b>示例值</b></p></td></tr><tr id="58595f5c0c3yv" style="height:67px"><td id="58595f5d0crrq" rowspan="1" colspan="1"><p jc="left" uuid="lglmzbuc7aazs25dgdc" id="b86e382cefooe" style="text-align:left">output.choices[list]</p></td><td id="58595f5f0c64h" rowspan="1" colspan="1"><p jc="center" uuid="lglmzbudjlodpiitmff" id="88f18cc085448" style="text-align:center"><i>Array</i></p></td><td id="58595f610c30y" rowspan="1" colspan="1"><p jc="left" uuid="llq6to9w8fd3oppbxbh" id="a2674050d6rt8" style="text-align:left">模型为输入生成的完成选项列表。</p></td><td id="585986610c35e" rowspan="3" colspan="1"><p uuid="lglmzbugqzr6ll4mh99" id="800196ac4fege">"choices": [</p><p id="206be37581iwl"> {</p><p id="d1a19c6511ihy"> "finish_reason": null,</p><p id="3fd15c2ec2uun"> "message": {</p><p id="ce5a4c28ddc5q"> "role": "assistant",</p><p id="42decec3bb447"> "content": [</p><p id="40bf7ffb3dpqr"> {</p><p id="f6f3ffb210y9x"> "text": "这是一个"</p><p id="69eb9e57dfyh6"> }</p><p id="16e833d44e8is"> ]</p><p id="53d28a6a231uc"> }</p><p id="aa76b92659vsa"> }</p><p id="c403879ebc2ae"> ]</p></td></tr><tr id="7b991bf0431n4"><td id="7b991bf1437ar" rowspan="1" colspan="1"><p id="dc219f70fc6zt">output.choices[x].message.role</p></td><td id="7b991bf343nvi" rowspan="1" colspan="1"><p jc="center" id="d092b64abbv4k" style="text-align:center"><i>String</i></p></td><td id="7b991bf543rv0" rowspan="1" colspan="1"><p id="817de6550csp1">信息来源。</p></td></tr><tr id="d81f05b043dph"><td id="dc94131043ohg" rowspan="1" colspan="1"><p jc="center" uuid="llq7cbr11dkv2qwnfb6" id="fabecd5fe0vbj" style="text-align:center">output.choices[x].message.content</p></td><td id="dc946130432le" rowspan="1" colspan="1"><p jc="center" uuid="llq7cbr2n1lavqbxxpe" id="21e1c6deb4hsj" style="text-align:center"><i>Array</i></p></td><td id="dc948841436v3" rowspan="1" colspan="1"><p id="e2e75466cesrd" uuid="llq7cbr2wk2257n9e1">本次请求的算法输出内容，为list，内容为多个dict，key为内容类型，value为内容值</p></td></tr><tr id="585986630cgn0"><td id="585986640cjyi" rowspan="1" colspan="1"><p jc="left" id="7935d5ea27fcj" style="text-align:left">output.finish_reason</p></td><td id="585986660co21" rowspan="1" colspan="1"><p jc="center" id="3602bc8bf4wy9" style="text-align:center"><i>String</i></p></td><td id="585986680c1v6" rowspan="1" colspan="1"><p uuid="liy650858hvq8498h2n" id="73bbdd1c50hcg">有三种情况：正在生成时为null，生成结束时如果由于停止token导致则为stop，生成结束时如果因为生成长度过长导致则为length。</p></td><td id="5859866a0c61m" rowspan="1" colspan="1"><p id="484b2087f3bk3">stop</p></td></tr><tr id="5859866c0cotx"><td id="5859866d0c0zi" rowspan="1" colspan="1"><p jc="left" uuid="lglmzbuhlrjcvzcqhur" id="8cc0522d9eqda" style="text-align:left">usage.output_tokens</p></td><td id="5859866f0ci79" rowspan="1" colspan="1"><p jc="center" uuid="lglmzbuizz1cyq2z9io" id="cf116d3951ji9" style="text-align:center"><i>Integer</i></p></td><td id="585986710c20h" rowspan="1" colspan="1"><p uuid="lglmzbujsu8sd1gk4f" id="4f35656f4ai32">本次请求算法输出内容的 token 数目。</p></td><td id="585986730cuyt" rowspan="1" colspan="1"><p uuid="lglmzbukr2wemmlrr7" id="d6afc90aa77i3">380</p></td></tr><tr id="585986750c3go"><td id="585986760cyn4" rowspan="1" colspan="1"><p jc="left" uuid="lgln0khuei4u5k9m4di" id="d173c94b53c63" style="text-align:left">usage.input_tokens</p></td><td id="585986780cb68" rowspan="1" colspan="1"><p jc="center" uuid="lgln0khujmmy00hve07" id="3aed88d1822fa" style="text-align:center"><i>Integer</i></p></td><td id="5859867a0cpi5" rowspan="1" colspan="1"><p uuid="lgln0khu1mfzghh0guy" id="e25809965auo9">本次请求输入内容的 token 数目。在打开了搜索的情况下，输入的 token 数目因为还需要添加搜索相关内容支持，所以会超出客户在请求中的输入。 </p></td><td id="5859867c0cu8l" rowspan="1" colspan="1"><p uuid="lgln0khukvkg02jwf5" id="32632f3fc3tdl">633</p></td></tr><tr id="5859867e0ci0y"><td id="5859867f0ctb5" rowspan="1" colspan="1"><p jc="left" uuid="lfm651p63jrrji9cng9" id="1e94983b48llh" style="text-align:left">request_id</p></td><td id="585986810cd5i" rowspan="1" colspan="1"><p jc="center" uuid="lfm651p6nlsy6ltx7er" id="dc1b6f6f74pc0" style="text-align:center"><i>String</i></p></td><td id="585986830ckcp" rowspan="1" colspan="1"><p uuid="lfm651p6729eo31ltt9" id="4473b81d5dm1f">本次请求的系统唯一码</p></td><td id="585986850cw9y" rowspan="1" colspan="1"><p uuid="lfm651p696sv077qik" id="8f1f79d5efkj0">7574ee8f-38a3-4b1e-9280-11c33ab46e51</p></td></tr></tbody></table><p id="e9cd00b5d5xz7"></p><h3 id="060dfa900ch9h"><b>请求示例</b>（SSE 关闭）</h3><p id="e0324da98eueu">以下示例展示通过CURL命令来调用通义千问-VL模型的脚本（SSE 关闭）。</p><div type="note" id="858d8002fbklf" class="note note-note"><div class="note-icon-wrapper"><i class="icon-note note note"></i></div><div class="noteContentSpan"><strong>说明 </strong><p id="22c9ea6eadl2q">需要使用您的API-KEY替换示例中的<i> your-dashscope-api-key </i>，代码才能正常运行。</p></div></div><p id="31d1a8b596pou"></p><div outputclass="tabbed-codeblock" data-tag="fig" id="25745d62fb67t" class="tabbed-codeblock-box"><div class="tab-box"></div><input type="radio" name="check-25745d62fb67t" id="25745d62fb67t-shell-tab" checked=""><label for="25745d62fb67t-shell-tab">Shell</label><div class="codeblock-item"><pre id="25745d63fb5bz" data-tag="codeblock" outputclass="language-shell" class="pre codeblock language-shell"><code>curl --location 'https://dashscope.aliyuncs.com/api/v1/services/aigc/multimodal-generation/generation' \
--header 'Authorization: Bearer YOUR_DASHSCOPE_ACCESS_TOKEN' \
--header 'Content-Type: application/json' \
--data '{
    "model": "qwen-vl-plus",
    "input":{
        "messages":[
            {
                "role": "system",
                "content": [
                    {"text": "You are a helpful assistant."}
                ]
            },
            {
                "role": "user",
                "content": [
                    {"image": "https://dashscope.oss-cn-beijing.aliyuncs.com/images/dog_and_girl.jpeg"},
                    {"text": "这个图片是哪里？"}
                ]
            }
        ]
    },
    "parameters": {
    }
}'</code></pre></div></div><h3 id="d647dd20fb5t4">响应示例（SSE关闭）</h3><div outputclass="tabbed-codeblock" data-tag="fig" id="c5d07880fbxig" class="tabbed-codeblock-box"><div class="tab-box"></div><input type="radio" name="check-c5d07880fbxig" id="c5d07880fbxig-json-tab" checked=""><label for="c5d07880fbxig-json-tab">JSON</label><div class="codeblock-item"><pre id="c5d0c6a0fbf9b" data-tag="codeblock" outputclass="language-json" class="pre codeblock language-json"><code>{
    "output": {
        "choices": [
            {
                "finish_reason": "stop",
                "message": {
                    "role": "assistant",
                    "content": [
                        {
                            "text": "这个图片是拍摄于一个海滩，可以看到远处的海浪和日落的天空。"
                        }
                    ]
                }
            }
        ]
    },
    "usage": {
        "output_tokens": 19,
        "input_tokens": 1279,
        "image_tokens": 680
    },
    "request_id": "b042e72d-7994-97dd-b3d2-7ee7e0140525"
}</code></pre></div></div><p id="3332a1cc37sa7"></p><h3 id="90ebe270f8rte"><b>请求示例（</b>SSE开启<b>）</b></h3><p id="0aba54a493kt6">以下示例展示通过CURL命令来调用通义千问-VL模型的脚本（SSE 开启）。</p><div type="note" id="19f7c932fbxae" class="note note-note"><div class="note-icon-wrapper"><i class="icon-note note note"></i></div><div class="noteContentSpan"><strong>说明 </strong><p id="01abf3ede8d9m">需要使用您的API-KEY替换示例中的<i> your-dashscope-api-key </i>，代码才能正常运行。</p></div></div><p id="536cb3b8e5muw"></p><div outputclass="tabbed-codeblock" data-tag="fig" id="c2610470f8al9" class="tabbed-codeblock-box"><div class="tab-box"></div><input type="radio" name="check-c2610470f8al9" id="c2610470f8al9-shell-tab" checked=""><label for="c2610470f8al9-shell-tab">Shell</label><div class="codeblock-item"><pre id="c2612b80f8p60" data-tag="codeblock" outputclass="language-shell" class="pre codeblock language-shell"><code>curl --location 'https://dashscope.aliyuncs.com/api/v1/services/aigc/multimodal-generation/generation' \
--header 'Authorization: Bearer YOUR_DASHSCOPE_ACCESS_TOKEN' \
--header 'Content-Type: application/json' \
--header 'X-DashScope-SSE: enable' \
--data '{
    "model": "qwen-vl-plus",
    "input":{
        "messages":[
            {
                "role": "system",
                "content": [
                    {"text": "You are a helpful assistant."}
                ]
            },
            {
                "role": "user",
                "content": [
                    {"image": "https://dashscope.oss-cn-beijing.aliyuncs.com/images/dog_and_girl.jpeg"},
                    {"text": "这个图片是哪里？"}
                ]
            }
        ]
    },
    "parameters": {
    }
}'</code></pre></div></div><h3 id="0a73f1f0f8mvr"><b>响应示例（</b>SSE开启<b>）</b></h3><div outputclass="tabbed-codeblock" data-tag="fig" id="14a336e0f8c3p" class="tabbed-codeblock-box"><div class="tab-box"></div><input type="radio" name="check-14a336e0f8c3p" id="14a336e0f8c3p-json-tab" checked=""><label for="14a336e0f8c3p-json-tab">JSON</label><div class="codeblock-item"><pre id="14a35df0f87br" outputclass="language-json" data-tag="codeblock" height="335" class="pre codeblock language-json"><code>id:1
event:result
data:{"output":{"choices":[{"finish_reason":"null","message":{"role":"assistant","content":"这个"}}]},"usage":{"output_tokens":3,"input_tokens":85, "image_tokens": 32},"request_id":"1117fb64-5dd9-9df0-a5ca-d7ee0e97032d"}

id:2
event:result
data:{"output":{"choices":[{"finish_reason":"null","message":{"role":"assistant","content":"这个图片描述"}}]},"usage":{"output_tokens":12,"input_tokens":85, "image_tokens": 32},"request_id":"1117fb64-5dd9-9df0-a5ca-d7ee0e97032d"}

... ... ... ...
... ... ... ...

id:8
event:result
data:{"output":{"choices":[{"finish_reason":"stop","message":{"role":"assistant","content":"这个图片描述的是一个公园里的 ... ... "}}]},"usage":{"output_tokens":51,"input_tokens":85, "image_tokens": 32},"request_id":"1117fb64-5dd9-9df0-a5ca-d7ee0e97032d"}</code></pre></div></div><p uuid="lfm9tgziscik1t4xfuo" id="b264977c279bf"></p><h3 uuid="liy8x94gfg065cxiecm" id="0ea417000ckjs"><b>异常响应示例</b></h3><p uuid="lgln3pbihbfwumu9trv" id="32a13ef2200ms">在访问请求出错的情况下，输出的结果中会通过 code 和 message 指明出错原因。</p><pre id="0e429f70f8tm1" uuid="lfm9tgzjkvr03ehypoo" data-tag="codeblock" outputclass="language-json" class="pre codeblock language-json"><code>{
    "code":"InvalidApiKey",
    "message":"Invalid API-key provided.",
    "request_id":"fb53c4ec-1c12-4fc4-a580-cdb7c3261fc1"
}</code></pre></section><p id="9bda471ebfcs9"></p><h2 id="762d6540d5ep1"><b>状态码说明</b></h2><p id="8d36810727iwo">DashScope灵积模型服务通用状态码请查阅：<a title="" class="xref" href="/zh/dashscope/response-status-codes">返回状态码说明</a></p></section></div></main>

</div></div><div id="help-doc-feedback"><div class="FeedbackButton--feedbackContainer--v2ywOOX aliyun-docs-feedback"><div class="FeedbackButton--feedbackButtonContainer--MHnR42I"><button class="FeedbackButton--iconButton--v243wMx"><i class="iconfont icon-tag-empty"></i></button><button class="FeedbackButton--iconButton--v243wMx"><i class="iconfont icon-tag-empty" style="display:inline-block;transform:rotateX(-180deg)"></i></button><span class="FeedbackButton--clickButton--ZUiZLGR">反馈</span><span class="FeedbackButton--expandButton--TBop0dP" style="transform:"><i class="iconfont icon-zhankai1"></i></span></div></div></div><div class="aliyun-docs-pagination NextPage--pagination--wQZfrKo"></div></div><div class="RecommendDoc--container--IhRK6Om"><div class="help-footer-recommend"></div></div></section><div class="aliyun-docs-synopsis" id="aliyun-docs-synopsis"><div class="aliyun-docs-synopsis-content"><ul class="Outline--synopsisBox--xky1vdf"><li class="Outline--synopsisTitle--IV20Ewq">本页导读<span class="Outline--docTip--olNCqhv"> （0）</span></li><div class="Outline--itemContainer--dmAlKa6"></div></ul></div></div></div><div><div id="selection-feedback-tooltip" class="PcLayout--selectionFeedback--feeu36H"><div class="PcLayout--box--b4VYWuP"><i class="iconfont icon-bianji"></i>文档反馈</div></div></div></main></div></div></div></div>
  <footer><div id="557376fd2f98db5dc1ccf6619b7ddaee"><div class="ace-homepage-2020-hmod-footer pc"><div class="inner"><div class="services"><div class="homepage-footer-main-services"><div class="ali-main-services"><span class="ali-main-services-title">为什么选择阿里云</span><a class="ali-main-services-link" href="https://www.aliyun.com/about/what-is-cloud-computing" target="_blank">什么是云计算</a><a class="ali-main-services-link" href="https://infrastructure.aliyun.com/" target="_blank">全球基础设施</a><a class="ali-main-services-link" href="https://www.aliyun.com/why-us/leading-technology" target="_blank">技术领先</a><a class="ali-main-services-link" href="https://www.aliyun.com/why-us/reliability" target="_blank">稳定可靠</a><a class="ali-main-services-link" href="https://www.aliyun.com/why-us/security-compliance" target="_blank">安全合规</a><a class="ali-main-services-link" href="https://www.aliyun.com/analyst-reports" target="_blank">分析师报告</a></div><div class="ali-main-services"><span class="ali-main-services-title">产品和定价</span><a class="ali-main-services-link" href="https://www.aliyun.com/product/list" target="_blank">全部产品</a><a class="ali-main-services-link" href="https://free.aliyun.com/" target="_blank">免费试用</a><a class="ali-main-services-link" href="https://www.aliyun.com/product/news" target="_blank">产品动态</a><a class="ali-main-services-link" href="https://www.aliyun.com/price" target="_blank">产品定价</a><a class="ali-main-services-link" href="https://www.aliyun.com/price/product" target="_blank">价格计算器</a><a class="ali-main-services-link" href="https://www.aliyun.com/price/cost-management" target="_blank">云上成本管理</a></div><div class="ali-main-services"><span class="ali-main-services-title">解决方案</span><a class="ali-main-services-link" href="https://www.aliyun.com/solution/tech-solution" target="_blank">技术解决方案</a></div><div class="ali-main-services"><span class="ali-main-services-title">文档与社区</span><a class="ali-main-services-link" href="https://help.aliyun.com/" target="_blank">文档</a><a class="ali-main-services-link" href="https://developer.aliyun.com/" target="_blank">开发者社区</a><a class="ali-main-services-link" href="https://tianchi.aliyun.com/" target="_blank">天池大赛</a><a class="ali-main-services-link" href="https://edu.aliyun.com/" target="_blank">培训与认证</a></div><div class="ali-main-services"><span class="ali-main-services-title">权益中心</span><a class="ali-main-services-link" href="https://free.aliyun.com/" target="_blank">免费试用</a><a class="ali-main-services-link" href="https://university.aliyun.com/" target="_blank">高校计划</a><a class="ali-main-services-link" href="https://startup.aliyun.com/startups" target="_blank">企业扶持计划</a><a class="ali-main-services-link" href="https://promotion.aliyun.com/ntms/yunparter/index" target="_blank">推荐返现计划</a></div><div class="ali-main-services"><span class="ali-main-services-title">支持与服务</span><a class="ali-main-services-link" href="https://www.aliyun.com/service" target="_blank">基础服务</a><a class="ali-main-services-link" href="https://www.aliyun.com/service/supportplans" target="_blank">企业增值服务</a><a class="ali-main-services-link" href="https://www.aliyun.com/service/devopsimpl/devopsimpl_cloudmigration_public_cn" target="_blank">迁云服务</a><a class="ali-main-services-link" href="https://www.aliyun.com/notice" target="_blank">官网公告</a><a class="ali-main-services-link" href="https://status.aliyun.com/" target="_blank">健康看板</a><a class="ali-main-services-link" href="https://security.aliyun.com/trust" target="_blank">信任中心</a></div></div><div class="focus"><div class="ali-main-services-title">关注阿里云</div><div class="ali-main-services-desc">关注阿里云公众号或下载阿里云APP，关注云资讯，随时随地运维管控云服务</div><span><img alt="阿里云APP" src="https://img.alicdn.com/tfs/TB1UdKEM6TpK1RjSZKPXXa3UpXa-256-256.png" class="ali-official-code" loading="lazy"/></span><span><img alt="阿里云微信" src="https://img.alicdn.com/tfs/TB1AOdINW6qK1RjSZFmXXX0PFXa-258-258.jpg" class="ali-official-code" loading="lazy"/></span><div class="consult-text">联系我们：4008013260</div></div></div><div class="ali-about-container"><div class="about-link-wrap"><a class="ace-link ace-link-primary ali-about-link" href="https://help.aliyun.com/product/67275.html" target="_blank">法律声明</a><a class="ace-link ace-link-primary ali-about-link" href="https://terms.alicdn.com/legal-agreement/terms/platform_service/20220906101446934/20220906101446934.html" target="_blank">Cookies政策</a><a class="ace-link ace-link-primary ali-about-link" href="https://aliyun.jubao.alibaba.com/" target="_blank">廉正举报</a><a class="ace-link ace-link-primary ali-about-link" href="https://report.aliyun.com/" target="_blank">安全举报</a><a class="ace-link ace-link-primary ali-about-link" href="https://www.aliyun.com/contact" target="_blank">联系我们</a><a class="ace-link ace-link-primary ali-about-link" href="https://careers.aliyun.com/" target="_blank">加入我们</a></div><div class="friend-link-wrap"><a class="ace-link ace-link-primary ali-friend-link" href="https://www.alibabagroup.com/cn/global/home" target="_blank">阿里巴巴集团</a><a class="ace-link ace-link-primary ali-friend-link" href="https://www.taobao.com/" target="_blank">淘宝网</a><a class="ace-link ace-link-primary ali-friend-link" href="https://www.tmall.com/" target="_blank">天猫</a><a class="ace-link ace-link-primary ali-friend-link" href="https://www.aliexpress.com/" target="_blank">全球速卖通</a><a class="ace-link ace-link-primary ali-friend-link" href="https://www.alibaba.com/" target="_blank">阿里巴巴国际交易市场</a><a class="ace-link ace-link-primary ali-friend-link" href="https://www.1688.com/" target="_blank">1688</a><a class="ace-link ace-link-primary ali-friend-link" href="https://www.alimama.com/index.htm" target="_blank">阿里妈妈</a><a class="ace-link ace-link-primary ali-friend-link" href="https://www.fliggy.com/" target="_blank">飞猪</a><a class="ace-link ace-link-primary ali-friend-link" href="https://www.aliyun.com/" target="_blank">阿里云计算</a><a class="ace-link ace-link-primary ali-friend-link" href="https://www.alios.cn/" target="_blank">AliOS</a><a class="ace-link ace-link-primary ali-friend-link" href="https://wanwang.aliyun.com/" target="_blank">万网</a><a class="ace-link ace-link-primary ali-friend-link" href="https://mobile.amap.com/" target="_blank">高德</a><a class="ace-link ace-link-primary ali-friend-link" href="https://www.uc.cn/" target="_blank">UC</a><a class="ace-link ace-link-primary ali-friend-link" href="https://www.umeng.com/" target="_blank">友盟</a><a class="ace-link ace-link-primary ali-friend-link" href="https://www.youku.com/" target="_blank">优酷</a><a class="ace-link ace-link-primary ali-friend-link" href="https://www.dingtalk.com/" target="_blank">钉钉</a><a class="ace-link ace-link-primary ali-friend-link" href="https://www.alipay.com/" target="_blank">支付宝</a><a class="ace-link ace-link-primary ali-friend-link" href="https://damo.alibaba.com/" target="_blank">达摩院</a><a class="ace-link ace-link-primary ali-friend-link" href="https://world.taobao.com/" target="_blank">淘宝海外</a><a class="ace-link ace-link-primary ali-friend-link" href="https://www.aliyundrive.com/" target="_blank">阿里云盘</a><a class="ace-link ace-link-primary ali-friend-link" href="https://www.ele.me/" target="_blank">饿了么</a><div class="ali-copyright-text">© 2009-2024 Aliyun.com 版权所有 增值电信业务经营许可证： <a href="http://beian.miit.gov.cn/" target="_blank">浙B2-20080101</a> 域名注册服务机构许可： <a href="https://domain.miit.gov.cn/域名注册服务机构/互联网域名/阿里云计算有限公司 " target="_blank">浙D3-20210002</a> <a href="https://domain.miit.gov.cn/域名注册服务机构/互联网域名/阿里巴巴云计算北京有限公司 " target="_blank">京D3-20220015</a></div></div><div class="ali-report-wrap"><a class="ace-link ace-link-primary ali-report-link" href="https://terms.alicdn.com/legal-agreement/terms/c_platform_service_agreement/20230704140635655/20230704140635655.html" target="_blank"><img src="//gw.alicdn.com/tfs/TB1GxwdSXXXXXa.aXXXXXXXXXXX-65-70.gif" class="ali-report-img" loading="lazy"/></a><a class="ace-link ace-link-primary ali-report-link" href="http://www.beian.gov.cn/portal/registerSystemInfo" target="_blank"><img src="//img.alicdn.com/tfs/TB1..50QpXXXXX7XpXXXXXXXXXX-40-40.png" class="ali-report-img" loading="lazy"/><span class="ali-report-link-text">浙公网安备 33010602009975号</span></a><a class="ace-link ace-link-primary ali-report-link" href="https://beian.miit.gov.cn/" target="_blank"><span class="ali-report-link-text ali-report-link-text-unique">浙B2-20080101-4</span></a></div></div></div></div><div class="ace-homepage-2020-hmod-footer mobile"></div></div></footer>



<script>

  // 白屏时间埋点
  window.firstPaint = Date.now();
  const ssrFistPaintTime = firstPaint-performance.timing.navigationStart;
  var ssrTime = {
  product: 'help.aliyun.com', // 站点
  ua: navigator.userAgent, // ua
  device: 'pc', // 设备
  page: 'documentDetail', // 页面
  lang: 'zh', //站点语言
  cna: '', // 用户标识
  url: window.location.href,
  action: 'ssrFirstPaint',
  userParams1: ssrFistPaintTime,
  userParams2: window.firstPaint,
  userParams3: performance.timing.navigationStart
  };
  let queryStr = Object.keys(ssrTime).map(key => ssrTime[key] &&
    `${encodeURIComponent(key)}=${encodeURIComponent(ssrTime[key])}`).join('&');
  fetch('https://help-new.cn-wulanchabu.log.aliyuncs.com/logstores/web-tracking/track?APIVersion=0.6.0&' +
  queryStr);

  document.addEventListener("DOMContentLoaded", function(event) {
    // pcp上报
    window.ALIYUN_PERF && window.ALIYUN_PERF.report();
    window.ALIYUN_PERF && window.ALIYUN_PERF.getPCP().then(rst => {
    // pcp埋点
    var data = {
    product: 'help.aliyun.com', // 站点
    ua: navigator.userAgent, // ua
    device: 'pc', // 设备
    page: 'index', // 页面
    lang: 'zh', //站点语言
    cna: '', // 用户标识
    url: window.location.href,
    action: 'pcp',
    userParams1: rst || 0,
    };
    let queryStr = Object.keys(data).map(key => data[key] &&
      `${encodeURIComponent(key)}=${encodeURIComponent(data[key])}`).join('&');
    fetch('https://help-new.cn-wulanchabu.log.aliyuncs.com/logstores/web-tracking/track?APIVersion=0.6.0&' +
    queryStr);
    });
  });
</script>

<script crossorigin="" src="https://g.alicdn.com/code/lib/??react/16.8.6/umd/react.production.min.js,react-dom/16.8.6/umd/react-dom.production.min.js"></script>
<script src="https://g.alicdn.com/code/lib/lodash.js/4.17.21/lodash.min.js" crossorigin="anonymous"></script>

<script defer="" src="https://g.alicdn.com/aliyun-help/help-portal-fe/0.9.9/js/index.js"></script>
<script defer src="https://g.alicdn.com/aliyun-help/help-portal-fe/0.9.9/js/vendor.js"></script>
<script async="" src="https://g.alicdn.com/dawn/assets-loader/scripts/fast-login.js?tenantName=help-new-aliyun-com"></script>
<script async="" src="https://g.alicdn.com/aliyun/perf/js/index.js"></script>
<script src="https://g.alicdn.com/code/npm/@ali/??biu-loader/0.1.2/index.js,hmod-preact/0.0.1/index.js,hmod-preact-hooks/0.0.1/index.js,hmod-preact-compat/0.0.1/index.js,hmod-preact-bridge/0.1.1/index.js,hmod-ace-service-loader/0.1.1/index.js"></script>
<script src="https://g.alicdn.com/code/npm/@ali??hmod-ace-2023-box/0.1.0/index.js,hmod-ace-2023-service-contact-us/0.0.22/index.js,hmod-aliyun-com-global-nav-search/0.5.0/index.js,hmod-aliyun-com-global-nav/0.1.7/index.js"></script>
<script src="https://g.alicdn.com/aliyun-com/lowcode-engine/0.1.14/renderer/build/js/index.js"></script>
<script src="https://cloud-assets.alicdn.com/lowcode/entry/prod/e0974bcf049837efca77d4a1359f333a.js"></script>
<script src="https://g.alicdn.com/??dawn/user-tracker/2.0.66/js/index.js,aliyun/perf/js/index.js"></script>
</body></html>


##File: /home/winubuntu/projects/byzer-llm/src/byzerllm/saas/minimax/__init__.py
import logging
import requests
import json
import traceback
from enum import Enum
from dataclasses import dataclass

from typing import Optional, List, Dict, Union, Any,str,Any

import tenacity
from tenacity import (
    before_sleep_log,
    wait_exponential,
)

logger = logging.getLogger(__name__)

DEFAULT_BOT_SETTING = 'You are a helpful assistant. Think it over and answer the user question correctly.'


class MiniMaxError(Exception):
    def __init__(
            self,
            request_id=None,
            status_msg=None,
            status_code=None,
            http_body=None,
            http_status=None,
            json_body=None,
            headers=None,
    ):
        super(MiniMaxError, self).__init__(
            f"api return error, code: {status_code}, msg: {status_msg}"
        )

        if http_body and hasattr(http_body, "decode"):
            try:
                http_body = http_body.decode("utf-8")
            except BaseException:
                http_body = (
                    "<Could not decode body as utf-8. "
                    "Please contact us through our help center at https://api.minimax.chat>"
                )

        self._status_msg = status_msg
        self.http_body = http_body
        self.http_status = http_status
        self.json_body = json_body
        self.headers = headers or {}
        self.status_code = status_code
        self.request_id = self.headers.get("request-id", request_id)

     # saas/proprietary
    def get_meta(self):
        return [{
            "model_deploy_type": "saas",
            "backend":"saas"
        }]    

    def __str__(self):
        msg = self._status_msg or "<empty message>"
        if self.request_id is not None:
            return "Request {0}: {1}".format(self.request_id, msg)
        elif self.status_code is not None:
            return "API return error, code: {0}, msg: {1}".format(self.status_code, msg)
        else:
            return msg

    def __repr__(self):
        return "%s(message=%r, http_status=%r, request_id=%r)" % (
            self.__class__.__name__,
            self._status_msg,
            self.http_status,
            self.request_id,
        )


def _minimax_api_retry_if_need(exception):
    """
        look for details: https://api.minimax.chat/document/guides/chat-pro?id=64b79fa3e74cddc5215939f4

        1000: 未知错误
        1001: 超时
        1002: 触发RPM限流
        1004: 鉴权失败
        1008: 余额不足
        1013: 服务内部错误
        1027: 输出内容错误
        1039: 触发TPM限流
        2013: 输入格式信息不正常
    """
    if isinstance(exception, MiniMaxError):
        status_code = exception.status_code
        return (status_code == 1000
                or status_code == 1001
                or status_code == 1002
                or status_code == 1013
                or status_code == 1039)
    return False


class CustomSaasAPI:
    def __init__(self, infer_params: Dict[str, str]) -> None:
        self.api_key = infer_params["saas.api_key"]
        self.group_id = infer_params["saas.group_id"]
        self.model = infer_params.get("saas.model", "abab5.5-chat")
        self.api_url = infer_params.get("saas.api_url", "https://api.minimax.chat/v1/text/chatcompletion_pro")

    def stream_chat(
            self,
            tokenizer,
            ins: str,
            his: List[Dict[str,Any]],
            max_length: int = 4096,
            top_p: float = 0.7,
            temperature: float = 0.9,
            **kwargs
    ):
        glyph = kwargs.get('glyph', None)
        bot_settings = MiniMaxBotSettings()
        messages = MiniMaxMessages()

        for item in his:
            role, content = item['role'], item['content']
            if role == "system":
                bot_settings.append("Assistant", content)
                continue
            messages.append(content, role)

        if ins:
            messages.append(ins, MiniMaxMessageRole.USER)

        if bot_settings.is_empty():
            bot_settings.append("Assistant", DEFAULT_BOT_SETTING)

        payload = {
            "model": self.model,
            "messages": messages.to_list(),
            "tokens_to_generate": max_length,
            "temperature": temperature,
            "top_p": top_p,
            "sample_messages": [],
            "plugins": [],
            "bot_setting": bot_settings.to_list(),
            "reply_constraints": {
                "sender_type": "BOT",
                "sender_name": "Assistant"
            }
        }

        if glyph:
            payload['reply_constraints']['glyph'] = glyph

        print(f"【Byzer --> MiniMax({self.model})】: {payload}")

        content = None
        try:
            content = self.request_with_retry(payload)
        except Exception as e:
            traceback.print_exc()
            if content == "" or content is None:
                content = f"request minimax api failed: {e}"
        return [(content, "")]

    @tenacity.retry(
        reraise=True,
        retry=tenacity.retry_if_exception(_minimax_api_retry_if_need),
        stop=tenacity.stop_after_attempt(10),
        wait=wait_exponential(multiplier=1, min=4, max=10),
        before_sleep=before_sleep_log(logger, logging.WARNING),
    )
    def request_with_retry(self, payload):
        """Use tenacity to retry the completion call."""

        api_url = f"{self.api_url.removesuffix('/')}?GroupId={self.group_id}"

        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }

        response = requests.post(api_url, data=json.dumps(payload), headers=headers)
        if response.status_code == 200:
            res_data = json.loads(response.text)
            print(f"【MiniMax({self.model}) --> Byzer】: {res_data}")
            base_status_code = res_data['base_resp']['status_code']
            if base_status_code != 0:
                raise MiniMaxError(
                    request_id=res_data.get('id'),
                    status_code=base_status_code,
                    status_msg=res_data['base_resp']['status_msg'],
                    headers=headers,
                    http_status=response.status_code
                )
            content = res_data["reply"].strip()
            return content
        else:
            print(
                f"request failed with status code `{response.status_code}`, "
                f"headers: `{response.headers}`, "
                f"body: `{response.content!r}`"
            )
            raise MiniMaxError(headers=headers, http_status=response.status_code, http_body=response.text)


class MiniMaxMessageRole(str, Enum):
    """MiniMax Message role."""
    USER = "USER"
    BOT = "BOT"
    FUNCTION = "FUNCTION"


class MiniMaxBotSettings:
    """
    MiniMax BotSetting list of Chat model.
    Look for details: https://api.minimax.chat/document/guides/chat-pro
    """

    @dataclass
    class Setting:
        """
        MiniMax bot setting.
        """
        bot_name: str = ""
        content: str = ""

        def to_dict(self) -> dict:
            """
            Convert generic bot setting to dict.
            """
            return {
                "bot_name": self.bot_name,
                "content": self.content
            }

    def __init__(self) -> None:
        """
        Init MiniMaxBotSettings
        """
        self._bot_settings: List[MiniMaxBotSettings.Setting] = []

    def append(self, bot_name: str, content: Optional[str] = DEFAULT_BOT_SETTING) -> None:
        """
        append setting to settings_list
        """
        self._bot_settings.append(MiniMaxBotSettings.Setting(bot_name=bot_name, content=content))

    def to_list(self) -> List[Dict[str, Any]]:
        """
        convert bot settings to list
        """
        return [bot.to_dict() for bot in self._bot_settings]

    def is_empty(self) -> bool:
        """
        check settings is empty
        """
        return len(self._bot_settings) <= 0


class MiniMaxMessages:
    """
    MiniMax Message list of Chat model.
    Look for details: https://api.minimax.chat/document/guides/chat-pro
    """

    @dataclass
    class Message:
        """
        MiniMax Chat message.
        """
        sender_type: Union[str, MiniMaxMessageRole] = MiniMaxMessageRole.USER
        sender_name: str = ""
        text: Optional[str] = ""

        def to_dict(self) -> dict:
            """
            Convert generic message to MiniMax message dict.
            """
            sender_type = self.sender_type
            if isinstance(sender_type, str):
                sender_type = self._mapping_sender_type()
            return {
                "sender_type": sender_type.value,
                "sender_name": self.sender_name,
                "text": self.text
            }

        def _mapping_sender_type(self) -> MiniMaxMessageRole:
            if self.sender_type == "system" or self.sender_type == "assistant":
                return MiniMaxMessageRole.BOT
            if self.sender_type == "function":
                return MiniMaxMessageRole.FUNCTION
            return MiniMaxMessageRole.USER

    def __init__(self, bot_name_mapping: Optional[dict] = None) -> None:
        """
        Init MiniMaxMessages
        """
        self._msg_list: List[MiniMaxMessages.Message] = []
        self._bot_name_mapping: dict = {
            "USER": "User",
            "user": "User",
            "BOT": "Assistant",
            "system": "Assistant",
            "assistant": "Assistant"
        } if bot_name_mapping is None else bot_name_mapping

    def append(
            self,
            message: str,
            sender_type: Optional[Union[str, MiniMaxMessageRole]] = None,
            sender_name: Optional[str] = None,
    ) -> None:
        """
        append message to message_list
        """
        sender_type = sender_type if sender_type is not None else MiniMaxMessageRole.USER
        if sender_name is None:
            sender_name = self._bot_name_mapping.get(sender_type) if sender_type in self._bot_name_mapping else "User"
        msg = MiniMaxMessages.Message(
            sender_type=sender_type,
            sender_name=sender_name,
            text=message
        )
        self._msg_list.append(msg)

    def to_list(self) -> List[Dict[str, Any]]:
        """
        convert messages to list
        """
        return [msg.to_dict() for msg in self._msg_list]


##File: /home/winubuntu/projects/byzer-llm/src/byzerllm/saas/baichuan/__init__.py
import requests
import json
import time
import hashlib
import traceback
from retrying import retry
from typing import List, Tuple, Dict,Any

BaiChuanErrorCodes = {
    "0": "success",
    "1": "system error",
    "10000": "Invalid parameters, please check",
    "10100": "Missing apikey",
    "10101": "Invalid apikey",
    "10102": "apikey has expired",
    "10103": "Invalid Timestamp parameter in request header",
    "10104": "Expire Timestamp parameter in request header",
    "10105": "Invalid Signature parameter in request header",
    "10106": "Invalid encryption algorithm in request header, not supported by server",
    "10200": "Account not found",
    "10201": "Account is locked, please contact the support staff",
    "10202": "Account is temporarily locked, please try again later",
    "10203": "Request too frequent, please try again later",
    "10300": "Insufficient account balance, please recharge",
    "10301": "Account is not verified, please complete the verification first",
    "10400": "Topic violates security policy for prompts",
    "10401": "Topic violates security policy for answer",
    "10500": "Internal error",
}

class CustomSaasAPI:
    def __init__(self, infer_params: Dict[str, str]) -> None:
        self.api_key = infer_params["saas.api_key"]        
        self.model = infer_params.get("saas.model", "Baichuan2-Turbo")        

        self.meta = {
            "model_deploy_type": "saas",
            "backend":"saas"
        }

        if "embedding" not in  self.model.lower():
            self.api_url = infer_params.get("saas.baichuan_api_url", "https://api.baichuan-ai.com/v1/chat/completions")
            self.model = infer_params.get("saas.model", "Baichuan2-Turbo")
            self.meta["embedding_mode"] = False 
        else:
            self.api_url = infer_params.get("saas.baichuan_api_url", "http://api.baichuan-ai.com/v1/embeddings")
            self.model = infer_params.get("saas.model", "Baichuan-Text-Embedding")
            self.meta["embedding_mode"] = True            
        

     # saas/proprietary
    def get_meta(self):
        return [self.meta]
    
    def embed_query(self, ins: str, **kwargs):
        '''
        curl http://api.baichuan-ai.com/v1/embeddings \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer $BAICHUNA_API_KEY" \
        -d '{
            "model": "Baichuan-Text-Embedding",
            "input": "百川大模型"
        }'
        '''        
        data = {
            "model": self.model,            
            "input": ins
        }      
        start_time = time.monotonic()
        res_data = self.request_with_retry(data)   
        time_cost = time.monotonic() - start_time
        return res_data["data"][0]["embedding"]
    
    
    async def async_stream_chat(self, tokenizer, ins: str, his: List[Dict[str, Any]] = [],
                    max_length: int = 4096,
                    top_p: float = 0.9,
                    temperature: float = 0.1, **kwargs):
        
        messages = his + [{"role": "user", "content": ins}]

        other_params = {}
        if "with_search_enhance" in kwargs:
            other_params["with_search_enhance"] = kwargs["with_search_enhance"]
        
        if "top_k" in kwargs:
            other_params["top_k"] = kwargs["top_k"]

        data = {
            "model": self.model,
            "messages": messages,
            "temperature": temperature,
            "top_p": top_p,
            "stream": False,
            **other_params
        }        
        
        start_time = time.monotonic()
        res_data = self.request_with_retry(data)   
        time_cost = time.monotonic() - start_time
        generated_text = res_data["choices"][0]["message"]["content"] 

        generated_tokens_count = res_data["usage"]["completion_tokens"]   

        return [(generated_text,{"metadata":{
        "request_id":res_data["id"],
        "input_tokens_count":res_data["usage"]["prompt_tokens"],
        "generated_tokens_count":generated_tokens_count,
        "time_cost":time_cost,
        "first_token_time":0,
        "speed":float(generated_tokens_count)/time_cost,        
    }})]                 
        
    @retry(wait_exponential_multiplier=1000, wait_exponential_max=10000, stop_max_attempt_number=3)
    def request_with_retry(self, data):
        json_data = json.dumps(data)        
        headers = {
            "Content-Type": "application/json",
            "Authorization": "Bearer " + self.api_key,            
        }
        response = requests.post(self.api_url, data=json_data, headers=headers)
        if response.status_code == 200:
            # id = response.headers.get("X-BC-Request-Id")            
            res_data = json.loads(response.text)                                                   
            return res_data


        else:
            print("request baichuan api failed, http response code:" + str(response.status_code))
            print("response text:" + response.text)
            raise Exception("request baichuan api failed")




##File: /home/winubuntu/projects/byzer-llm/src/byzerllm/saas/chatglm/__init__.py
from wudao.api_request import executeSSE, getToken, queryTaskResult
from random import randint
import time
import uuid

from typing import Union, List, Tuple, Optional, Dict,Any

def randomTaskCode():
    return "%019d" % randint(0, 10**19)

class ChatGLMAPI:
    def __init__(self,api_key:str, public_key:str,params:Dict[str,str]={}) -> None:
        self.api_key = api_key if api_key else params.get("saas.api_key","")
        self.public_key = public_key if public_key else params.get("saas.public_key","")
        self.ability_type = "chatGLM"
        self.engine_type = "chatGLM"
        self.temp_token = None

     # saas/proprietary
    def get_meta(self):
        return [{
            "model_deploy_type": "saas",
            "backend":"saas"
        }]    

    def get_token_or_refresh(self):
        token_result = getToken(self.api_key, self.public_key)
        if token_result and token_result["code"] == 200:
            token = token_result["data"]
            self.temp_token = token
        else:
            raise Exception("Fail to get token from ChatGLMAPI. Check api_key/public_key")    
        return self.temp_token    
    
    def stream_chat(self,tokenizer,ins:str, his:List[Dict[str,Any]]=[],  
        max_length:int=4096, 
        top_p:float=0.7,
        temperature:float=0.9,**kwargs): 

        q = []
        for item in his:    
            q.append(item["user"])
            q.append(item["assistant"])

        data = {
                    "top_p": top_p,
                    "temperature": temperature,                    
                    "risk": 0.15,                    
                    "requestTaskNo": randomTaskCode(),                                        
                    "prompt": ins,
                    "history": q                    
                }          
        token = self.temp_token if self.temp_token  else self.get_token_or_refresh()
        resp = executeSSE(self.ability_type, self.engine_type, token, data)                

        output_text = ""
        for event in resp.events():
            if event.data:
                output_text = event.data
            elif event.event == "error":
                token = self.get_token_or_refresh()
                break
                
        return [(output_text,"")]






##File: /home/winubuntu/projects/byzer-llm/src/byzerllm/saas/official_openai/__init__.py

from typing import List, Tuple, Dict,Any
import httpx
from openai import OpenAI   

class CustomSaasAPI:    

    def __init__(self, infer_params: Dict[str, str]) -> None:
             
        self.api_key = infer_params["saas.api_key"]        
        self.model = infer_params.get("saas.model","gpt-3.5-turbo-1106")
        
        other_params = {}

        if "saas.api_base" in infer_params:
            other_params["api_base"] = infer_params["saas.api_base"]
        
        if "saas.api_version" in infer_params:
            other_params["api_version"] = infer_params["saas.api_version"]
        
        if "saas.api_type" in infer_params:
            other_params["api_type"] = infer_params["saas.api_type"]

        if "saas.base_url" in infer_params:
            other_params["base_url"] = infer_params["saas.base_url"]    

        if "saas.timeout" in infer_params:
            other_params["timeout"] = float(infer_params["saas.timeout"]    )
        
        self.max_retries = int(infer_params.get("saas.max_retries",10))
                    

        self.proxies = infer_params.get("saas.proxies", None)
        self.local_address = infer_params.get("saas.local_address", "0.0.0.0")
                
        
        if self.proxies is None or self.proxies == "":
            self.client = OpenAI(**other_params,api_key=self.api_key)  
        else:
            self.client = OpenAI(**other_params,api_key=self.api_key,http_client=httpx.Client(
                proxies=self.proxies,
                transport=httpx.HTTPTransport(local_address=self.local_address)))                        
    
        

    # saas/proprietary
    def get_meta(self):
        return [{
            "model_deploy_type": "saas",
            "backend":"saas"
        }]

    def stream_chat(self, tokenizer, ins: str, his: List[Dict[str, Any]] = [],
                    max_length: int = 4096,
                    top_p: float = 0.7,
                    temperature: float = 0.9, **kwargs):

        model = self.model
        max_retries = self.max_retries

        if "model" in kwargs:
            model = kwargs["model"]
        if "max_retries" in kwargs:
            max_retries = kwargs["max_retries"]

        messages = his + [{"role": "user", "content": ins}]
        
        try:
            response = self.client.chat.completions.create(
                                messages=messages,
                                model=model,
                                max_tokens=max_length,
                                temperature=temperature,
                                top_p=top_p                            
                            )

            res = response.choices[0].message.content
            return [(res, "")]
        except Exception as e:
            print(f"Error: {e}")
            raise e


##File: /home/winubuntu/projects/byzer-llm/src/byzerllm/saas/azure_openai/__init__.py
from typing import List, Tuple, Dict,Any

import openai
from byzerllm.utils.openai_utils import completion_with_retry


class CustomSaasAPI:
    def __init__(self, infer_params: Dict[str, str]) -> None:
        self.api_type = infer_params["saas.api_type"]
        self.api_key = infer_params["saas.api_key"]
        self.api_base = infer_params["saas.api_base"]
        self.api_version = infer_params["saas.api_version"]
        self.deployment_id = infer_params["saas.deployment_id"]
        openai.api_type = infer_params["saas.api_type"]
        openai.api_key = infer_params["saas.api_key"]
        openai.api_base = infer_params["saas.api_base"]
        openai.api_version = infer_params["saas.api_version"]

        self.max_retries = 10

     # saas/proprietary
    def get_meta(self):
        return [{
            "model_deploy_type": "saas",
            "backend":"saas"
        }]    

    def stream_chat(self, tokenizer, ins: str, his: List[Dict[str, Any]] = [],
                    max_length: int = 4096,
                    top_p: float = 0.7,
                    temperature: float = 0.9, **kwargs):

        deployment_id = self.deployment_id
        max_retries = self.max_retries

        if "model" in kwargs:
            deployment_id = kwargs["model"]
        if "max_retries" in kwargs:
            max_retries = kwargs["max_retries"]

        messages = his + [{"role": "user", "content": ins}]

        response = None

        try:
            chat_completion = completion_with_retry(
                is_chat_model=True,
                max_retries=max_retries,
                messages=messages,
                deployment_id=deployment_id,
                temperature=temperature,
                top_p=top_p,
                max_tokens=max_length
            )
            response = chat_completion.choices[0]["message"]["content"].replace(' .', '.').strip()
        except Exception as e:
            print(f"request azure openai failed: {e}")
            response = f"Exception occurred during the request, please try again: {e}" \
                if response is None or response == "" else response

        return [(response, "")]


##File: /home/winubuntu/projects/byzer-llm/src/byzerllm/saas/sparkdesk/__init__.py
import _thread as thread
import base64
import datetime
import hashlib
import hmac
import json
from urllib.parse import urlparse
import ssl
from datetime import datetime
from time import mktime
from urllib.parse import urlencode
from wsgiref.handlers import format_date_time
from typing import List, Tuple,Dict,Any
import time
import queue

import websocket

reponse_queue = queue.Queue()

class SparkDeskAPIParams(object):
    # 初始化
    def __init__(self, APPID, APIKey, APISecret, gpt_url, DOMAIN):
        self.APPID = APPID
        self.APIKey = APIKey
        self.APISecret = APISecret
        self.host = urlparse(gpt_url).netloc
        self.path = urlparse(gpt_url).path
        self.gpt_url = gpt_url
        self.DOMAIN = DOMAIN

        # 生成url
    def create_url(self):
        # 生成RFC1123格式的时间戳
        now = datetime.now()
        date = format_date_time(mktime(now.timetuple()))

        # 拼接字符串
        signature_origin = "host: " + self.host + "\n"
        signature_origin += "date: " + date + "\n"
        signature_origin += "GET " + self.path + " HTTP/1.1"

        # 进行hmac-sha256进行加密
        signature_sha = hmac.new(self.APISecret.encode('utf-8'), signature_origin.encode('utf-8'),
                                 digestmod=hashlib.sha256).digest()

        signature_sha_base64 = base64.b64encode(signature_sha).decode(encoding='utf-8')

        authorization_origin = f'api_key="{self.APIKey}", algorithm="hmac-sha256", headers="host date request-line", signature="{signature_sha_base64}"'

        authorization = base64.b64encode(authorization_origin.encode('utf-8')).decode(encoding='utf-8')

        # 将请求的鉴权参数组合为字典
        v = {
            "authorization": authorization,
            "date": date,
            "host": self.host
        }
        # 拼接鉴权参数，生成url
        url = self.gpt_url + '?' + urlencode(v)
        # 此处打印出建立连接时候的url,参考本demo的时候可取消上方打印的注释，比对相同参数时生成的url与自己代码生成的url是否一致
        return url


class CustomSaasAPI:

    def __init__(self, infer_params: Dict[str, str]) -> None:
        required_params = [ "saas.appid", "saas.api_key", "saas.api_secret"]
        for param in required_params:
            if list(infer_params.keys()).count(param) < 1:
                raise ValueError("The parameter %s is a required field, please configure it"% param)
        for value in self.get_value(infer_params,required_params):
            if value is None or value == "":
                raise ValueError("The mandatory model parameters cannot be empty.")
        self.appid: str = infer_params["saas.appid"]
        self.api_key: str = infer_params["saas.api_key"]
        self.api_secret: str = infer_params["saas.api_secret"]
        self.gpt_url: str = infer_params.get("saas.gpt_url","wss://spark-api.xf-yun.com/v3.1/chat")
        self.domain: str = infer_params.get("saas.domain","generalv3")
        self.config = SparkDeskAPIParams(self.appid, self.api_key, self.api_secret, self.gpt_url, self.domain)
        self.timeout = int(infer_params.get("saas.timeout",30))
        self.debug = infer_params.get("saas.debug",False)

    @staticmethod
    def on_error(ws, error):
        pass


    @staticmethod
    def on_close(ws,a,b):
        pass


    @staticmethod
    def on_open(ws):
        thread.start_new_thread(CustomSaasAPI.run, (ws,))

    @staticmethod
    def run(ws, *args):
        # 8192
        data = {
            "header": {
                "app_id": ws.appid,
                "uid": "1234"
            },
            "parameter": {
                "chat": {
                    "domain": ws.domain,
                    "random_threshold": ws.temperature,
                    "max_tokens": ws.max_length,
                    "auditing": "default"
                }
            },
            "payload": {
                "message": {
                    "text": ws.question
                }
            }
        }
        data = json.dumps(data)        
        ws.send(data)


    @staticmethod
    def on_message(ws, message):
        data = json.loads(message)        
        code = data['header']['code']
        if code != 0:
            reponse_queue.put(f'请求错误: {code}, {data}')
            reponse_queue.put(None)
            ws.close()
        else:
            choices = data["payload"]["choices"]
            status = choices["status"]
            content = choices["text"][0]["content"]
            reponse_queue.put(content)
            if status == 2:
                reponse_queue.put(None)
                ws.close()


    # saas/proprietary
    def get_meta(self):
        return [{
            "model_deploy_type": "saas",
            "backend":"saas"
        }]

    def get_value(self,infer_params: Dict[str, str],keys_to_get):
        values = []
        for key in keys_to_get:
            if key in infer_params.keys():
                values.append(infer_params[key])
        return values

    def stream_chat(self,tokenizer,ins:str, his:List[Dict[str,Any]]=[],
                    max_length:int=4096,
                    top_p:float=0.7,
                    temperature:float=0.9):

        q = his + [{"role": "user", "content": ins}]
        websocket.enableTrace(self.debug)
        wsUrl = self.config.create_url()
        ws = websocket.WebSocketApp(wsUrl,
                                    on_message=CustomSaasAPI.on_message,
                                    on_error=CustomSaasAPI.on_error,
                                    on_close=CustomSaasAPI.on_close,
                                    on_open=CustomSaasAPI.on_open)
        ws.appid = self.config.APPID
        ws.domain = self.config.DOMAIN
        ws.question = q
        ws.max_length = max_length
        ws.top_p = top_p
        ws.temperature = temperature
        ws.run_forever(sslopt={"cert_reqs": ssl.CERT_NONE})

        result = []

        t  = reponse_queue.get(timeout=self.timeout)
        while t is not None:
            result.append(t)
            t  = reponse_queue.get(timeout=self.timeout)       
         
        return [("".join(result),"")]

##File: /home/winubuntu/projects/byzer-llm/src/byzerllm/saas/zhipu/__init__.py
import json
from zhipuai import ZhipuAI
import time
import traceback
from typing import List, Tuple, Dict,Any
import ray
from byzerllm.utils import BlockVLLMStreamServer,StreamOutputs,SingleOutput,SingleOutputMeta
import threading
import asyncio


class CustomSaasAPI:
    def __init__(self, infer_params: Dict[str, str]) -> None:
        self.api_key = infer_params["saas.api_key"]
        # chatglm_lite, chatglm_std, chatglm_pro
        self.model = infer_params.get("saas.model", "glm-4")        
        self.client = ZhipuAI(api_key=self.api_key) 

        self.meta = {
            "model_deploy_type": "saas",
            "backend":"saas",
            "support_stream": True
        }

        if "embedding" not in  self.model.lower():            
            self.meta["embedding_mode"] = False 
        else:            
            self.meta["embedding_mode"] = True       
        try:
            ray.get_actor("BLOCK_VLLM_STREAM_SERVER")
        except ValueError:            
            ray.remote(BlockVLLMStreamServer).options(name="BLOCK_VLLM_STREAM_SERVER",lifetime="detached",max_concurrency=1000).remote()            

    # saas/proprietary
    def get_meta(self):
        return [self.meta] 

    def embed_query(self, ins: str, **kwargs):                     
        start_time = time.monotonic()
        response = self.client.embeddings.create(
                model=self.model,
                input=ins,
            )
        time_cost = time.monotonic() - start_time
        return response.data[0].embedding

    async def async_stream_chat(self, tokenizer, ins: str, his: List[Dict[str, Any]] = [],
                    max_length: int = 4096,
                    top_p: float = 0.7,
                    temperature: float = 0.9, **kwargs):
        
        messages = his + [{"role": "user", "content": ins}]
        
        stream = kwargs.get("stream",False)    

        other_params = {}
        
        if "stream" in kwargs:        
            other_params["stream"] = kwargs["stream"]

        for k, v in kwargs.items():
            if k in ["max_tokens", "stop"]:
                other_params[k] = v
        
        start_time = time.monotonic()
        res_data = self.client.chat.completions.create(
                            model=self.model,
                            temperature = temperature,
                            top_p = top_p,
                            messages=messages,**other_params)
        
        if stream:            
            server = ray.get_actor("BLOCK_VLLM_STREAM_SERVER")
            request_id = [None]

            def writer(): 
                r = ""
                for response in res_data:                                        
                    v = response.choices[0].delta.content
                    r += v
                    request_id[0] = f"zhipu_{response.id}"
                    ray.get(server.add_item.remote(request_id[0], 
                                                    StreamOutputs(outputs=[SingleOutput(text=r,metadata=SingleOutputMeta(
                                                        input_tokens_count= -1,
                                                        generated_tokens_count= -1,
                                                    ))])
                                                    ))
                ray.get(server.mark_done.remote(request_id[0]))

            threading.Thread(target=writer,daemon=True).start()            
                               
            time_count= 10*100
            while request_id[0] is None and time_count > 0:
                time.sleep(0.01)
                time_count -= 1
            
            if request_id[0] is None:
                raise Exception("Failed to get request id")
            
            def write_running():
                return ray.get(server.add_item.remote(request_id[0], "RUNNING"))
                        
            await asyncio.to_thread(write_running)
            return [("",{"metadata":{"request_id":request_id[0],"stream_server":"BLOCK_VLLM_STREAM_SERVER"}})] 
      
        time_cost = time.monotonic() - start_time
        generated_text = res_data.choices[0].message.content        
        generated_tokens_count = res_data.usage.completion_tokens

        return [(generated_text,{"metadata":{
                        "request_id":res_data.id,
                        "input_tokens_count":res_data.usage.prompt_tokens,
                        "generated_tokens_count":generated_tokens_count,
                        "time_cost":time_cost,
                        "first_token_time":0,
                        "speed":float(generated_tokens_count)/time_cost,        
                    }})]




##File: /home/winubuntu/projects/byzer-llm/src/byzerllm/saas/qianwen/__init__.py
from http import HTTPStatus
from typing import List, Dict
import dashscope
from dashscope.api_entities.dashscope_response import Message
import time
import ray
from byzerllm.utils import BlockVLLMStreamServer,StreamOutputs,SingleOutput,SingleOutputMeta
import threading
import asyncio



class CustomSaasAPI:
    def __init__(self, infer_params: Dict[str, str]) -> None:
        self.api_key: str = infer_params["saas.api_key"]  
        self.model = infer_params.get("saas.model", "qwen-turbo")
        self.meta = {
            "model_deploy_type": "saas",
            "backend":"saas",
            "support_stream": True
        } 
        
        self.meta["embedding_mode"] = "embedding"  in  self.model.lower()

        try:
            ray.get_actor("BLOCK_VLLM_STREAM_SERVER")
        except ValueError:            
            ray.remote(BlockVLLMStreamServer).options(name="BLOCK_VLLM_STREAM_SERVER",lifetime="detached",max_concurrency=1000).remote()     

     # saas/proprietary
    def get_meta(self):
        return [self.meta] 

    
    def embed_query(self, ins: str, **kwargs): 
        # text-embedding-v1或者text-embedding-v2              
        resp = dashscope.TextEmbedding.call(
        api_key=self.api_key,
        model=self.model,
        input=ins)
        if resp.status_code == HTTPStatus.OK:
            return resp.output["embeddings"][0]["embedding"]
        else:
            raise Exception(resp.message)


    async def async_stream_chat(
            self,
            tokenizer,
            ins: str,
            his: List[dict] = [],
            max_length: int = 1024,
            top_p: float = 0.9,
            temperature: float = 0.1,
            **kwargs
    ):
        
        messages = his + [{"role": "user", "content": ins}]        
        
        start_time = time.monotonic()

        other_params = {}
                
        if "top_k" in kwargs:
            other_params["top_k"] = int(kwargs["top_k"])

        if "stop" in kwargs:
            other_params["stop"] = kwargs["stop"]

        if "enable_search" in kwargs:
            other_params["enable_search"] = kwargs["enable_search"]        

        if "enable_search_enhance" in kwargs:
            other_params["enable_search_enhance"] = kwargs["enable_search_enhance"]

        if "stream" in kwargs:        
            other_params["stream"] = kwargs["stream"]

        if "incremental_output" in kwargs:
            other_params["incremental_output"] = kwargs["incremental_output"]    

        stream = kwargs.get("stream",False)    
        
        res_data = dashscope.Generation.call(model = self.model,
                                            messages=[Message(**message) for message in messages],
                                            api_key=self.api_key,
                                            max_tokens=max_length,
                                            temperature=temperature,
                                            top_p=top_p,
                                            result_format='message',**other_params)
        
        if stream:
            
            server = ray.get_actor("BLOCK_VLLM_STREAM_SERVER")
            request_id = [None]

            def writer(): 
                for response in res_data:                                        
                    if response.status_code == HTTPStatus.OK:
                        v = response.output.choices[0]['message']['content']                        
                        request_id[0] = response.request_id                        
                        ray.get(server.add_item.remote(request_id[0], 
                                                       StreamOutputs(outputs=[SingleOutput(text=v,metadata=SingleOutputMeta(
                                                           input_tokens_count=response["usage"]["input_tokens"],
                                                           generated_tokens_count=response["usage"]["output_tokens"],
                                                       ))])
                                                       ))
                        
                    else:
                        print('Request id: %s, Status code: %s, error code: %s, error message: %s' % (
                            response.request_id, response.status_code,
                            response.code, response.message
                        ),flush=True) 
                ray.get(server.mark_done.remote(request_id[0]))

            threading.Thread(target=writer,daemon=True).start()            
                               
            time_count= 10*100
            while request_id[0] is None and time_count > 0:
                time.sleep(0.01)
                time_count -= 1
            
            if request_id[0] is None:
                raise Exception("Failed to get request id")
            
            def write_running():
                return ray.get(server.add_item.remote(request_id[0], "RUNNING"))
                        
            await asyncio.to_thread(write_running)
            return [("",{"metadata":{"request_id":request_id[0],"stream_server":"BLOCK_VLLM_STREAM_SERVER"}})]  
              
        time_cost = time.monotonic() - start_time
        
        if res_data["status_code"] == HTTPStatus.OK:
             generated_text = res_data["output"]["choices"][0]["message"]["content"]
             generated_tokens_count = res_data["usage"]["output_tokens"]
             input_tokens_count = res_data["usage"]["input_tokens"]

             return [(generated_text,{"metadata":{
                        "request_id":res_data["request_id"],
                        "input_tokens_count":input_tokens_count,
                        "generated_tokens_count":generated_tokens_count,
                        "time_cost":time_cost,
                        "first_token_time":0,
                        "speed":float(generated_tokens_count)/time_cost,        
                    }})] 
        else:
            s = 'Request id: %s, Status code: %s, error code: %s, error message: %s' % (
                res_data.request_id, res_data.status_code,
                res_data.code, res_data.message
            )
            print(s)
            raise Exception(s)

    
        



##File: /home/winubuntu/projects/byzer-llm/src/byzerllm/saas/qianfan/__init__.py
import traceback
from typing import List, Dict
import os
import time
import qianfan
from byzerllm.utils import BlockVLLMStreamServer,StreamOutputs,SingleOutput,SingleOutputMeta
import threading
import asyncio
import ray


class CustomSaasAPI:
    def __init__(self, infer_params: Dict[str, str]) -> None:        
        self.api_key: str = infer_params["saas.api_key"]
        self.secret_key: str = infer_params["saas.secret_key"]
        os.environ["QIANFAN_ACCESS_KEY"] = self.api_key
        os.environ["QIANFAN_SECRET_KEY"] = self.secret_key
        qianfan.AK(self.api_key)
        qianfan.SK(self.secret_key)
        self.model: str = infer_params.get("saas.model", "ERNIE-Bot-turbo")   
        self.client = qianfan.ChatCompletion()   
        try:
            ray.get_actor("BLOCK_VLLM_STREAM_SERVER")
        except ValueError:            
            ray.remote(BlockVLLMStreamServer).options(name="BLOCK_VLLM_STREAM_SERVER",lifetime="detached",max_concurrency=1000).remote() 

     # saas/proprietary
    def get_meta(self):
        return [{
            "model_deploy_type": "saas",
            "backend":"saas",
            "support_stream": True
        }]    

    async def async_stream_chat(
            self,
            tokenizer,
            ins: str,
            his: List[dict] = [],
            max_length: int = 4096,
            top_p: float = 0.7,
            temperature: float = 0.9,
            **kwargs
    ):

        other_params = {}
        
        if "request_timeout" in kwargs:
            other_params["request_timeout"] = int(kwargs["request_timeout"])
        
        if "retry_count" in kwargs:
            other_params["retry_count"] = int(kwargs["retry_count"])
        
        if "backoff_factor" in kwargs:
            other_params["backoff_factor"] = float(kwargs["backoff_factor"])  

        if "penalty_score" in kwargs:
            other_params["penalty_score"] = float(kwargs["penalty_score"])  

        stream = kwargs.get("stream",False)                                  

        messages = qianfan.Messages()
        for item in his:
            role, content = item['role'], item['content']
            # messages must have an odd number of members
            # look for details: https://cloud.baidu.com/doc/WENXINWORKSHOP/s/clntwmv7t
            if role == 'system':
                messages.append(content, qianfan.Role.User)
                messages.append("OK", qianfan.Role.Assistant)
                continue
            messages.append(content, role)

        if ins:
            messages.append(ins, qianfan.Role.User)
        
        start_time = time.monotonic()
        
        res_data = self.client.do(
            model=self.model,            
            messages=messages,
            top_p=top_p,
            temperature=temperature,
            stream=stream,
            **other_params
        )
        
        if stream:
            server = ray.get_actor("BLOCK_VLLM_STREAM_SERVER")
            request_id = [None]

            def writer(): 
                for response in res_data:                                        
                    if response["code"] == 200:
                        v = response["result"]
                        request_id[0] = f'qianfan_{response["id"]}'
                        ray.get(server.add_item.remote(request_id[0], 
                                                       StreamOutputs(outputs=[SingleOutput(text=v,metadata=SingleOutputMeta(
                                                           input_tokens_count=response["usage"]["prompt_tokens"],
                                                           generated_tokens_count=response["usage"]["completion_tokens"],
                                                       ))])
                                                       ))                                            
                ray.get(server.mark_done.remote(request_id[0]))

            threading.Thread(target=writer,daemon=True).start()            
                               
            time_count= 10*100
            while request_id[0] is None and time_count > 0:
                time.sleep(0.01)
                time_count -= 1
            
            if request_id[0] is None:
                raise Exception("Failed to get request id")
            
            def write_running():
                return ray.get(server.add_item.remote(request_id[0], "RUNNING"))
                        
            await asyncio.to_thread(write_running)
            return [("",{"metadata":{"request_id":request_id[0],"stream_server":"BLOCK_VLLM_STREAM_SERVER"}})] 

        time_cost = time.monotonic() - start_time

        generated_text = res_data["result"]
        generated_tokens_count = res_data["usage"]["completion_tokens"]
        input_tokens_count = res_data["usage"]["prompt_tokens"]

        return [(generated_text,{"metadata":{
                "request_id":res_data["id"],
                "input_tokens_count":input_tokens_count,
                "generated_tokens_count":generated_tokens_count,
                "time_cost":time_cost,
                "first_token_time":0,
                "speed":float(generated_tokens_count)/time_cost,        
            }})] 

    

学习通义千问VL文档，然后参考 saas/qianwen 中的接口规范实现，实现一个 saas/qianyi_vl。

    